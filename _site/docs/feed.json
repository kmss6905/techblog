{
    "version": "https://jsonfeed.org/version/1",
    "title": "김민식 기술블로그",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "My personal blog.",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Colin Holzman",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://localhost:4000/2025/04/17/%EC%A3%BC%EB%8B%88%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EA%B0%9C%EB%B0%9C%ED%95%A0-%EB%95%8C-%EB%8D%94-%EA%B0%9C%EC%84%A0%ED%95%A0-%EC%97%AC%EC%A7%80%EB%8A%94-%EC%97%86%EB%8A%94-%EC%A7%80-%EA%B3%A0%EB%AF%BC%ED%95%B4%EB%B3%B4%EC%84%B8%EC%9A%94",
            "title": "주니어 개발자가 개발할 때 더 개선할 여지는 없는 지 고민해보세요",
            "summary": null,
            "content_text": "2025.04.17 - [쉬운코드]주니어 개발자가 개발할 때 더 개선할 여지는 없는 지 고민 해보자예제 1. 1부터 N 까지의 정수 합(Sum)을 구하는 함수를 작성public static int intSum(int n){    int sum = 0;    while (n &gt;= 1) {        sum += n --;    }    return sum;}// 성능 훨 좋다.public static int intSum3(int n){    return n * (n + 1) / 2;}System.out.println(intSum(1_000_000));System.out.println(intSum(1_000_000));1784293664-363189984// long type 으로 바꿔보자public static int intSum4(int n){    if (n % 2 == 0) {        return (n / 2) * (n + 1);    }else {        return n * ((n + 1) / 2);    }}System.out.println(intSum(1_000_000));System.out.println(intSum(1_000_000));17842936641784293664예제 2. 배치작업상황  어떤 기기가 1분 마다 스캔한 데이터를 DB에 저장하고 있는 상황  해당 기기가 100대가 있음  배치 작업 : 검수를 위해 하루 한번 100대가 하루 동안 스캔한 데이터를 각각의 압축 파일로 만들어서 3rd party API 를 통해 업로드생각 1. 🤔  최초에 배치는 싱글 스레드로 구현 : 총 7시간 정도 소요  이걸 스레드 10개로 증가 : 총 3시간 정도로 시간 단축  하지만 더 개선할 여지는 없을까??생각 2. 🤔왜 스레드 개수를 열개 로 잡았는가 ?? 일단 한번 트라이??  하나의 태스크를 조금 더 구체적으로 분석해보자          기기 한 대가 하루 동안 스캔한 데이터를 압축      압축 파일을 검수 API에 업로드      1번의 경우 CPU bound, 소요 시간은 약 4분2번의 경우 I/O bound, 소요 시간 약 1분I/O bound 일 때는 스레드가 적당히 많으면 오히려 병렬성에 좋음CPU bound 일 때는 스레드가 많으면 ?? 서버 core 수!  CPU bound → 소요시간 약 4분          CPU Bound 일 때는 스레드가 많으면?                  서버 Core 수          배치서버는 2core                          압축하는 동안에 다른 거 할 수 없다.                                            IO Bound → 소요시간 약 1분          IO 바운드일 때는 스레드가 적당히 많으면 오히려 병렬성에 좋다.        왜 스레드 개수를 열개로 잡았는가???? → 음.. 열개가 최선의 선택은 아닐 수 있다! 더 나은 스레드 개수가 있을 수 있음!, 다섯개로 조정해볼까?  최적의 스레드 수를 찾는 게 베스트일까? 오버 엔지니어링 아닐까??          기기 100개 이지만, 더 늘어날 수도 있고      센싱하는 데이터가 1분마다가 아니라 더 늘어날 수도 있고? …      음.. 그러면 앞으로 스레드 수 찾는 게 가변 적일 건데 이게 오버엔지니어링 아닐까?        관점의 재점검!! : 스레드 수 조정 외에 다른 접근 은 없을까?(내가 스레드에만 몰입 한 것이 아닐까?)          scale up! core 수 증가!      scale out! 더 많은 서버 사용!!        이게 최선일까? 현재 서버 스펙에서 더 개선할 여지는 없을까?          기기 한대가 하루 동안 스캔한 데이터를 압축 : CPU bound, 약 4분 소요      압축 파일을 검수 API 에 업로드 : I/O bound, 약 1분소요      ⇒ 기기 100대에 대해서 1번 작업부터 먼저 다하고 이어서 2번 작업을 한번에 하면 어떨까?  1번 작업할 때는 2~3개 스레드      2번 작업 때 비동기 호출(WebClient, etc…)    이게 최선일 까? 더 개선할 여지는 없을까? (추가로 고려해볼 만한 내용)          검수 API에 부하를 주진 않을까? (동시에 몇개의 파일을 업로드 할 지 고려)      DB에서 데이터를 읽어올 때 하루치 스캔 데이터를 한번에 다 읽어보면 서버 메모리는 괜찮을까?                  1기가 DB에 있다고 가정 → 1기가 전부를 배치 어플에 올려둔다? → 이건 메모리에 부담이다.                          그러면 한번에 읽지 말고, 스트림 방식으로 가져와서 파일을 떨구는 건 어떨까?              스트림 방식으로 압축 파일 생성 방법 검색                                  etc) 압축알고리즘은 또 어떤게 있지? (검수 API 쪽에서 허용되는 압축포맷도 확인해봐야하는 부분이고…)                                                                        예제 3. 캐싱(Caching)private Cache&lt;Integer, CachedProduct&gt; productCache = Caffeine.newBuilder().build();CachedProduct product = productCache.getIfPresent(productId);product.price = (int)Math.ceil(product.price / usdToWonRate); // 달러로 바꿈 &lt;- 문제가 되는 부분// 달러로 바꾸는 과정은 캐시된 데이터 를 기준으로 바꾸고 있다.!! 힙 메모리를 참조하고 있기 떄문// 완전망한다. 10000 원화가 -&gt; 5달러로 그대로 바뀐채로 계속 !public record CachedProduct(int id, String modelName, int price) {\tpublic int id;\tpublic String modelName;\tpublic int price;}음.. 그러면 어떻게 개선할 수 있을까?price 를 바꿀 수 있어서 그런거라고 생각해서 final 을 붙이는 게 최선일까 ? 결국 cached 된 것들은 값을 바꾸면 안되는 건가? → 불변객체로 만들어야 한다.?내가 저장하는 데이터를 캐싱, 참조될거고, 맘대로 바꾸면 위험할 듯public final class CachedProduct {    private final int id;    private final String modelName;    private final int price;    public CachedProduct(int id, String modelName, int price) {        this.id = id;        this.modelName = modelName;        this.price = price;    }}public record CachedProduct {\tint id;\tString modelName;\tint price;}CachedProduct 의 타입이 primitive type 이 아닌 List 가 추가 된다면?? 어떻게 될까?  List 를 불변객체 ?List …그 외 생각해볼 것  우리 사이트에서 물품을 원화(KRW)로만 판매하다가 , 달러 (USD)로도 판매할 예정이다.          백엔드 프론트 각각 코드를 조금씩 고치면 달러로도 판매하게 끔 만들 수 있다.                  음 이게 최선일까?                    그런데 앞으로 일본과 동남아 쪽도 공략 예정이라고 한다.      엔화 등 추가적인 통화 (currency) 지원이 필요할 수 있다.      이 상황에서 어떤 것이 최선일까?                  매번 통화가 추가될때 마다 백엔드 프론트 코드를 조금 씩 고치는 게 나을까?          아니면 어드민 페이지에서 딸깍 한번이면 통화 추가가 자유롭게 추가 삭제 되는 게 좋을까?                    정리 : 이게 최선일까? 고민하는 습관      성능 혹은 안전성의 관점에서 늘 고민        리소스는 언제나 한정되어 있다.        명확한 근거를 추구하고 있는가 ? (단, 너무 집착, 오버엔지니어링은 경계할 것)        바라보는 관점을 다양화 하기(내가 너무 스레드 개수로만 집착하지 않았는 가? .., db? redis ? 방법론 측면에서 ?! )        더 편할 순 없는가?  …출처https://www.youtube.com/watch?v=ZWWUSN13Wzw",
            "content_html": "<h1 id=\"20250417---쉬운코드주니어-개발자가-개발할-때-더-개선할-여지는-없는-지-고민-해보자\">2025.04.17 - [쉬운코드]주니어 개발자가 개발할 때 더 개선할 여지는 없는 지 고민 해보자</h1><h2 id=\"예제-1-1부터-n-까지의-정수-합sum을-구하는-함수를-작성\">예제 1. 1부터 N 까지의 정수 합(Sum)을 구하는 함수를 작성</h2><pre><code class=\"language-java\">public static int intSum(int n){    int sum = 0;    while (n &gt;= 1) {        sum += n --;    }    return sum;}// 성능 훨 좋다.public static int intSum3(int n){    return n * (n + 1) / 2;}</code></pre><pre><code class=\"language-java\">System.out.println(intSum(1_000_000));System.out.println(intSum(1_000_000));1784293664-363189984</code></pre><pre><code class=\"language-java\">// long type 으로 바꿔보자public static int intSum4(int n){    if (n % 2 == 0) {        return (n / 2) * (n + 1);    }else {        return n * ((n + 1) / 2);    }}System.out.println(intSum(1_000_000));System.out.println(intSum(1_000_000));17842936641784293664</code></pre><h2 id=\"예제-2-배치작업\">예제 2. 배치작업</h2><h4 id=\"상황\">상황</h4><ul>  <li>어떤 기기가 1분 마다 스캔한 데이터를 DB에 저장하고 있는 상황</li>  <li>해당 기기가 100대가 있음</li>  <li>배치 작업 : 검수를 위해 하루 한번 100대가 하루 동안 스캔한 데이터를 각각의 압축 파일로 만들어서 3rd party API 를 통해 업로드</li></ul><hr /><h3 id=\"생각-1-\">생각 1. 🤔</h3><ul>  <li>최초에 배치는 싱글 스레드로 구현 : 총 7시간 정도 소요</li>  <li>이걸 스레드 10개로 증가 : 총 3시간 정도로 시간 단축</li>  <li>하지만 더 개선할 여지는 없을까??</li></ul><hr /><h3 id=\"생각-2-\">생각 2. 🤔</h3><p>왜 스레드 개수를 <em>열개</em> 로 잡았는가 ?? 일단 한번 트라이??</p><ul>  <li>하나의 태스크를 조금 더 구체적으로 분석해보자    <ol>      <li>기기 한 대가 하루 동안 스캔한 데이터를 압축</li>      <li>압축 파일을 검수 API에 업로드</li>    </ol>  </li></ul><p>1번의 경우 CPU bound, 소요 시간은 약 4분2번의 경우 I/O bound, 소요 시간 약 1분</p><hr /><p>I/O bound 일 때는 스레드가 적당히 많으면 오히려 병렬성에 좋음CPU bound 일 때는 스레드가 많으면 ?? 서버 core 수!</p><ol>  <li>CPU bound → 소요시간 약 4분    <ol>      <li>CPU Bound 일 때는 스레드가 많으면?        <ol>          <li>서버 Core 수</li>          <li>배치서버는 2core            <ol>              <li>압축하는 동안에 다른 거 할 수 없다.</li>            </ol>          </li>        </ol>      </li>    </ol>  </li>  <li>IO Bound → 소요시간 약 1분    <ol>      <li>IO 바운드일 때는 스레드가 적당히 많으면 오히려 병렬성에 좋다.</li>    </ol>  </li></ol><ul>  <li>왜 스레드 개수를 열개로 잡았는가???? → 음.. 열개가 최선의 선택은 아닐 수 있다! 더 나은 스레드 개수가 있을 수 있음!, 다섯개로 조정해볼까?</li>  <li>최적의 스레드 수를 찾는 게 베스트일까? 오버 엔지니어링 아닐까??    <ul>      <li>기기 100개 이지만, 더 늘어날 수도 있고</li>      <li>센싱하는 데이터가 1분마다가 아니라 더 늘어날 수도 있고? …</li>      <li>음.. 그러면 앞으로 스레드 수 찾는 게 가변 적일 건데 이게 오버엔지니어링 아닐까?</li>    </ul>  </li>  <li>관점의 재점검!! : 스레드 수 조정 외에 다른 접근 은 없을까?(내가 스레드에만 몰입 한 것이 아닐까?)    <ul>      <li>scale up! core 수 증가!</li>      <li>scale out! 더 많은 서버 사용!!</li>    </ul>  </li>  <li>이게 최선일까? 현재 서버 스펙에서 더 개선할 여지는 없을까?    <ol>      <li>기기 한대가 하루 동안 스캔한 데이터를 압축 : CPU bound, 약 4분 소요</li>      <li>압축 파일을 검수 API 에 업로드 : I/O bound, 약 1분소요</li>    </ol>  </li></ul><p>⇒ 기기 100대에 대해서 1번 작업부터 먼저 다하고 이어서 2번 작업을 한번에 하면 어떨까?</p><ul>  <li>1번 작업할 때는 2~3개 스레드</li>  <li>    <p>2번 작업 때 비동기 호출(WebClient, etc…)</p>  </li>  <li>이게 최선일 까? 더 개선할 여지는 없을까? (추가로 고려해볼 만한 내용)    <ul>      <li>검수 API에 부하를 주진 않을까? (동시에 몇개의 파일을 업로드 할 지 고려)</li>      <li>DB에서 데이터를 읽어올 때 하루치 스캔 데이터를 한번에 다 읽어보면 서버 메모리는 괜찮을까?        <ul>          <li>1기가 DB에 있다고 가정 → 1기가 전부를 배치 어플에 올려둔다? → 이건 메모리에 부담이다.            <ul>              <li>그러면 한번에 읽지 말고, 스트림 방식으로 가져와서 파일을 떨구는 건 어떨까?</li>              <li>스트림 방식으로 압축 파일 생성 방법 검색                <ul>                  <li>etc) 압축알고리즘은 또 어떤게 있지? (검수 API 쪽에서 허용되는 압축포맷도 확인해봐야하는 부분이고…)</li>                </ul>              </li>            </ul>          </li>        </ul>      </li>    </ul>  </li></ul><h2 id=\"예제-3-캐싱caching\">예제 3. 캐싱(Caching)</h2><pre><code class=\"language-java\">private Cache&lt;Integer, CachedProduct&gt; productCache = Caffeine.newBuilder().build();CachedProduct product = productCache.getIfPresent(productId);product.price = (int)Math.ceil(product.price / usdToWonRate); // 달러로 바꿈 &lt;- 문제가 되는 부분// 달러로 바꾸는 과정은 캐시된 데이터 를 기준으로 바꾸고 있다.!! 힙 메모리를 참조하고 있기 떄문// 완전망한다. 10000 원화가 -&gt; 5달러로 그대로 바뀐채로 계속 !</code></pre><pre><code class=\"language-java\">public record CachedProduct(int id, String modelName, int price) {\tpublic int id;\tpublic String modelName;\tpublic int price;}</code></pre><p>음.. 그러면 어떻게 개선할 수 있을까?</p><p>price 를 바꿀 수 있어서 그런거라고 생각해서 final 을 붙이는 게 최선일까 ? 결국 cached 된 것들은 값을 바꾸면 안되는 건가? → 불변객체로 만들어야 한다.?</p><p>내가 저장하는 데이터를 캐싱, 참조될거고, 맘대로 바꾸면 위험할 듯</p><pre><code class=\"language-java\">public final class CachedProduct {    private final int id;    private final String modelName;    private final int price;    public CachedProduct(int id, String modelName, int price) {        this.id = id;        this.modelName = modelName;        this.price = price;    }}</code></pre><pre><code class=\"language-java\">public record CachedProduct {\tint id;\tString modelName;\tint price;}</code></pre><p>CachedProduct 의 타입이 primitive type 이 아닌 List 가 추가 된다면?? 어떻게 될까?  List 를 불변객체 ?</p><p>List<Seller> …</Seller></p><p>그 외 생각해볼 것</p><ul>  <li>우리 사이트에서 물품을 원화(KRW)로만 판매하다가 , 달러 (USD)로도 판매할 예정이다.    <ul>      <li>백엔드 프론트 각각 코드를 조금씩 고치면 달러로도 판매하게 끔 만들 수 있다.        <ul>          <li>음 이게 최선일까?</li>        </ul>      </li>      <li>그런데 앞으로 일본과 동남아 쪽도 공략 예정이라고 한다.</li>      <li>엔화 등 추가적인 통화 (currency) 지원이 필요할 수 있다.</li>      <li>이 상황에서 어떤 것이 최선일까?        <ul>          <li>매번 통화가 추가될때 마다 백엔드 프론트 코드를 조금 씩 고치는 게 나을까?</li>          <li>아니면 어드민 페이지에서 딸깍 한번이면 통화 추가가 자유롭게 추가 삭제 되는 게 좋을까?</li>        </ul>      </li>    </ul>  </li></ul><h2 id=\"정리--이게-최선일까-고민하는-습관\">정리 : 이게 최선일까? 고민하는 습관</h2><ul>  <li>    <p>성능 혹은 안전성의 관점에서 늘 고민</p>  </li>  <li>    <p>리소스는 언제나 한정되어 있다.</p>  </li>  <li>    <p>명확한 근거를 추구하고 있는가 ? (단, 너무 집착, 오버엔지니어링은 경계할 것)</p>  </li>  <li>    <p>바라보는 관점을 다양화 하기(내가 너무 스레드 개수로만 집착하지 않았는 가? .., db? redis ? 방법론 측면에서 ?! )</p>  </li>  <li>    <p>더 편할 순 없는가?</p>  </li></ul><p>…</p><h3 id=\"출처\">출처</h3><hr /><p>https://www.youtube.com/watch?v=ZWWUSN13Wzw</p>",
            "url": "http://localhost:4000/2025/04/17/%EC%A3%BC%EB%8B%88%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EA%B0%9C%EB%B0%9C%ED%95%A0-%EB%95%8C-%EB%8D%94-%EA%B0%9C%EC%84%A0%ED%95%A0-%EC%97%AC%EC%A7%80%EB%8A%94-%EC%97%86%EB%8A%94-%EC%A7%80-%EA%B3%A0%EB%AF%BC%ED%95%B4%EB%B3%B4%EC%84%B8%EC%9A%94",
            
            
            
            
            
            "date_published": "2025-04-17T00:00:00+09:00",
            "date_modified": "2025-04-17T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2025/01/01/test8",
            "title": "Test8",
            "summary": null,
            "content_text": "",
            "content_html": "",
            "url": "http://localhost:4000/2025/01/01/test8",
            
            
            
            
            
            "date_published": "2025-01-01T00:00:00+09:00",
            "date_modified": "2025-01-01T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2025/01/01/test7",
            "title": "Test7",
            "summary": null,
            "content_text": "",
            "content_html": "",
            "url": "http://localhost:4000/2025/01/01/test7",
            
            
            
            
            
            "date_published": "2025-01-01T00:00:00+09:00",
            "date_modified": "2025-01-01T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2025/01/01/test6",
            "title": "Test6",
            "summary": null,
            "content_text": "",
            "content_html": "",
            "url": "http://localhost:4000/2025/01/01/test6",
            
            
            
            
            
            "date_published": "2025-01-01T00:00:00+09:00",
            "date_modified": "2025-01-01T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2025/01/01/test5",
            "title": "Test5",
            "summary": null,
            "content_text": "",
            "content_html": "",
            "url": "http://localhost:4000/2025/01/01/test5",
            
            
            
            
            
            "date_published": "2025-01-01T00:00:00+09:00",
            "date_modified": "2025-01-01T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2025/01/01/test3",
            "title": "Test3",
            "summary": null,
            "content_text": "",
            "content_html": "",
            "url": "http://localhost:4000/2025/01/01/test3",
            
            
            
            
            
            "date_published": "2025-01-01T00:00:00+09:00",
            "date_modified": "2025-01-01T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2025/01/01/test1",
            "title": "Test1",
            "summary": null,
            "content_text": "",
            "content_html": "",
            "url": "http://localhost:4000/2025/01/01/test1",
            
            
            
            
            
            "date_published": "2025-01-01T00:00:00+09:00",
            "date_modified": "2025-01-01T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/11/15/%EB%AA%A8%EB%93%A0-%EA%B2%83%EC%9D%84-%EC%9D%98%EC%8B%AC%ED%95%98%EC%9E%90-%EC%82%BD%EC%A7%88%EC%9D%B4%ED%9B%84-feat-%EB%B6%80%ED%95%98%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%88%B4",
            "title": "모든 것을 의심하자. 삽질이후.. (feat. 부하테스트 툴)",
            "summary": null,
            "content_text": "2024.11.15 - 모든 것을 의심하자. 삽질이후.. (feat. 부하테스트 툴)나는 동시성 테스트를 하기 위해 NGrinder 와 Apache Bench 를 사용했다. 대략적인 계획은 이러하다.쿠폰 발급이라고 예시를 들면  수량이 1억개인 쿠폰이 있다고 가정하고, 1000명, 10000명 동시에 쿠폰 발급 요청을 했을 때 정확히 유저의 요청 수 만큼 쿠폰이 발급되었는 지를 확인한다.문제는 실제 시간을 두고 계속해서 부하를 줬을 때(NGrinder 의 경우 3분동안 부하테스트 시행) 실제 총 실행 테스트를 했을 경우이다.아래의 테스트 결과에서는 총 실행테스트가 22546 개의 요청을 날린 것으로 나와있지만, 실제로는 그보다 많은 23120 개의 요청이 들어온 것을 알 수 있다.NGrinder    그림 1 - NGrinder 테스트 결과   Apache BenchAB 테스트 역시 마찬가지 였다. 실제로 -t 옵션을 주지 않았을 때는 문제가 되지 않았지만, -t 옵션을 통해 시간을 두고 부하 테스트를 했을 경우도 마찬가지로 실제 요청 수와 차이가 있었다    그림 2 - Apache Bench 테스트 결과   AB 테스트 결과에는 1084 개의 완료된 요청이 있다고 했지만 실제로는 그 보다 9개 많은 1093 개의 요청이 들어온 것을 알 수 있다.    그림 3 - 실제 app 내에서 측정한 요청 카운트   확인 방법접속 카운트를 저장하는 변수는 스레드에 안전해야 하기 때문에 Java 에서 제공하는 단일 연산 변수 AtomicLong 를 이용하여 요청 카운트를 저장했다.  private final AtomicLong count = new AtomicLong(0L);\t  @GetMapping(\"/pay-result-v2\")  public ResponseEntity&lt;String&gt; payResultV2() {    count.getAndIncrement();    try {      roomReservationService.reserve(1L);    } catch (RuntimeException e) {      return ResponseEntity.status(400).build();    }    return ResponseEntity.ok(\"ok\");  }  @GetMapping(\"/result-request\")  public String totalRequestCount() {    return \"total request count : \" + count.get();  }깨달은 점사실 처음에는 동시성에 대한 코드가 잘못된 줄 알았다. 하지만 동시성을 제어하는 코드에는 아무런 이상이 없었다. 실제로 테스트 코드를 돌려봤을 때는 모두 통과했었다.하지만 유독 시간을 두는 테스트에서만 문제가 생기는 것을 의심했고 직접 카운트를 찍었을 때 툴에서의 결과와 다른 것을 알 수 있었다.툴에 나오는 요청 횟수를 그대로 믿었기에, 한 동안 나의 코드가 잘못되었는 지 계속 살펴보았다.생각해보면 부하테스트는 정확한 요청 카운트가 중요하지 않을 수 있다. 특히 시간을 두고 점차적인 부하테스트를 할 때 1억건의 요청을 날리는 데 10, 100 정도 요청이 차이난다고 해서 시스템 병목을 파악하고 어느 정도 요청에 대한 Throughput 을 가지는 지를 파악못하는 것은 아니기 때문이다.추가 수정(2024/11/15)이와 관련된 글이 있는 지 찾아보고 수정함.  nGrinder 의 경우 log 파일의 test 수와 web 상에 나타나는 executed test 수가 다를 수 있다고 한다. 왜냐하면 별도의 샘플링이라는 데이터 수집 프로세스를 이용하여 결과가 합산되는 데, 이때 테스트 종료시에 샘플링이 일부 누락되어 조금의 차이가 발생할 수 있고 이는 알려진 이슈라고 한다.(링크참조)      테스트    참고로 nGrinder 는 에이전트당 1개의 프로세스 로그만 볼 수 있기 때문에 1agent, vuser 1000 (1process, 1000 thread) 로 테스트 했다(그림 1의 경우에는 로그파일을 보면 한개의 프로세스만 볼 수 있어서 전체 요청 수 확인 불가함.)테스트 결과 실제 application 에서 측정한 요청 수 와 일치하는 것을 확인할 수 있었다!      그림 4 - 1agent, vuser 1000 (1process, 1000 thread), nGrinder 테스트 결과 log 파일 중 일부    그림 5 - 실제 application 에서 측정한 요청 수참고  http://ngrinder.373.s1.nabble.com/exected-test-td2531.html",
            "content_html": "<h1 id=\"20241115---모든-것을-의심하자-삽질이후-feat-부하테스트-툴\">2024.11.15 - 모든 것을 의심하자. 삽질이후.. (feat. 부하테스트 툴)</h1><p>나는 동시성 테스트를 하기 위해 NGrinder 와 Apache Bench 를 사용했다. 대략적인 계획은 이러하다.</p><p>쿠폰 발급이라고 예시를 들면</p><blockquote>  <p>수량이 1억개인 쿠폰이 있다고 가정하고, 1000명, 10000명 동시에 쿠폰 발급 요청을 했을 때 정확히 유저의 요청 수 만큼 쿠폰이 발급되었는 지를 확인한다.</p></blockquote><p>문제는 실제 시간을 두고 계속해서 부하를 줬을 때(NGrinder 의 경우 3분동안 부하테스트 시행) 실제 총 실행 테스트를 했을 경우이다.아래의 테스트 결과에서는 총 실행테스트가 <strong>22546</strong> 개의 요청을 날린 것으로 나와있지만, 실제로는 그보다 많은 <strong>23120</strong> 개의 요청이 들어온 것을 알 수 있다.</p><h3 id=\"ngrinder\">NGrinder</h3><p align=\"center\">  <img width=\"500\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/ngrinder.png\" /><br />  <em>그림 1 - NGrinder 테스트 결과</em>   </p><h3 id=\"apache-bench\">Apache Bench</h3><p>AB 테스트 역시 마찬가지 였다. 실제로 -t 옵션을 주지 않았을 때는 문제가 되지 않았지만, -t 옵션을 통해 시간을 두고 부하 테스트를 했을 경우도 마찬가지로 실제 요청 수와 차이가 있었다</p><p align=\"center\">  <img width=\"500\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/apache_bench_result.png\" /><br />  <em>그림 2 - Apache Bench 테스트 결과</em>   </p><p>AB 테스트 결과에는 1084 개의 완료된 요청이 있다고 했지만 실제로는 그 보다 9개 많은 <strong>1093</strong> 개의 요청이 들어온 것을 알 수 있다.</p><p align=\"center\">  <img width=\"500\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/count_result.png\" /><br />  <em>그림 3 - 실제 app 내에서 측정한 요청 카운트</em>   </p><h3 id=\"확인-방법\">확인 방법</h3><p>접속 카운트를 저장하는 변수는 스레드에 안전해야 하기 때문에 Java 에서 제공하는 단일 연산 변수 <strong>AtomicLong</strong> 를 이용하여 요청 카운트를 저장했다.</p><pre><code class=\"language-java\">  private final AtomicLong count = new AtomicLong(0L);\t  @GetMapping(\"/pay-result-v2\")  public ResponseEntity&lt;String&gt; payResultV2() {    count.getAndIncrement();    try {      roomReservationService.reserve(1L);    } catch (RuntimeException e) {      return ResponseEntity.status(400).build();    }    return ResponseEntity.ok(\"ok\");  }  @GetMapping(\"/result-request\")  public String totalRequestCount() {    return \"total request count : \" + count.get();  }</code></pre><h3 id=\"깨달은-점\">깨달은 점</h3><p>사실 처음에는 동시성에 대한 코드가 잘못된 줄 알았다. 하지만 동시성을 제어하는 코드에는 아무런 이상이 없었다. 실제로 테스트 코드를 돌려봤을 때는 모두 통과했었다.하지만 유독 시간을 두는 테스트에서만 문제가 생기는 것을 의심했고 직접 카운트를 찍었을 때 툴에서의 결과와 다른 것을 알 수 있었다.</p><p>툴에 나오는 요청 횟수를 그대로 믿었기에, 한 동안 나의 코드가 잘못되었는 지 계속 살펴보았다.생각해보면 부하테스트는 정확한 요청 카운트가 중요하지 않을 수 있다. 특히 시간을 두고 점차적인 부하테스트를 할 때 1억건의 요청을 날리는 데 10, 100 정도 요청이 차이난다고 해서 시스템 병목을 파악하고 어느 정도 요청에 대한 Throughput 을 가지는 지를 파악못하는 것은 아니기 때문이다.</p><h3 id=\"추가-수정20241115\">추가 수정(2024/11/15)</h3><p>이와 관련된 글이 있는 지 찾아보고 수정함.</p><ul>  <li>nGrinder 의 경우 log 파일의 test 수와 web 상에 나타나는 executed test 수가 다를 수 있다고 한다. 왜냐하면 별도의 샘플링이라는 데이터 수집 프로세스를 이용하여 결과가 합산되는 데, 이때 테스트 종료시에 샘플링이 일부 누락되어 조금의 차이가 발생할 수 있고 이는 알려진 이슈라고 한다.(<a href=\"http://ngrinder.373.s1.nabble.com/exected-test-td2531.html\">링크참조</a>)  <br /><br />    <h3 id=\"테스트\">테스트</h3>    <p>참고로 nGrinder 는 에이전트당 1개의 프로세스 로그만 볼 수 있기 때문에 1agent, vuser 1000 (1process, 1000 thread) 로 테스트 했다(그림 1의 경우에는 로그파일을 보면 한개의 프로세스만 볼 수 있어서 전체 요청 수 확인 불가함.)<br />테스트 결과 실제 application 에서 측정한 요청 수 와 일치하는 것을 확인할 수 있었다!</p>  </li></ul><p align=\"center\">  <img width=\"500\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/ngrinder2_logfile.png\" /><br />  <em>그림 4 - 1agent, vuser 1000 (1process, 1000 thread), nGrinder 테스트 결과 log 파일 중 일부</em></p><p align=\"center\">  <img width=\"500\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/count2.png\" /><br />  <em>그림 5 - 실제 application 에서 측정한 요청 수</em></p><p><br /></p><h3 id=\"참고\">참고</h3><ul>  <li>http://ngrinder.373.s1.nabble.com/exected-test-td2531.html</li></ul>",
            "url": "http://localhost:4000/2024/11/15/%EB%AA%A8%EB%93%A0-%EA%B2%83%EC%9D%84-%EC%9D%98%EC%8B%AC%ED%95%98%EC%9E%90-%EC%82%BD%EC%A7%88%EC%9D%B4%ED%9B%84-feat-%EB%B6%80%ED%95%98%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%88%B4",
            
            
            
            
            
            "date_published": "2024-11-15T00:00:00+09:00",
            "date_modified": "2024-11-15T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/10/24/%EA%B2%8C%EC%9D%B4%EB%B0%8D-%EB%8D%B0%EC%8A%A4%ED%81%AC%ED%83%91%EC%9C%BC%EB%A1%9C-%ED%99%88%EC%84%9C%EB%B2%84-%EC%9A%B4%EC%98%81%ED%95%98%EA%B8%B0",
            "title": "게이밍 데스크탑으로 홈서버 운영하기",
            "summary": null,
            "content_text": "2024.10.24 - 게이밍 데스크탑으로 홈서버 운영하기  NCP Platform → Google Cloud → Oracle Cloud 를 거쳐 토이프로젝트 서버로 홈서버를 이용하기로 했다.배경NCP 에서 제공해주던 100만원 크레딧은 아직 남았지만, 유효기간이 곧 끝나가는 터라 결국 다른 클라우드를 알아보았고 Google Cloud 로 넘어 갔다.그러나 결국 크래딧으로 버틸 뿐이라 이 또한 마음에 썩 들지는 않았다. 물론 매번 계정을 Google 계정 만들고 크레딧 받는 과정을 반복하면 된다.Oracle Cloud 의 경우 평생 무료 서버를 2개 제공하고 있지만 매우매우 저 사양 스팩이라 토이 프로젝트로 쓰기에는 부적합했다.(모니터링 툴 까지 생각하면 어림도 없다..)현재 프로젝트 구조초창기 프로젝트 구조와 거의 흡사하다. 다만, Vercel 로 운영하지 않은 것이 조금 차이가 난다. (포스팅 참조 : 비사이드 401 - Green Developers 프로젝트 후기)    그림 1 - 과거의 토이프로젝트 구조   프론트(Next.js)와 백엔드(Spring Boot, Redis, MySQL) 모두 관리의 편의성을 위해 컨테이너 형태로 운영하고 있다.Next.js 와 Spring Boot 와 같은 Application 들은 따로 Application Server 에서 운영하고 나머지 Redis, MySQL 은 DB Server 에서 운영한다. Application Server 와 DB Server 는 같은 Private Subnet 에 있기 때문에 Private IP 로 서로 통신이 가능하다.참고로 개발서버도 운영하고 싶었지만, 그럴 여력이 될 수 없었다. 이미 하나씩 자리를 차지하고 있었기 때문에 초마이크로 서버에 4개의 컨테이너를 띄우고 운영하기에는 너무 버겁다.(각 운영용, 개발용)Google Cloud 를 사용할 때는 개발 서버도 운영했지만 결국 크래딧이 고갈되었다.기존에 사용하던 클라우드 보다는 오버스팩이지만, 별 사용하지 않는 데스크탑을 사용하는 것이기 때문에 별 부담은 없었다.(전기료만 내면 된다).현재 네트워크 토폴로지    그림 2 - 집의 네트워크 토폴로지   우리 집의 네트워크 토폴리지 구성도는 다음과 같다모뎀으로 부터 2개의 공인 IP를 부여받아서 사용하고 있고 하나는 Desktop(pc), 그리고 나머지 하나는 공유기에 연결하여 사용하고 있다.공유기 아래에 pc 를 연결하여 사용할 수도 있지만 독립된 네트워크를 구성하고 싶었다. (KT의 유선정책이 정확히 어떻게 되는 지는 알아봐야 겠지만, 공인 ip 할당이 2개까지 되는 걸로 알고있다. 어떤 글에서는 4개.. 8개도 된다고 한다..)공유기 아래에 연결되어있다면 따로 공인 ip로 접속했을 때 서버로 사용될 pc 로 트래픽이 흐르게 하기 위해 포트포워딩 작업이 필요하겠지만 따로 ip를 할당 받았기 때문에 굳이 그럴 필요는 없다.WSL vs 가상머신에서 Linux 운영체제현재 게이밍 데스크탑의 경우 운영체제가 윈도우 이고 추후에도 윈도우를 이용해 작업할 경우가 굉장히 많고 게임도 해야하기 때문에 운영체제를 바꿀 수는 없다.그렇다고 윈도우 운영체제 그 자체를 서버로 사용하기에는 여간 불편한게 아니다. 따라서 리눅스 환경에서 서버를 운영하고 싶었는 데 나에겐 선택지가 두 개가 있었다.  가상 머신을 설치하고 새로운 컴퓨터를 띄우는 방법  WSL을 사용하여 Windows에 Linux를 설치해서 사용하기나는 가볍게 사용할 생각이라 WSL 을 사용해서 Linux 를 설치했다.그리고 Docker 를 사용하여 모든 서버와 모니터링 관련 애플리케이션들은 이미지로 만들어서 컨테이너로 운영했다.프로젝트 구경하기URL : https://nyangnyang.co.kr",
            "content_html": "<h1 id=\"20241024---게이밍-데스크탑으로-홈서버-운영하기\">2024.10.24 - 게이밍 데스크탑으로 홈서버 운영하기</h1><blockquote>  <p><em>NCP Platform → Google Cloud → Oracle Cloud 를 거쳐 토이프로젝트 서버로 홈서버를 이용하기로 했다.</em></p></blockquote><h2 id=\"배경\">배경</h2><p>NCP 에서 제공해주던 100만원 크레딧은 아직 남았지만, 유효기간이 곧 끝나가는 터라 결국 다른 클라우드를 알아보았고 Google Cloud 로 넘어 갔다.<br />그러나 결국 크래딧으로 버틸 뿐이라 이 또한 마음에 썩 들지는 않았다. 물론 매번 계정을 Google 계정 만들고 크레딧 받는 과정을 반복하면 된다.Oracle Cloud 의 경우 평생 무료 서버를 2개 제공하고 있지만 매우매우 저 사양 스팩이라 토이 프로젝트로 쓰기에는 부적합했다.(<del>모니터링 툴 까지 생각하면 어림도 없다..</del>)</p><p><br /><br /></p><h2 id=\"현재-프로젝트-구조\">현재 프로젝트 구조</h2><p>초창기 프로젝트 구조와 거의 흡사하다. 다만, Vercel 로 운영하지 않은 것이 조금 차이가 난다. (포스팅 참조 : <a href=\"https://velog.io/@kmss6905/%EB%B9%84%EC%82%AC%EC%9D%B4%EB%93%9C-401-Green-Developers-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%ED%9B%84%EA%B8%B0\">비사이드 401 - Green Developers 프로젝트 후기</a>)</p><p align=\"center\">  <img width=\"500\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/oracle_cloud.png\" /><br />  <em>그림 1 - 과거의 토이프로젝트 구조</em>   </p><p>프론트(Next.js)와 백엔드(Spring Boot, Redis, MySQL) 모두 관리의 편의성을 위해 컨테이너 형태로 운영하고 있다.</p><p>Next.js 와 Spring Boot 와 같은 Application 들은 따로 Application Server 에서 운영하고 나머지 Redis, MySQL 은 DB Server 에서 운영한다. Application Server 와 DB Server 는 같은 Private Subnet 에 있기 때문에 Private IP 로 서로 통신이 가능하다.</p><p>참고로 개발서버도 운영하고 싶었지만, 그럴 여력이 될 수 없었다. 이미 하나씩 자리를 차지하고 있었기 때문에 초마이크로 서버에 4개의 컨테이너를 띄우고 운영하기에는 너무 버겁다.(각 운영용, 개발용)</p><p>Google Cloud 를 사용할 때는 개발 서버도 운영했지만 결국 크래딧이 고갈되었다.</p><p>기존에 사용하던 클라우드 보다는 오버스팩이지만, 별 사용하지 않는 데스크탑을 사용하는 것이기 때문에 별 부담은 없었다.(전기료만 내면 된다).</p><p><br /><br /></p><h2 id=\"현재-네트워크-토폴로지\">현재 네트워크 토폴로지</h2><p align=\"center\">  <img width=\"500\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/topology.png\" /><br />  <em>그림 2 - 집의 네트워크 토폴로지</em>   </p><p>우리 집의 네트워크 토폴리지 구성도는 다음과 같다</p><p>모뎀으로 부터 2개의 공인 IP를 부여받아서 사용하고 있고 하나는 Desktop(pc), 그리고 나머지 하나는 공유기에 연결하여 사용하고 있다.</p><p>공유기 아래에 pc 를 연결하여 사용할 수도 있지만 독립된 네트워크를 구성하고 싶었다. (KT의 유선정책이 정확히 어떻게 되는 지는 알아봐야 겠지만, <del>공인 ip 할당이 2개까지 되는 걸로 알고있다. 어떤 글에서는 4개.. 8개도 된다고 한다..</del>)</p><p>공유기 아래에 연결되어있다면 따로 공인 ip로 접속했을 때 서버로 사용될 pc 로 트래픽이 흐르게 하기 위해 포트포워딩 작업이 필요하겠지만 따로 ip를 할당 받았기 때문에 굳이 그럴 필요는 없다.</p><p><br /><br /></p><h2 id=\"wsl-vs-가상머신에서-linux-운영체제\">WSL vs 가상머신에서 Linux 운영체제</h2><p>현재 게이밍 데스크탑의 경우 운영체제가 윈도우 이고 추후에도 윈도우를 이용해 작업할 경우가 굉장히 많고 게임도 해야하기 때문에 운영체제를 바꿀 수는 없다.</p><p>그렇다고 윈도우 운영체제 그 자체를 서버로 사용하기에는 여간 불편한게 아니다. 따라서 리눅스 환경에서 서버를 운영하고 싶었는 데 나에겐 선택지가 두 개가 있었다.</p><ol>  <li><strong>가상 머신을 설치하고 새로운 컴퓨터를 띄우는 방법</strong></li>  <li><strong>WSL을 사용하여 Windows에 Linux를 설치해서 사용하기</strong></li></ol><p>나는 가볍게 사용할 생각이라 WSL 을 사용해서 Linux 를 설치했다.그리고 Docker 를 사용하여 모든 서버와 모니터링 관련 애플리케이션들은 이미지로 만들어서 컨테이너로 운영했다.</p><h3 id=\"프로젝트-구경하기\">프로젝트 구경하기</h3><p>URL : https://nyangnyang.co.kr</p>",
            "url": "http://localhost:4000/2024/10/24/%EA%B2%8C%EC%9D%B4%EB%B0%8D-%EB%8D%B0%EC%8A%A4%ED%81%AC%ED%83%91%EC%9C%BC%EB%A1%9C-%ED%99%88%EC%84%9C%EB%B2%84-%EC%9A%B4%EC%98%81%ED%95%98%EA%B8%B0",
            
            
            
            
            
            "date_published": "2024-10-24T00:00:00+09:00",
            "date_modified": "2024-10-24T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/09/18/jvm-bump-pointer-allocation-and-thread-local-allocation-buffer",
            "title": "Jvm bump pointer allocation and thread Local allocation buffer",
            "summary": null,
            "content_text": "JVM 메모리 할당 효율성 높이기 - Bump pointer allocation 과Thread-Local Allocation Buffer  Java 에서 객체 생성시 JVM 의 Heap 영역에 메모리가 할당된다. 하지만 JVM 은 기본적으로 Multi-Thread 환경이기 때문에 메모리 할당시 메모리 충돌을 방지하기 위해 Bump the pointer 과 Thread-Local-Buffer(TLAB) 라는 기술을 추가하였는 데 이에 대해서 간단히 정리해보았다.Bump the pointer새로운 객체를 만들면 JVM 이 Heap 영역에 새로운 객체를 위해서 메모리를 할당해야하는데, 비어있는 메모리를 찾을 때 JVM은 탐색하는 시간을 줄이기 위해 할당된 메모리 바로 뒤에 메모리를 할당하는 방법을 사용하는 데 이를 Bump pointer allocation 이라고 합니다.  대부분의 Gabage Collector 는 Gabage Collection 시 압축(Compat) 하는 과정을 통해 파편화된 메모리 공간을 하나로 모으는 작업을 합니다.Thread-Local Allocation Buffer등장배경new 라는 키워드를 통해 새로운 객체를 생성했을 때를 가정해보겠습니다.하나의 스레드가 새로운 객체를 메모리에 할당하기 위해 비어있는 메모리 주소를 요청하게 됩니다.  이때 Bump the pointer 를 사용하고 있기 때문에 가장 최근에 할당된 메모리 공간 바로 뒤의 주소를 요청 받게 됩니다.문제는 JVM 은 멀티 스레드를 지원하기 때문에 여러개의 스레드가 최근에 할당된 메모리 공간을 동시에 요청하면 동시화 이슈가 발생하게 됩니다.    그림 1 - 싱글스레드의 메모리 요청   이렇게 그림 1 과 같이 오직 하나의 스레드에 대해서 할당 요청하는 경우에는 메모리 크기를 요청하는 스레드가 하나이기 때문에 동기화 문제가 발생하지 않습니다.    그림 2 - 멀티스레드의 메모리 요청   그림 2 처럼 여러개의 Thread 가 동시에 메모리를 요청하려고 하는 경우 충돌이 발생할 수 있습니다. 당연히 이럴 경우에는 Lock 과 같은 동기화 작업이 수행됩니다.만약 10개의 스레드가 같은 메모리 공간을 요청하려고 한다면 최초 할당을 요청한 스레드가 락을 풀때까지 뒤에 9개의 스레드가 대기하게 되고 이는 Application 의 성능저하를 유발할 수 있습니다.    그림 3 - TLAB   이러한 문제를 해결하기 위해 JVM 은 TLAB(Thread-Local Allocation Buffer) 이라는 기술을 도입했습니다.TLAB(Thread-Local Allocation Buffer)는 그림 3 과 같이 각 스레드에게 Eden 영역의 일부를 독점적으로 할당하여, 해당 스레드가 객체를 생성할 때 동기화 없이 빠르게 메모리를 할당할 수 있도록 합니다.(물론 TLAB 를 Thread 에게 최초로 할당하거나 TLAB 가 부족해서 새롭게 할당 받을 때는 동기화 이슈가 발생하는 것은 어쩔 수 없지만, 그래도 사용하지 않았을 때보다는 동기화 이슈가 많이 줄어 들어 메모리 할당에 걸리는 시간이 줄어드는 건 장점으로 작용합니다.)요약JVM 은 객체에 대한 메모리 할당 요청시 비어 있는 메모리를 찾는 시간을 줄이기 위해 최근 할당된 메모리 공간 바로 뒤의 메모리 공간을 요청하는 방식의 **Bump pointer allocation** 을 사용하고 있습니다.Multi Thread 환경에서 같은 메모리 공간을 동시에 여러 스레드가 요청할 경우 동기화 이슈로 인한 병목현상이 발생하게 됩니다.이를 방지하기 위해 Heap 에 Thread 별로 공간을 나누어 대기 현상 없이 메모리 할당을 가능하게 하는 방법인 **Thread Local Allocation Buffer(TLAB)** 라는 기술을 추가하였습니다.Referencehttps://www.baeldung.com/java-jvm-tlabhttps://inside.java/2020/06/25/compact-forwarding/김한도, 『JAVA PERFORMANCE FUNDAMENTAL』, 엑셈(2009), 108-109",
            "content_html": "<h1 id=\"jvm-메모리-할당-효율성-높이기---bump-pointer-allocation-과thread-local-allocation-buffer\">JVM 메모리 할당 효율성 높이기 - Bump pointer allocation 과Thread-Local Allocation Buffer</h1><blockquote>  <p>Java 에서 객체 생성시 JVM 의 Heap 영역에 메모리가 할당된다. 하지만 JVM 은 기본적으로 Multi-Thread 환경이기 때문에 메모리 할당시 메모리 충돌을 방지하기 위해 Bump the pointer 과 Thread-Local-Buffer(TLAB) 라는 기술을 추가하였는 데 이에 대해서 간단히 정리해보았다.</p></blockquote><h3 id=\"bump-the-pointer\">Bump the pointer</h3><p>새로운 객체를 만들면 JVM 이 Heap 영역에 새로운 객체를 위해서 메모리를 할당해야하는데, 비어있는 메모리를 찾을 때 JVM은 탐색하는 시간을 줄이기 위해 할당된 메모리 바로 뒤에 메모리를 할당하는 방법을 사용하는 데 이를 <strong>Bump pointer allocation</strong> 이라고 합니다.</p><blockquote>  <p>대부분의 Gabage Collector 는 Gabage Collection 시 압축(Compat) 하는 과정을 통해 파편화된 메모리 공간을 하나로 모으는 작업을 합니다.</p></blockquote><h3 id=\"thread-local-allocation-buffer\"><strong>Thread-Local Allocation Buffer</strong></h3><h4 id=\"등장배경\">등장배경</h4><p>new 라는 키워드를 통해 새로운 객체를 생성했을 때를 가정해보겠습니다.</p><p>하나의 스레드가 새로운 객체를 메모리에 할당하기 위해 비어있는 메모리 주소를 요청하게 됩니다.  이때 Bump the pointer 를 사용하고 있기 때문에 가장 최근에 할당된 메모리 공간 바로 뒤의 주소를 요청 받게 됩니다.<br />문제는 JVM 은 멀티 스레드를 지원하기 때문에 여러개의 스레드가 최근에 할당된 메모리 공간을 동시에 요청하면 동시화 이슈가 발생하게 됩니다.</p><p align=\"center\">  <img width=\"500\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/single_thread_allocation_request.png\" /><br />  <em>그림 1 - 싱글스레드의 메모리 요청</em>   </p><p><br /></p><p>이렇게 <em>그림 1</em> 과 같이 오직 하나의 스레드에 대해서 할당 요청하는 경우에는 메모리 크기를 요청하는 스레드가 하나이기 때문에 동기화 문제가 발생하지 않습니다.</p><p align=\"center\">  <img width=\"500\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/multi_thread_allocation_collision.png\" /><br />  <em>그림 2 - 멀티스레드의 메모리 요청</em>   </p><p><br /></p><p><em>그림 2</em> 처럼 여러개의 Thread 가 동시에 메모리를 요청하려고 하는 경우 충돌이 발생할 수 있습니다. 당연히 이럴 경우에는 Lock 과 같은 동기화 작업이 수행됩니다.만약 10개의 스레드가 같은 메모리 공간을 요청하려고 한다면 최초 할당을 요청한 스레드가 락을 풀때까지 뒤에 9개의 스레드가 대기하게 되고 이는 Application 의 성능저하를 유발할 수 있습니다.</p><p align=\"center\">  <img width=\"500\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/multi_thread_memory_allocation_request.png\" /><br />  <em>그림 3 - TLAB</em>   </p><p><br /></p><p>이러한 문제를 해결하기 위해 JVM 은 <u>TLAB(Thread-Local Allocation Buffer)</u> 이라는 기술을 도입했습니다.</p><p><u>TLAB(Thread-Local Allocation Buffer)</u>는 <em>그림 3</em> 과 같이 각 스레드에게 Eden 영역의 일부를 독점적으로 할당하여, 해당 스레드가 객체를 생성할 때 동기화 없이 빠르게 메모리를 할당할 수 있도록 합니다.</p><p>(물론 TLAB 를 Thread 에게 최초로 할당하거나 TLAB 가 부족해서 새롭게 할당 받을 때는 동기화 이슈가 발생하는 것은 어쩔 수 없지만, 그래도 사용하지 않았을 때보다는 동기화 이슈가 많이 줄어 들어 메모리 할당에 걸리는 시간이 줄어드는 건 장점으로 작용합니다.)</p><h3 id=\"요약\">요약</h3><p>JVM 은 객체에 대한 메모리 할당 요청시 비어 있는 메모리를 찾는 시간을 줄이기 위해 최근 할당된 메모리 공간 바로 뒤의 메모리 공간을 요청하는 방식의 <u>**Bump pointer allocation**</u> 을 사용하고 있습니다.</p><p>Multi Thread 환경에서 같은 메모리 공간을 동시에 여러 스레드가 요청할 경우 동기화 이슈로 인한 병목현상이 발생하게 됩니다.이를 방지하기 위해 Heap 에 Thread 별로 공간을 나누어 대기 현상 없이 메모리 할당을 가능하게 하는 방법인 <u>**Thread Local Allocation Buffer(TLAB)**</u> 라는 기술을 추가하였습니다.</p><hr /><h3 id=\"reference\">Reference</h3><p>https://www.baeldung.com/java-jvm-tlab<br />https://inside.java/2020/06/25/compact-forwarding/<br />김한도, <strong>『</strong>JAVA PERFORMANCE FUNDAMENTAL<strong>』</strong>, 엑셈(2009), 108-109</p>",
            "url": "http://localhost:4000/2024/09/18/jvm-bump-pointer-allocation-and-thread-local-allocation-buffer",
            
            
            
            
            
            "date_published": "2024-09-18T00:00:00+09:00",
            "date_modified": "2024-09-18T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/09/16/%EC%9D%98%EB%AF%B8%EA%B0%80-%EC%99%84%EB%B2%BD%ED%95%98%EA%B2%8C-%EA%B0%99%EB%8B%A4%EB%A9%B4-%EC%9D%91%EB%8B%B5-%ED%95%84%EB%93%9C-%EC%9D%B4%EB%A6%84%EB%8F%84-%EA%B0%99%EA%B2%8C%ED%95%98%EC%9E%90",
            "title": "의미가 완벽하게 같다면 응답 필드 이름도 같게하자",
            "summary": null,
            "content_text": "의미가 같다면 응답 필드 이름도 같도록 하자! - 나를 위해서 모두를 위해서  같은 필드이고 그 의미가 다른 곳에서도 똑같이 적용되는 경우라면 왠만하면 통일되게 이름을 가져가는 것이 좋다고 생각이 든다.이냥저냥 토이프로젝트에서는 개별 고양이 컨텐츠를 상세 조회하거나 리스트 형태로 볼 수 있는 기능이 있다.그리고 나의 고양이 댓글 조회 항목에서도 개별 댓글 마다 고양이 이름이 들어가는 데 이떄 들어가는 고양이 이름은 컨텐츠에 들어가는 고양이 이름과 같도록 설계했다.문제는 처음에 컨텐츠 조회에서 등장하는 고양이와 댓글 조회에서 등장하는 고양이이름은 완전히 의미적으로 같음에도 불구하고 기능적으로 다르기 때문에 다른 필드 이름을 적는 실수를 저지르고 말았었다..그러나보니 나중에는 완전히 같은 뜻의 고양이 임에도 불구하고 다시 코드를 볼 때나 프론트 엔드 개발자가 다시 볼 때도 헷갈리는 문제가 생겨나고 말았다  프론트 개발자 : “같은 고양이 이름인데 왜 다른 이름을 사용했나요? 그 이유라도?… “즉 컨텐츠 조회에서 등장하나, 댓글 조회에서 등장하나 결국 같은 의미를 가지고 있기 때문에 같은 필드 네임을 적용하는 것이 맞다. 왜냐면 이렇게 되면 추가적으로 확인해야하는 번거러운 작업이 생략될 수 있다.아래를 보면첫번 째 고양이 컨텐츠 리스트 응답 데이터 중 하나이고 두번 째는 댓글 리스트 조회 응답 데이터 중 하나의 댓글을 가져왔다. 첫번 째는 필드이름(catName)만 봐도 고양이의 이름이라는 것을 유추할 수 있는 반면에 두번 째는 단순히 name 이라는 값이 댓글에 있는 고양이 이름인지, 아니면 다른 의미가 있는 것이 또 한번 추측해야하거나 문서를 확인해야하는 번거러움이 생기기 마련이다.따라서 이 경우 우측 name 필드 이름을 좌측과 같이 catName 으로 통일하는 것이 좋아보인다.{      \"catName\": \"바비\",      \"catAddress\": \"서울 마포구 망원동 415-31\",      \"catLat\": 37.582425,      \"catLon\": 126.985818,      \"catCommentCount\": 0,      \"catFollowerCount\": 0,      \"catCreatedAt\": \"2024-02-01T15:24:36\",      \"catUpdatedAt\": \"2024-02-01T15:24:36\",      \"catEmoji\": 1  }{    \"name\": \"바비\",    \"commentId\": 106,    \"commentDesc\": \"이 고양이 요즘 안보임... 너무 슬퍼.. 죽었나봐... \\n대신 다른 고양이가 오고있어\",    \"commentImageUris\": [],    \"createdAt\": \"2024-09-09T21:32:45\",    \"updatedAt\": \"2024-09-09T21:32:45\",    \"contentId\": 153,    \"commentLikeCount\": 0,    \"isCatCommentLiked\": false},깨달은 점사용되는 필드를 의미론적으로 똑같다면 같은 필드로 내려주는 것이 더 효율적일 것같다. 물론 이게 정답이라는 것은 아니다.만약 코드상으로 다른 필드를 적용해야 한다면 Jackson 라이브러리에 있는 @JsonProperty 를 사용해서 클라이언트 응답필드만 통일시키면 되기 때문에 큰 문제가 되지 않는다고 생각한다.",
            "content_html": "<h1 id=\"의미가-같다면-응답-필드-이름도-같도록-하자---나를-위해서-모두를-위해서\">의미가 같다면 응답 필드 이름도 같도록 하자! - 나를 위해서 모두를 위해서</h1><blockquote>  <p>같은 필드이고 그 의미가 다른 곳에서도 똑같이 적용되는 경우라면 왠만하면 통일되게 이름을 가져가는 것이 좋다고 생각이 든다.</p></blockquote><p>이냥저냥 토이프로젝트에서는 개별 고양이 컨텐츠를 상세 조회하거나 리스트 형태로 볼 수 있는 기능이 있다.</p><p>그리고 나의 고양이 댓글 조회 항목에서도 개별 댓글 마다 고양이 이름이 들어가는 데 이떄 들어가는 고양이 이름은 컨텐츠에 들어가는 고양이 이름과 같도록 설계했다.</p><p>문제는 처음에 컨텐츠 조회에서 등장하는 고양이와 댓글 조회에서 등장하는 고양이이름은 완전히 의미적으로 같음에도 불구하고 기능적으로 다르기 때문에 다른 필드 이름을 적는 실수를 저지르고 말았었다..</p><p>그러나보니 나중에는 완전히 같은 뜻의 고양이 임에도 불구하고 다시 코드를 볼 때나 프론트 엔드 개발자가 다시 볼 때도 헷갈리는 문제가 생겨나고 말았다</p><blockquote>  <p>프론트 개발자 : “같은 고양이 이름인데 왜 다른 이름을 사용했나요? 그 이유라도?… “</p></blockquote><p>즉 컨텐츠 조회에서 등장하나, 댓글 조회에서 등장하나 결국 같은 의미를 가지고 있기 때문에 같은 필드 네임을 적용하는 것이 맞다. 왜냐면 이렇게 되면 추가적으로 확인해야하는 번거러운 작업이 생략될 수 있다.</p><p>아래를 보면</p><p>첫번 째 고양이 컨텐츠 리스트 응답 데이터 중 하나이고 두번 째는 댓글 리스트 조회 응답 데이터 중 하나의 댓글을 가져왔다. 첫번 째는 필드이름(catName)만 봐도 고양이의 이름이라는 것을 유추할 수 있는 반면에 두번 째는 단순히 name 이라는 값이 댓글에 있는 고양이 이름인지, 아니면 다른 의미가 있는 것이 또 한번 추측해야하거나 문서를 확인해야하는 번거러움이 생기기 마련이다.따라서 이 경우 우측 <code>name</code> 필드 이름을 좌측과 같이 <code>catName</code> 으로 통일하는 것이 좋아보인다.</p><pre><code class=\"language-json\">{      \"catName\": \"바비\",      \"catAddress\": \"서울 마포구 망원동 415-31\",      \"catLat\": 37.582425,      \"catLon\": 126.985818,      \"catCommentCount\": 0,      \"catFollowerCount\": 0,      \"catCreatedAt\": \"2024-02-01T15:24:36\",      \"catUpdatedAt\": \"2024-02-01T15:24:36\",      \"catEmoji\": 1  }</code></pre><pre><code class=\"language-json\">{    \"name\": \"바비\",    \"commentId\": 106,    \"commentDesc\": \"이 고양이 요즘 안보임... 너무 슬퍼.. 죽었나봐... \\n대신 다른 고양이가 오고있어\",    \"commentImageUris\": [],    \"createdAt\": \"2024-09-09T21:32:45\",    \"updatedAt\": \"2024-09-09T21:32:45\",    \"contentId\": 153,    \"commentLikeCount\": 0,    \"isCatCommentLiked\": false},</code></pre><h2 id=\"깨달은-점\">깨달은 점</h2><p>사용되는 필드를 의미론적으로 똑같다면 같은 필드로 내려주는 것이 더 효율적일 것같다. 물론 이게 정답이라는 것은 아니다.만약 코드상으로 다른 필드를 적용해야 한다면 Jackson 라이브러리에 있는 <code>@JsonProperty</code> 를 사용해서 클라이언트 응답필드만 통일시키면 되기 때문에 큰 문제가 되지 않는다고 생각한다.</p>",
            "url": "http://localhost:4000/2024/09/16/%EC%9D%98%EB%AF%B8%EA%B0%80-%EC%99%84%EB%B2%BD%ED%95%98%EA%B2%8C-%EA%B0%99%EB%8B%A4%EB%A9%B4-%EC%9D%91%EB%8B%B5-%ED%95%84%EB%93%9C-%EC%9D%B4%EB%A6%84%EB%8F%84-%EA%B0%99%EA%B2%8C%ED%95%98%EC%9E%90",
            
            
            
            
            
            "date_published": "2024-09-16T00:00:00+09:00",
            "date_modified": "2024-09-16T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/09/11/%EC%9E%98%EB%AA%BB-%EC%95%8C%EA%B3%A0-%EC%9E%88%EC%97%88%EB%8D%98-%EC%A7%81%EB%A0%AC%ED%99%94%EC%99%80-%EC%97%AD%EC%A7%81%EB%A0%AC%ED%99%94",
            "title": "잘못 알고 있었던 직렬화와 역직렬화",
            "summary": null,
            "content_text": "---layout: postcategory: example---2023.12.16 - 잘못 알고 있었던 직렬화와 역직렬화JPA 를 사용하여 데이터베이스에 있는 데이터를 가져와 객체로 변환하는 과정에서 에러가 발생했다..  org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.time.Instant` from String ”2012-02-01”: Failed to deserialize java.time.Instant: (java.time.format.DateTimeParseException) Text ’2012-02-01’ could not be parsed at index 10직렬화와 역직렬화는 바이트코드에서 객체로의 정보교환만을 의미하는 것으로 알고 있었는 데 String 에서 Object 로의 변환 역시 역직렬화라고 표현하는 것을 보았다.알고보니 직렬화, 역직렬화는 그런 의미가 아니였다는 것을 깨달았고 관련된 내용을 정리해보았다.컴퓨터는 0 과 1 만 안다.사실 데이터에는 객체가 없다. 우리가 통신에서 주고 받는 데이터는 사실 바이트 코드로 대부분 0과 1로 이루어져 있다.객체는 사람들이 이해하기 쉽게 하기 위해 만든 추상적인 개념에 불과하다. 메모리에는 객체가 없다. 0과 1로 이루어진 데이터만 있을 뿐이다. 코드를 작성하는 에디터에 코드를 작성하고 저장버튼을 누르자. 그리고 다음날 저장된 파일을 에디터를 통해 열면 저장된 모습 그대로의 코드가 있을 것이다. 이건 어찌보면 당연한 거다. 저장을 했으니 말이다. 우리는 에디터를 통해 연 파일을 편집하고 있다고 생각하지만 이는 “직렬화” 라는 과정을 통해 실제 파일에 코드(실제로는 바이트코드)를 작성한 것이다. 해당 파일을 에디터로 여는 행위는 “역직렬화”라는 과정을 통해 파일에 있는 바이트 코드를 역직렬화를 통해 에디터가 읽어드릴 수 있는 형태로 바꾸게 된 것이다.직렬화와 역직렬화즉, 직렬화란 객체를 파일이나 통신할 수 있는 쉬운 형태로 변환하는 과정을 말한다. 통신할 수 있는 쉬운형태는 바이트코드가 될 수도 있고 JSON 이나 XML 같이 규격화된 또 다른 통신 형태로 정해놓은 형태일 수도 있다. 역직렬화는 직렬화의 반대로, 직렬화된 정보를 다시 원래대로 객체의 형태로 되돌리는 것을 의미한다.즉, 바이트코드에서 오브젝트로, 오브젝트에서 바이트코드로 정보의 형태를 바꾸는 것만이 직렬화, 역직렬화를 뜻하는 것이 아니였다.객체를 JSON, XML, 파일 이 모든 것이 해당된다.### 파일을 주고 받는 것 또한 직렬화와 역직렬화가 사용된다.A 라는 컴퓨터와 B 라는 컴퓨터가 서로 파일을 주고 받는 다고 가정해보자.A 와 B는 각자 컴퓨터 스팩도 다르고 사용하는 프로그래밍 언어도 다르지만, 0과 1이라는 바이트 코드를 전기적 신호로 바꾸어 회선을 통해 전달받을 수 있다.그렇기 때문에 전달하고자 하는 파일을 먼저 0과 1이라고 하는 바이트코드로 “직렬화” 한다. 0과 1의 바이트코드로 변환된 데이터는 회선을 통해 전기적인 신호로 바뀌어 전달되게 된다. 파일 데이터를 전기적신호를 0과1의 바이트코드로 전달받은 다른 컴퓨터는 이를 “역직렬화”를 통해 바이트데이터를 실제로 존재하는 오브젝트(파일)로 바꾸어 전달받는다.  ### JSON 데이터 주고 받기또 다른 예로 브라우저에서 서버와 통신을 주고 받을 때 주로 JSON 형태의 데이터를 주고 받는다. 오브젝트 파일에서 JSON 파일로 직렬화 하여 전송하고 다운로드 받은 JSON 파일에서 역직렬화 한다.  ### 이제는 이해되는 에러메시지   Cannot deserialize value of type `java.time.Instant` from String ”2012-02-01”: Failed to deserialize java.time.Instant: (java.time.format.DateTimeParseException) Text ’2012-02-01’ could not be parsed at index 10이 오류 메시지는 java.time.Instant 객체로의 역직렬화 중에 발생한 문제를 설명하고 있다. java.time.Instant는 날짜와 시간을 표현하는 자바의 클래스 중 하나인데, 주어진 문자열 “2012-02-01”을 Instant 객체로 변환할 수 없다는 것을 나타낸다. 즉, “역직렬화” 할 수 없다는 것이다. java.time.Instant는 ISO 8601 형식에 맞춰진 문자열을 사용하여 날짜와 시간을 나타내고 있다. 그렇기 때문에 역직렬화의 대상이 되는 문자열은 반드시 “YYYY-MM-DDTHH:MM:SSZ”와 같은 형식이어야 한다. 그러나 “2012-02-01”은 시간 정보가 없는 날짜 정보만을 가지고 있기 때문에 Instant로 역직렬화할 때 오류가 발생했던 것이다. (사실 이러한 문제는 JSON 을 Object 로 변환 할 때도 빈번하게 일어나는 문제이다. 보통 이런 경우 JSON 을 Object 로 직렬,역질렬화를 도와주는 라이브러리를 사용하게 되는 데 위의 문제와 마찬가지로 JSON 에 포맷에 맞지 않는 경우 오브젝트 변환 시 “역직렬화”에 실패했다는 메시지를 자주 볼 수 있을 것이다.)자바 객체 &lt;-&gt; 파일Person 이라는 객체를 생성한 후 객체를 직렬화 하여 파일에 저장합니다. 이후 파일에 저장된 객체를 역직렬화 하여 읽어옵니다.import java.io.*;// Serializable 인터페이스를 구현하여 직렬화 가능하도록 만듭니다.class Person implements Serializable {    private static final long serialVersionUID = 1L;    private String name;    private int age;    public Person(String name, int age) {        this.name = name;        this.age = age;    }    public String getName() {        return name;    }    public int getAge() {        return age;    }}public class SerializationExample {    public static void main(String[] args) {        // Person 객체 생성        Person person = new Person(\"Alice\", 30);        // 객체를 직렬화하여 파일에 저장        try (FileOutputStream fileOut = new FileOutputStream(\"serialized_person.ser\");             ObjectOutputStream out = new ObjectOutputStream(fileOut)) {                        out.writeObject(person);            System.out.println(\"Person 객체를 직렬화하여 저장했습니다.\");        } catch (IOException e) {            e.printStackTrace();        }        // 파일에서 객체를 역직렬화하여 읽어옴        Person loadedPerson = null;        try (FileInputStream fileIn = new FileInputStream(\"serialized_person.ser\");             ObjectInputStream in = new ObjectInputStream(fileIn)) {                        loadedPerson = (Person) in.readObject();            System.out.println(\"Person 객체를 역직렬화했습니다.\");        } catch (IOException | ClassNotFoundException e) {            e.printStackTrace();        }        // 역직렬화된 Person 객체 정보 출력        if (loadedPerson != null) {            System.out.println(\"이름: \" + loadedPerson.getName());            System.out.println(\"나이: \" + loadedPerson.getAge());        }    }요약오브젝트를 직렬화하고 역직렬화하는 데 사용되는 포맷을 굉장히 많다. 하지만 핵심은 추상적인 오브젝트를 구체적이고 저장가능한 형태로 정보를 바꾸어 주는 역할을 한다는 것이다.참고https://www.youtube.com/watch?v=qrQZOPZmt0whttps://www.boardinfinity.com/blog/serialization-in-java/",
            "content_html": "<p><code>---layout: postcategory: example---</code></p><h1 id=\"20231216---잘못-알고-있었던-직렬화와-역직렬화\">2023.12.16 - 잘못 알고 있었던 직렬화와 역직렬화</h1><p>JPA 를 사용하여 데이터베이스에 있는 데이터를 가져와 객체로 변환하는 과정에서 에러가 발생했다..</p><blockquote>  <p>org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.time.Instant` from String ”2012-02-01”: Failed to deserialize java.time.Instant: (java.time.format.DateTimeParseException) Text ’2012-02-01’ could not be parsed at index 10</p></blockquote><p>직렬화와 역직렬화는 바이트코드에서 객체로의 정보교환만을 의미하는 것으로 알고 있었는 데 String 에서 Object 로의 변환 역시 역직렬화라고 표현하는 것을 보았다.<br />알고보니 직렬화, 역직렬화는 그런 의미가 아니였다는 것을 깨달았고 관련된 내용을 정리해보았다.</p><h3 id=\"컴퓨터는-0-과-1-만-안다\">컴퓨터는 0 과 1 만 안다.</h3><p>사실 데이터에는 객체가 없다. 우리가 통신에서 주고 받는 데이터는 사실 바이트 코드로 대부분 0과 1로 이루어져 있다.</p><p>객체는 사람들이 이해하기 쉽게 하기 위해 만든 추상적인 개념에 불과하다. 메모리에는 객체가 없다. 0과 1로 이루어진 데이터만 있을 뿐이다. </p><p>코드를 작성하는 에디터에 코드를 작성하고 저장버튼을 누르자. 그리고 다음날 저장된 파일을 에디터를 통해 열면 저장된 모습 그대로의 코드가 있을 것이다. 이건 어찌보면 당연한 거다. 저장을 했으니 말이다. </p><p>우리는 에디터를 통해 연 파일을 편집하고 있다고 생각하지만 이는 “직렬화” 라는 과정을 통해 실제 파일에 코드(실제로는 바이트코드)를 작성한 것이다. 해당 파일을 에디터로 여는 행위는 “역직렬화”라는 과정을 통해 파일에 있는 바이트 코드를 역직렬화를 통해 에디터가 읽어드릴 수 있는 형태로 바꾸게 된 것이다.</p><h3 id=\"직렬화와-역직렬화\">직렬화와 역직렬화</h3><p>즉, <strong>직렬화</strong>란 객체를 파일이나 통신할 수 있는 쉬운 형태로 변환하는 과정을 말한다. 통신할 수 있는 쉬운형태는 바이트코드가 될 수도 있고 JSON 이나 XML 같이 규격화된 또 다른 통신 형태로 정해놓은 형태일 수도 있다. </p><p><strong>역직렬화</strong>는 직렬화의 반대로, 직렬화된 정보를 다시 원래대로 객체의 형태로 되돌리는 것을 의미한다.</p><p><strong>즉, 바이트코드에서 오브젝트로, 오브젝트에서 바이트코드로 정보의 형태를 바꾸는 것만이 직렬화, 역직렬화를 뜻하는 것이 아니였다.</strong></p><p><strong>객체를 JSON, XML, 파일 이 모든 것이 해당된다.</strong></p><p>### <br />파일을 주고 받는 것 또한 직렬화와 역직렬화가 사용된다.</p><p>A 라는 컴퓨터와 B 라는 컴퓨터가 서로 파일을 주고 받는 다고 가정해보자.</p><p>A 와 B는 각자 컴퓨터 스팩도 다르고 사용하는 프로그래밍 언어도 다르지만, 0과 1이라는 바이트 코드를 전기적 신호로 바꾸어 회선을 통해 전달받을 수 있다.</p><p>그렇기 때문에 전달하고자 하는 파일을 먼저 0과 1이라고 하는 바이트코드로 “직렬화” 한다. 0과 1의 바이트코드로 변환된 데이터는 회선을 통해 전기적인 신호로 바뀌어 전달되게 된다. </p><p>파일 데이터를 전기적신호를 0과1의 바이트코드로 전달받은 다른 컴퓨터는 이를 “역직렬화”를 통해 바이트데이터를 실제로 존재하는 오브젝트(파일)로 바꾸어 전달받는다.</p><p align=\"center\">  <img width=\"600\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/docs/images/se_de_1.png\" /></p><p>### <br />JSON 데이터 주고 받기</p><p>또 다른 예로 브라우저에서 서버와 통신을 주고 받을 때 주로 JSON 형태의 데이터를 주고 받는다. </p><p>오브젝트 파일에서 JSON 파일로 직렬화 하여 전송하고 다운로드 받은 JSON 파일에서 역직렬화 한다.</p><p align=\"center\">  <img width=\"600\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/docs/images/se_de.png\" /></p><p>### <br />이제는 이해되는 에러메시지</p><blockquote>  <p> Cannot deserialize value of type `java.time.Instant` from String ”2012-02-01”: Failed to deserialize java.time.Instant: (java.time.format.DateTimeParseException) Text ’2012-02-01’ could not be parsed at index 10</p></blockquote><p>이 오류 메시지는 java.time.Instant 객체로의 역직렬화 중에 발생한 문제를 설명하고 있다. java.time.Instant는 날짜와 시간을 표현하는 자바의 클래스 중 하나인데, 주어진 <strong>문자열 “2012-02-01”</strong>을 <strong>Instant 객체로 변환할 수 없다는 것</strong>을 나타낸다. 즉, “역직렬화” 할 수 없다는 것이다. </p><p><strong>java.time.Instant는 ISO 8601 형식에 맞춰진 문자열</strong>을 사용하여 날짜와 시간을 나타내고 있다. 그렇기 때문에 역직렬화의 대상이 되는 문자열은 반드시 “YYYY-MM-DDTHH:MM:SSZ”와 같은 형식이어야 한다. 그러나 “2012-02-01”은 시간 정보가 없는 날짜 정보만을 가지고 있기 때문에 <strong>Instant로 역직렬화</strong>할 때 오류가 발생했던 것이다. </p><p>(사실 이러한 문제는 JSON 을 Object 로 변환 할 때도 빈번하게 일어나는 문제이다. 보통 이런 경우 JSON 을 Object 로 직렬,역질렬화를 도와주는 라이브러리를 사용하게 되는 데 위의 문제와 마찬가지로 JSON 에 포맷에 맞지 않는 경우 오브젝트 변환 시 “역직렬화”에 실패했다는 메시지를 자주 볼 수 있을 것이다.)</p><h3 id=\"자바-객체---파일\">자바 객체 &lt;-&gt; 파일</h3><p>Person 이라는 객체를 생성한 후 객체를 직렬화 하여 파일에 저장합니다. 이후 파일에 저장된 객체를 역직렬화 하여 읽어옵니다.</p><pre><code>import java.io.*;// Serializable 인터페이스를 구현하여 직렬화 가능하도록 만듭니다.class Person implements Serializable {    private static final long serialVersionUID = 1L;    private String name;    private int age;    public Person(String name, int age) {        this.name = name;        this.age = age;    }    public String getName() {        return name;    }    public int getAge() {        return age;    }}public class SerializationExample {    public static void main(String[] args) {        // Person 객체 생성        Person person = new Person(\"Alice\", 30);        // 객체를 직렬화하여 파일에 저장        try (FileOutputStream fileOut = new FileOutputStream(\"serialized_person.ser\");             ObjectOutputStream out = new ObjectOutputStream(fileOut)) {                        out.writeObject(person);            System.out.println(\"Person 객체를 직렬화하여 저장했습니다.\");        } catch (IOException e) {            e.printStackTrace();        }        // 파일에서 객체를 역직렬화하여 읽어옴        Person loadedPerson = null;        try (FileInputStream fileIn = new FileInputStream(\"serialized_person.ser\");             ObjectInputStream in = new ObjectInputStream(fileIn)) {                        loadedPerson = (Person) in.readObject();            System.out.println(\"Person 객체를 역직렬화했습니다.\");        } catch (IOException | ClassNotFoundException e) {            e.printStackTrace();        }        // 역직렬화된 Person 객체 정보 출력        if (loadedPerson != null) {            System.out.println(\"이름: \" + loadedPerson.getName());            System.out.println(\"나이: \" + loadedPerson.getAge());        }    }</code></pre><h3 id=\"요약\">요약</h3><p>오브젝트를 직렬화하고 역직렬화하는 데 사용되는 포맷을 굉장히 많다. 하지만 핵심은 <strong>추상적인 오브젝트를 구체적이고 저장가능한 형태로 정보를 바꾸어 주는 역할</strong>을 한다는 것이다.</p><h2 id=\"참고\">참고</h2><p><a href=\"https://www.youtube.com/watch?v=qrQZOPZmt0w\">https://www.youtube.com/watch?v=qrQZOPZmt0w</a></p><p><a href=\"https://www.boardinfinity.com/blog/serialization-in-java/\">https://www.boardinfinity.com/blog/serialization-in-java/</a></p>",
            "url": "http://localhost:4000/2024/09/11/%EC%9E%98%EB%AA%BB-%EC%95%8C%EA%B3%A0-%EC%9E%88%EC%97%88%EB%8D%98-%EC%A7%81%EB%A0%AC%ED%99%94%EC%99%80-%EC%97%AD%EC%A7%81%EB%A0%AC%ED%99%94",
            
            
            
            
            
            "date_published": "2024-09-11T00:00:00+09:00",
            "date_modified": "2024-09-11T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/09/11/%EB%B9%85%ED%85%8C%ED%81%AC-%EC%88%98%EC%84%9D-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EC%95%8C%EB%A0%A4%EC%A3%BC%EB%8A%94-%EC%9D%BC-%EC%BD%94%EB%94%A9-%EC%9E%98%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95",
            "title": "빅테크 수석 개발자가 알려주는 일(코딩) 잘하는 방법",
            "summary": null,
            "content_text": "2024.09.11 - 빅테크 수석 개발자가 알려주는 일(코딩) 잘하는 방법  우연히 유튜브를 보는 와중에 흥미로운 썸네일을 보고 도저히 지나칠 수 없어 시청했는 데 너무나 인상 깊고 공감되는 이야기가 많아 잊고 싶지 않아서 성장일기에 적어보았다.  이 일 얼마나 걸릴 것 같아요?결론은 이렇게 질문이 오면 바로 대답할 필요가 없다. 상황마다 다르겠지만 제가 조금 더 조사해보고 오늘 밤 혹은 퇴근 전에 알려주겠다 라고 하는 게 좋다.PM 이나 상급자가 이렇게 질문을 했을 때, 나의 반응은 두 가지 중 하나였다.  대답을 망설이거나 이러면 보통 상대방에서 “하루안에 가능하죠? 내일까지 되죠?” 라고 질문이 들어오면 “내일까지는 되죠” 라고 대답해버리고 만다.  깊게 고민하지 않고 어림 짐작으로 대답했었다.(나중에 보면 굉장히 타이트한 일정이였다.)사실 지금 생각해보면 썩 좋은 대답은 아니라고 생각이 든다. 왜냐하면      1번의 경우 일을 끝내지 못했을 때 대한 나에 대한 기대치와 신뢰가 떨어질 수 있다. 매니징하는 입장에서도 하루면 간단한 일이라고 생각했을 텐데 끝나지 않은 모습을 보면 기대치가 낮아질 수 밖에 없다. 어떻게 보면 상대방에 대한 나의 기대를 올리기 위해 시작한 말이 나중에는 오히려 상대방의 기대치를 낮추게 하는 결과를 가져오게 된다.        2번의 경우 프로패셔녈하지 못하다. 상대방은 내가 대답하는 것에 따라서 추가적 인 일정을 생각할 수 있는 데 내가 잘 못 대답해서 상대방의 일정도 망가지게 된다. 이건 상대방을 배려하는 모습이 아니다.커리어를 처음 시작하는 입장에서는 의욕이 앞서기 때문에 스스로 어떻게든 해결할 수도 있는 데 이 경우에는 별로 좋은 해결방법이 아니다.    이한결 엔지니어“만약 잘 모르겠으면 그 자리에서 바로 답하지 말고 퇴근하기 전까지 파악해서 알려주겠다 라고 말한 뒤 예상되는 시간에 3배정도 걸릴 것 같다 라고 말하면 좋다”  “기대치를 낮추고 파이룰(3.14)를 활용해라(예상되는 업무 시간에 * 3 을 하는 것”곱하기 3이라니 너무 많은 거 아니야?만약 상급 엔지니어가 3일이 아니라 하루 정도 걸릴 것 같은데? 라고 한다면? 보통 나의 경우도 하루만에 할 수 있을 것 같다고 대답했던 것 같다.왠지 시니어가 그렇게 말한다면 그런  이유가 있지 않을까? 라고 생각하면서 수긍하면서 시간을 줄여가면서 일을 했던 것 같다. 지금 생각해보면 왜 그렇게 시간이 걸릴 수 밖에 없는 지 상급자에게 물어보지 않은 나를 반성하게 되었다.머리속으로는 이해하지만 실제로 저렇게 행동할 수 있을지는 확신하지는 않지만 .. 😂참조https://www.youtube.com/watch?v=J3Fd5HjWsvE",
            "content_html": "<h1 id=\"20240911---빅테크-수석-개발자가-알려주는-일코딩-잘하는-방법\">2024.09.11 - 빅테크 수석 개발자가 알려주는 일(코딩) 잘하는 방법</h1><blockquote>  <p>우연히 유튜브를 보는 와중에 흥미로운 썸네일을 보고 도저히 지나칠 수 없어 시청했는 데 너무나 인상 깊고 공감되는 이야기가 많아 잊고 싶지 않아서 성장일기에 적어보았다.</p></blockquote><p align=\"center\">  <img width=\"600\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"https://github.com/user-attachments/assets/5843db49-8bbe-4776-b5a2-119b2654ff15\" /></p><h2 id=\"이-일-얼마나-걸릴-것-같아요\">이 일 얼마나 걸릴 것 같아요?</h2><p>결론은 이렇게 질문이 오면 바로 대답할 필요가 없다. 상황마다 다르겠지만 제가 조금 더 조사해보고 오늘 밤 혹은 퇴근 전에 알려주겠다 라고 하는 게 좋다.PM 이나 상급자가 이렇게 질문을 했을 때, 나의 반응은 두 가지 중 하나였다.</p><ol>  <li>대답을 망설이거나 이러면 보통 상대방에서 “하루안에 가능하죠? 내일까지 되죠?” 라고 질문이 들어오면 “내일까지는 되죠” 라고 대답해버리고 만다.</li>  <li>깊게 고민하지 않고 어림 짐작으로 대답했었다.(나중에 보면 굉장히 타이트한 일정이였다.)</li></ol><p>사실 지금 생각해보면 썩 좋은 대답은 아니라고 생각이 든다. 왜냐하면</p><ul>  <li>    <p>1번의 경우 일을 끝내지 못했을 때 대한 <strong>나에 대한 기대치와 신뢰가 떨어질 수 있다</strong>. 매니징하는 입장에서도 하루면 간단한 일이라고 생각했을 텐데 끝나지 않은 모습을 보면 기대치가 낮아질 수 밖에 없다. 어떻게 보면 상대방에 대한 나의 기대를 올리기 위해 시작한 말이 나중에는 오히려 상대방의 기대치를 낮추게 하는 결과를 가져오게 된다.</p>  </li>  <li>    <p>2번의 경우 프로패셔녈하지 못하다. 상대방은 내가 대답하는 것에 따라서 추가적 인 일정을 생각할 수 있는 데 내가 잘 못 대답해서 상대방의 일정도 망가지게 된다. 이건 <strong>상대방을 배려하는 모습이 아니다</strong>.커리어를 처음 시작하는 입장에서는 의욕이 앞서기 때문에 스스로 어떻게든 해결할 수도 있는 데 이 경우에는 별로 좋은 해결방법이 아니다.</p>  </li></ul><blockquote>  <p>이한결 엔지니어<br />“만약 잘 모르겠으면 그 자리에서 바로 답하지 말고 퇴근하기 전까지 파악해서 알려주겠다 라고 말한 뒤 예상되는 시간에 3배정도 걸릴 것 같다 라고 말하면 좋다”</p></blockquote><blockquote>  <p>“기대치를 낮추고 파이룰(3.14)를 활용해라(예상되는 업무 시간에 * 3 을 하는 것”</p></blockquote><p>곱하기 3이라니 너무 많은 거 아니야?만약 상급 엔지니어가 3일이 아니라 하루 정도 걸릴 것 같은데? 라고 한다면? 보통 나의 경우도 하루만에 할 수 있을 것 같다고 대답했던 것 같다.왠지 시니어가 그렇게 말한다면 그런  이유가 있지 않을까? 라고 생각하면서 수긍하면서 시간을 줄여가면서 일을 했던 것 같다. 지금 생각해보면 왜 그렇게 시간이 걸릴 수 밖에 없는 지 상급자에게 물어보지 않은 나를 반성하게 되었다.</p><p>머리속으로는 이해하지만 실제로 저렇게 행동할 수 있을지는 확신하지는 않지만 .. 😂</p><h3 id=\"참조\">참조</h3><hr /><p>https://www.youtube.com/watch?v=J3Fd5HjWsvE</p>",
            "url": "http://localhost:4000/2024/09/11/%EB%B9%85%ED%85%8C%ED%81%AC-%EC%88%98%EC%84%9D-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EC%95%8C%EB%A0%A4%EC%A3%BC%EB%8A%94-%EC%9D%BC-%EC%BD%94%EB%94%A9-%EC%9E%98%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95",
            
            
            
            
            
            "date_published": "2024-09-11T00:00:00+09:00",
            "date_modified": "2024-09-11T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/09/11/2024-dlca-tech-tree-con-%EC%BB%A8%ED%8D%BC%EB%9F%B0%EC%8A%A4-%ED%9B%84%EA%B8%B0",
            "title": "2024 dlca tech Tree con 컨퍼런스 후기",
            "summary": null,
            "content_text": "2024 DLCA Tech-Tree CON 컨퍼런스 후기 - 첫 컨퍼런스 방문 😄    세션 목록들이다. 가수분도 나온다고 하셔서 놀랐다   내가 가고 싶은 테크 컨퍼런스를 찾던 와중 마음에 드는 세션이 보여 바로 신청했다.특히 미래의 개발자의 커리어를 어떻게 쌓으면 좋을까를 고민했었는 데 마침 나에게 딱 맞는 주제가 보여서 고민 없이 신청했다.물론 라이브 다시보기로도 볼 수 있지만 직접 가서 현장의 분위기를 느껴보고 싶었다. 현장에서는 바로 앞자리에 앉을 수 있어서 너무 좋았다 😃특히 테오님과 이동욱(향로)님 같은 경우에는 너무 유명하셔서 꼭 직접 보고 싶은 마음도 있었다. 하지만 면접 때문에 테오님 세션을 처음부터 듣지 못한 게 너무 아쉬웠다.배운 것  &lt;img width=70% alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/IMG_5306.JPG\"&gt;~~용태님 세션은 중간부터 참여해서 전부 듣지는 못했지만~~ 인상깊었던 말들을 가져와봤다. &gt; _**개발만 하고 싶은 게 다른 걸 자꾸 시켜요? 여러분 그런 것도 다 개발이예요. 코드만 작성하고 그런 것만 개발인 게 아니예요. 회의하고 고민하고 등등 모두 다 개발하고 있는 거예요**_  - _유용태(테오)_&gt; &gt; _**제어할 수 없는 것에 힘쓰는 것이 아니라 내가 제어할 수 것에 힘을 쓰자.**_  - _이동욱(향로)_&gt; &gt; _**맹귀우목(盲龜遇木) 에 나오는 거북이 처럼 파도가 쳐서 떠내려 간다고 해도 열심히 노력하다 보면 결국에는 섬에 도착하게 되있어요.**_ - _이장원(페퍼톤스)_비록 상황이 좋지 않더라도, 그 상황 속에서 내가 제어할 수 있는 것과 없는 것을 찾아서, 제어할 수 있다면 그 부분에서 최선을 다해 성과를 내는 것이 맞다.만약 내가 어떤 회사를 갔는데 사수가 없다면, 개발 환경이 좋지 못하다면, 온보딩도 제대로 되어있지 않다면, 그렇다면 먼저 제어할 수 있는 것과 제어할 수 없는 것을 나누어서이렇게 성장 할 수 있는 환경이 되지 못한다면 내가 스스로 나서서 스터디를 모집하거나 좋은 문화를 전파시켜 볼 수 있을 것이다.  (실제 동욱님도 개발자들이 전부 퇴사하고 스스로 좋은 개발문화를 만들려고 노력했고 동료들에게 먼저 전파하려고 하셨다.)    &lt;img src=\"/assets/images/IMG_5309.jpg\" width=30%  align=\"center\"&gt;    &lt;img src=\"/assets/images/IMG_5322.jpg\" width=30%  align=\"center\"&gt;",
            "content_html": "<h2 id=\"2024-dlca-tech-tree-con-컨퍼런스-후기---첫-컨퍼런스-방문-\">2024 DLCA Tech-Tree CON 컨퍼런스 후기 - 첫 컨퍼런스 방문 😄</h2><p align=\"center\">  <img width=\"500\" alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/tech_conference_index.png\" /><br />  <em>세션 목록들이다. 가수분도 나온다고 하셔서 놀랐다</em>   </p><p>내가 가고 싶은 테크 컨퍼런스를 찾던 와중 마음에 드는 세션이 보여 바로 신청했다.특히 미래의 개발자의 커리어를 어떻게 쌓으면 좋을까를 고민했었는 데 마침 나에게 딱 맞는 주제가 보여서 고민 없이 신청했다.</p><p><del>물론 라이브 다시보기로도 볼 수 있지만 직접 가서 현장의 분위기를 느껴보고 싶었다. 현장에서는 바로 앞자리에 앉을 수 있어서 너무 좋았다 😃</del></p><p>특히 테오님과 이동욱(향로)님 같은 경우에는 너무 유명하셔서 꼭 직접 보고 싶은 마음도 있었다. 하지만 면접 때문에 테오님 세션을 처음부터 듣지 못한 게 너무 아쉬웠다.</p><h3 id=\"배운-것\">배운 것</h3><p align=\"center\">  &lt;img width=70% alt=\"스크린샷 2024-09-11 오후 8 05 07\" src=\"/assets/images/IMG_5306.JPG\"&gt;<br />~~용태님 세션은 중간부터 참여해서 전부 듣지는 못했지만~~ 인상깊었던 말들을 가져와봤다. &gt; _**개발만 하고 싶은 게 다른 걸 자꾸 시켜요? 여러분 그런 것도 다 개발이예요. 코드만 작성하고 그런 것만 개발인 게 아니예요. 회의하고 고민하고 등등 모두 다 개발하고 있는 거예요**_ <br /> - _유용태(테오)_&gt; <br /><br />&gt; _**제어할 수 없는 것에 힘쓰는 것이 아니라 내가 제어할 수 것에 힘을 쓰자.**_ <br /> - _이동욱(향로)_&gt; <br /><br />&gt; _**맹귀우목(盲龜遇木) 에 나오는 거북이 처럼 파도가 쳐서 떠내려 간다고 해도 열심히 노력하다 보면 결국에는 섬에 도착하게 되있어요.**_ <br />- _이장원(페퍼톤스)_비록 상황이 좋지 않더라도, 그 상황 속에서 내가 제어할 수 있는 것과 없는 것을 찾아서, 제어할 수 있다면 그 부분에서 최선을 다해 성과를 내는 것이 맞다.만약 내가 어떤 회사를 갔는데 사수가 없다면, 개발 환경이 좋지 못하다면, 온보딩도 제대로 되어있지 않다면, 그렇다면 먼저 제어할 수 있는 것과 제어할 수 없는 것을 나누어서이렇게 성장 할 수 있는 환경이 되지 못한다면 내가 스스로 나서서 스터디를 모집하거나 좋은 문화를 전파시켜 볼 수 있을 것이다.  (실제 동욱님도 개발자들이 전부 퇴사하고 스스로 좋은 개발문화를 만들려고 노력했고 동료들에게 먼저 전파하려고 하셨다.)<div align=\"center\">    &lt;img src=\"/assets/images/IMG_5309.jpg\" width=30%  align=\"center\"&gt;    &lt;img src=\"/assets/images/IMG_5322.jpg\" width=30%  align=\"center\"&gt;</div></p>",
            "url": "http://localhost:4000/2024/09/11/2024-dlca-tech-tree-con-%EC%BB%A8%ED%8D%BC%EB%9F%B0%EC%8A%A4-%ED%9B%84%EA%B8%B0",
            
            
            
            
            
            "date_published": "2024-09-11T00:00:00+09:00",
            "date_modified": "2024-09-11T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/06/01/test",
            "title": "목차 테스트",
            "summary": null,
            "content_text": "대제목1내용소제목1-1내용대제목2내용소제목2-1내용",
            "content_html": "<h2 id=\"대제목1\">대제목1</h2><p>내용</p><h3 id=\"소제목1-1\">소제목1-1</h3><p>내용</p><h2 id=\"대제목2\">대제목2</h2><p>내용</p><h3 id=\"소제목2-1\">소제목2-1</h3><p>내용</p>",
            "url": "http://localhost:4000/2024/06/01/test",
            
            
            
            
            
            "date_published": "2024-06-01T00:00:00+09:00",
            "date_modified": "2024-06-01T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/05/11/spring-restcontrolleradvice-%EC%97%90%EC%84%9C-body-%EB%A1%9C%EA%B9%85%EC%9C%BC%EB%A1%9C-%EB%82%A8%EA%B8%B0%EA%B8%B0",
            "title": "[spring] @restcontrolleradvice 에서 body 로깅으로 남기기",
            "summary": null,
            "content_text": "2024.05.11 -  🌱 @RestControllerAdvice 에서 body 로깅으로 남기기.md사건의 발단현재 진행하고 있는 프로젝트에서는 @RestControllerAdvice 를 이용하여 예외를 전역으로 처리하고 있다.예외가 났을 때 어떤 요청값이 들어와서 예외가 발생했는 지 로그로 남기고 싶어서 request 의 body 를 읽고 싶었으나 아무런 값이 없는 문제가 발생했다.@Slf4j@RestControllerAdvicepublic class GlobalExceptionHandler {  @ExceptionHandler(HotelkingException.class)  public ResponseEntity&lt;ApiResponse&lt;ErrorContent&gt;&gt; handleHotelkingException(      HotelkingException e,      HttpServletRequest request  ){    ErrorCode ec = e.getErrorCode();String body = StreamUtils.copyToString(request.getInputStream(), StandardCharsets.UTF_8);log.error(\"body = {}\", body); // 슬프게도 아무것도 안나온다.    return ResponseEntity.status(ec.getHttpStatus()).body(ApiResponse.error(ErrorContent.from(ec)));  }  @ExceptionHandler(HttpMessageNotReadableException.class)  public ResponseEntity&lt;ApiResponse&lt;ErrorContent&gt;&gt; handleHttpMessageNotReadableException(HttpMessageNotReadableException e, HttpServletRequest request) {    ErrorCode ec = ErrorCode.NOT_READABLE;    printLog(request, ec);    return ResponseEntity        .status(ErrorCode.NOT_READABLE.getHttpStatus())        .body(ApiResponse.error(ErrorContent.from(ec)));  }}HttpServletRequest 에서 다시 한번 InputStream 을 이용하여 body 를 읽으려고 했지만 아무것도 읽을 수 없었다.HttpServletRequest 에서 값을 읽을 때는 내부적으로 InputStream 을 사용한다.  The spring-web module contains the HttpMessageConverter interface for reading and writing the body of HTTP requests and responses through InputStream and OutputStream. HttpMessageConverter instances are used on the client side (for concurrency, in the RestClient) and on the server side (for concurrency, in Spring MVC REST controllers).Spring MVC 는 Servlet API 기반으로 만들어졌다. Spring MVC 에서는 Dispatcher Servlet 이 그 역할을 담당하고 있다.Http 요청을 다룰 때 HttpServletRequest 에서 요청 body 를 읽을 때 getInputStream() 그리고 getReader() 메서드를 제공한다.이러한 각 메소드는 동일한 InputStream 을 사용하기 때문에 InputStream을 한 번 읽으면 다시 읽을 수 없는 문제가 있다.ContentCachingRequestWrapperContentCachingRequestWrapper 는 생성자로 받은 HttpServeltRequest 를 input stream 과 reader 로 부터 모든 HttpServletRequest 컨텐츠를 캐시하는 HttpServlerRequest Wrapper 클래스이다.캐시한 content 는 byte array 형태로 다시 얻을 수 있다.얻을 때는 getContentAsByteArray() 를 통해 다시 얻을 수 있다.중요한 건 요청 컨텐츠가 consumed 되지 않았다면, 컨텐츠는 캐시되지 않는다.public class ContentCachingRequestWrapper extends HttpServletRequestWrapper {private final FastByteArrayOutputStream cachedContent;public ContentCachingRequestWrapper(HttpServletRequest request) {\t\tsuper(request);\t\t\t\t// 캐시 하는 부분\t\tint contentLength = request.getContentLength();\t\t\t\t// content 가 있는 경우 캐시한다.\t\tthis.cachedContent = (contentLength &gt; 0) ? new FastByteArrayOutputStream(contentLength) : new FastByteArrayOutputStream();\t\tthis.contentCacheLimit = null;\t}\t\t...\t\t// 캐시한 컨텐츠를 가져온다.\tpublic byte[] getContentAsByteArray() {\t\treturn this.cachedContent.toByteArray();\t}}엄청 특이한 건 없다.다만 FastByteArrayOutputStream 이라고 하는 OutputStream 을 extend 하여 새롭게 만들어 사용하고 있다. 문서에서는 ByteArrayOutputStream 의 대안으로 나왔다고 한다.참고로 AbstractRequestLoggingFilter 에서도 위의 ContentCachingRequestWrapper 가 사용된다.적용Custom Filter 를 만들어 기존 HttpServletRequest 를 캐싱할 수 있도록 들어온 HttpServletRequest 를 이용하여 ContentCachingRequestWrapper 객체를 만든 후 doFilter를 호출합니다.@Componentpublic class CachingFilter extends OncePerRequestFilter {  @Override  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,      FilterChain filterChain) throws ServletException, IOException {    filterChain.doFilter(new ContentCachingRequestWrapper(request), response);  }}참고  https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#rest-message-conversion",
            "content_html": "<h1 id=\"20240511-----restcontrolleradvice-에서-body-로깅으로-남기기md\">2024.05.11 -  🌱 @RestControllerAdvice 에서 body 로깅으로 남기기.md</h1><h2 id=\"사건의-발단\">사건의 발단</h2><p>현재 진행하고 있는 프로젝트에서는 @RestControllerAdvice 를 이용하여 예외를 전역으로 처리하고 있다.<br />예외가 났을 때 어떤 요청값이 들어와서 예외가 발생했는 지 로그로 남기고 싶어서 request 의 body 를 읽고 싶었으나 아무런 값이 없는 문제가 발생했다.</p><pre><code class=\"language-java\">@Slf4j@RestControllerAdvicepublic class GlobalExceptionHandler {  @ExceptionHandler(HotelkingException.class)  public ResponseEntity&lt;ApiResponse&lt;ErrorContent&gt;&gt; handleHotelkingException(      HotelkingException e,      HttpServletRequest request  ){    ErrorCode ec = e.getErrorCode();String body = StreamUtils.copyToString(request.getInputStream(), StandardCharsets.UTF_8);log.error(\"body = {}\", body); // 슬프게도 아무것도 안나온다.    return ResponseEntity.status(ec.getHttpStatus()).body(ApiResponse.error(ErrorContent.from(ec)));  }  @ExceptionHandler(HttpMessageNotReadableException.class)  public ResponseEntity&lt;ApiResponse&lt;ErrorContent&gt;&gt; handleHttpMessageNotReadableException(HttpMessageNotReadableException e, HttpServletRequest request) {    ErrorCode ec = ErrorCode.NOT_READABLE;    printLog(request, ec);    return ResponseEntity        .status(ErrorCode.NOT_READABLE.getHttpStatus())        .body(ApiResponse.error(ErrorContent.from(ec)));  }}</code></pre><p>HttpServletRequest 에서 다시 한번 InputStream 을 이용하여 body 를 읽으려고 했지만 아무것도 읽을 수 없었다.</p><h2 id=\"httpservletrequest-에서-값을-읽을-때는-내부적으로-inputstream-을-사용한다\">HttpServletRequest 에서 값을 읽을 때는 내부적으로 InputStream 을 사용한다.</h2><blockquote>  <p>The spring-web module contains the HttpMessageConverter interface for reading and writing the body of HTTP requests and responses through InputStream and OutputStream. HttpMessageConverter instances are used on the client side (for concurrency, in the RestClient) and on the server side (for concurrency, in Spring MVC REST controllers).</p></blockquote><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/bc215933-2cc6-43a4-9a7f-36dc13766dee/image.png\" alt=\"\" /></p><p>Spring MVC 는 Servlet API 기반으로 만들어졌다. Spring MVC 에서는 Dispatcher Servlet 이 그 역할을 담당하고 있다.Http 요청을 다룰 때 HttpServletRequest 에서 요청 body 를 읽을 때 <code>getInputStream()</code> 그리고 <code>getReader()</code> 메서드를 제공한다.이러한 각 메소드는 동일한 InputStream 을 사용하기 때문에 InputStream을 한 번 읽으면 다시 읽을 수 없는 문제가 있다.</p><h2 id=\"contentcachingrequestwrapper\">ContentCachingRequestWrapper</h2><p><code>ContentCachingRequestWrapper</code> 는 생성자로 받은 HttpServeltRequest 를 input stream 과 reader 로 부터 모든 HttpServletRequest 컨텐츠를 캐시하는 HttpServlerRequest Wrapper 클래스이다.</p><p>캐시한 content 는 byte array 형태로 다시 얻을 수 있다.</p><p>얻을 때는 <code>getContentAsByteArray()</code> 를 통해 다시 얻을 수 있다.</p><p>중요한 건 요청 컨텐츠가 consumed 되지 않았다면, 컨텐츠는 캐시되지 않는다.</p><pre><code class=\"language-java\">public class ContentCachingRequestWrapper extends HttpServletRequestWrapper {private final FastByteArrayOutputStream cachedContent;public ContentCachingRequestWrapper(HttpServletRequest request) {\t\tsuper(request);\t\t\t\t// 캐시 하는 부분\t\tint contentLength = request.getContentLength();\t\t\t\t// content 가 있는 경우 캐시한다.\t\tthis.cachedContent = (contentLength &gt; 0) ? new FastByteArrayOutputStream(contentLength) : new FastByteArrayOutputStream();\t\tthis.contentCacheLimit = null;\t}\t\t...\t\t// 캐시한 컨텐츠를 가져온다.\tpublic byte[] getContentAsByteArray() {\t\treturn this.cachedContent.toByteArray();\t}}</code></pre><p>엄청 특이한 건 없다.</p><p>다만 <code>FastByteArrayOutputStream</code> 이라고 하는 OutputStream 을 extend 하여 새롭게 만들어 사용하고 있다. 문서에서는 ByteArrayOutputStream 의 대안으로 나왔다고 한다.</p><p>참고로 <code>AbstractRequestLoggingFilter</code> 에서도 위의 <code>ContentCachingRequestWrapper</code> 가 사용된다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/8eb4fafc-4f37-4855-9bb4-8a8bc838a0d5/image.png\" alt=\"\" /></p><h2 id=\"적용\">적용</h2><p>Custom Filter 를 만들어 기존 HttpServletRequest 를 캐싱할 수 있도록 들어온 HttpServletRequest 를 이용하여 ContentCachingRequestWrapper 객체를 만든 후 doFilter를 호출합니다.</p><pre><code class=\"language-java\">@Componentpublic class CachingFilter extends OncePerRequestFilter {  @Override  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,      FilterChain filterChain) throws ServletException, IOException {    filterChain.doFilter(new ContentCachingRequestWrapper(request), response);  }}</code></pre><h3 id=\"참고\">참고</h3><ul>  <li>https://docs.spring.io/spring-framework/reference/integration/rest-clients.html#rest-message-conversion</li></ul>",
            "url": "http://localhost:4000/2024/05/11/spring-restcontrolleradvice-%EC%97%90%EC%84%9C-body-%EB%A1%9C%EA%B9%85%EC%9C%BC%EB%A1%9C-%EB%82%A8%EA%B8%B0%EA%B8%B0",
            
            
            
            
            
            "date_published": "2024-05-11T00:00:00+09:00",
            "date_modified": "2024-05-11T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/02/21/%EB%8B%A4%EC%8B%9C-%EA%B9%A8%EB%8B%AB%EB%8A%94-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1",
            "title": "다시 깨닫는 영속성 컨텍스트의 중요성",
            "summary": null,
            "content_text": "2024.11.10 - 다시금 깨닫는 영속성 컨텍스트와 DB 격리 레벨 중요성  Lock 과 관련한 간단한 코드를 작성하고 테스트를 실했을 때 원치않은 결과가 계속 나오는 것을 보고도대체 잘못된 결과가 나온 것일까? 결론부터 말하자면      영속성  컨텍스트를 생각하지 않았던 것    Lock 의 범위 설정을 잘하지 못한 것    (사실 가장 중요하다) MySQL 의 InnoDB 엔진 기본 Isolation Level 을 고려하지 않을 것  https://www.baeldung.com/jpa-hibernate-persistence-context원인 분석 과 해결 과정만약 Lock 을 10초 동안 기다려서 획득했을 때의 roomStock 은 새롭게 BD 에서 값이 갱신된 roomStock 정보가 아닌 앞에서 조회했던 객체 즉, 영속성 컨텍스트에 있던 객체이다.따라서 최악의 경우에는 아래와 같이 동작한다.즉, Lock 을 흭득하는 것은 좋았으나, 문제는 JPA 의 업데이트 하려고 하는 roomStock 데이터는 영속성 컨텍스트에서 조회하기 때문에 다른 스레드가 roomStock 의 count 를 업데이트 해서 값이 변경 되었지만, 영속성 컨텍스트에서 데이터를 가져와서 갱신하기 때문에 데이터 불일치가 발생한다.수정된 코드여전히 문제가 많습니다..@Transactional  public String reserve(long roomId) {    try {      Long lock = roomStockRepository.getLock(String.valueOf(roomId), 1);      if (lock == null || lock == 0) {        log.info(\"lock 획득 실패\");        return \"fail\";      }      log.info(\"acquire Lock !\");      RoomStock roomStock = roomStockRepository.findRoomStockByRoomId(roomId).orElseThrow();      roomStock.decrease();    } catch (RuntimeException e) {      log.warn(e.getMessage());    } finally {      roomStockRepository.releaseLock(String.valueOf(roomId));      log.info(\"release Lock !\");    }      return \"success\";  }위의 코드는 실행이 잘 될까? 결론부터 말하자면 이 역시 제대로 동작하지 않는다.동작하지 않은 이유 추측 1 : lock 을 해제 한 후 commit 하기 전(즉, flush 가 일어나서 실제로 db에 반영되기 전)에 다른 thread 가 lock 을 획득하는 경우 commit 이전에 다른 스레드가 lock 을 획득하고 findRoomStockByRoomId 을 통해 RoomStock 을 가져온다면 이론상 가능하다.하지만 테스트한 환경에서는 그러한 상황이 연출되지 않았다.MySQL general_log 를 활성한 후, tx 별 로그를 살펴봐도 위와 같은 상황은 연출되지 않았음에도 불구하고 원하는 결과가 나오지 않았다.박스로 표시된 부분이 문제가 되는 부분이다.MySQL 의 InnoDB 스토리지 엔진에서 기본으로 사용되는 격리수준은 REPEATABLE READ 이다.1961 tx 가 먼저 commit 을 한 이후 1962 tx 가 조회하고 update 했을 때 바로 commit 이후에 변경된 값이 아닌 저장된 스냅샷으로 부터 데이터를 조회하게 된다.해결  이를 해결하기 위해 Lock 획득을 먼저 한 후 RoomStock 을 조회를 할 수 있도록 코드를 변경해야한다.(사실 애초에 이렇게 작성했다면 문제가 없었을 까?.)  MySQL 엔진을 InnoDB 로 사용하는 경우 기본 래벨은 REPEATABLE READ 이다. 이 격리 수준에서는 트랜잭션 시작 시점에 생성된 스냅샷을 기준으로 데이터를 읽기 때문에 실제 제고를 SELECT 하고 감소할 때는 @Transactional(propagation = Propagation.REQUIRES_NEW) 이용하여 새로운 트랜잭션을 시작, 스냅샷으로 부터 데이터를 조회하지 않도록 하는 방법을 사용할 수 있다.```java@Service@Slf4jpublic class ReservationService {private final RoomStockRepository roomStockRepository;  private final RoomStockService roomStockService;public ReservationService(RoomStockRepository roomStockRepository, RoomStockService roomStockService) {    this.paymentApi = paymentApi;    this.roomStockRepository = roomStockRepository;    this.roomStockService = roomStockService;  }// 증명하고자 하는 것  // =&gt; thread x 가 release 하고 나서 flush 하기 전에 thread y 가 lock 획득하고 room_stock 을 조회해서 잘못된 데이터를 가져오지 않았을 까?  @Transactional  public String reserve(long roomId) {    try {      Long lock = roomStockRepository.getLock(String.valueOf(roomId), 1);      if (lock == null || lock == 0) {        log.info(“lock 획득 실패”);        return “fail”;      }      log.info(“acquire Lock !”);      roomStockService.decrease(roomId);    } catch (RuntimeException e) {      log.warn(e.getMessage());    } finally {      Long aLong = roomStockRepository.releaseLock(String.valueOf(roomId));      log.info(“release Lock ! : {}”, aLong == 1);    }    return “success”;  }}@Slf4j@Servicepublic class RoomStockService {private final RoomStockRepository roomStockRepository;public RoomStockService(RoomStockRepository roomStockRepository) {    this.roomStockRepository = roomStockRepository;  }@Transactional(propagation = Propagation.REQUIRES_NEW)  public void decrease(long roomId) {    try {      RoomStock roomStock = roomStockRepository.findRoomStockByRoomId(roomId).orElseThrow();      roomStock.decrease();      roomStockRepository.saveAndFlush(roomStock);    } catch (RuntimeException e) {      log.warn(e.getMessage());    }  }}```  Transaction 을 길게 잡는 다면 그 만큼 요청당 DB Connection 을 소유하는 시간 역시 길어진다는 소리이고 이는 Connection 풀을 더 빨리 마르게 하는 요인이 될 수 있다. 즉, 빨리 Connection 을 사용하고 DBCP 에 반납해줘야 하는 데 불필요하게 오래 잡고 있다보니 뒤이어 오는 요청들은 Connection 을 얻을 때 까지 기다릴 수 밖에 없게 되기 때문에 요청 응답시간은 더욱 더 길어질 수 밖에 없다.  참고로 영속성 컨텍스트는 두 가지 스코프 타입이 존재하는 데      Transaction-Scoped : 말 그대로, 영속성 컨텍스트가 존재하는 범위가 Transaction 까지 이다. 따라서 트랜잭션이 끝나면 해당 영속성 컨텍스트를 flush 하게 됩니다.    Extended-Scoped : 여러 트랜잭션에 걸쳐 있을 수 영속성 컨텍스트 로서. 트랜잭션 없이도 엔터티를 지속할 수 있지만 트랜잭션 없이는 flush 할 수 없습니다.기본적으로 아무 설정을 하지 않는다면 Persistence-Context 의 기본 Scope 는 Transaction-Scoped 이다.      @Repeatable(PersistenceContexts.class)@Target({TYPE, METHOD, FIELD})@Retention(RUNTIME)public @interface PersistenceContext {// .../** * (Optional) Specifies whether a transaction-scoped persistence context  * or an extended persistence context is to be used. */PersistenceContextType type() default PersistenceContextType.TRANSACTION;   // ...}      ",
            "content_html": "<h1 id=\"20241110---다시금-깨닫는-영속성-컨텍스트와-db-격리-레벨-중요성\">2024.11.10 - 다시금 깨닫는 영속성 컨텍스트와 DB 격리 레벨 중요성</h1><blockquote>  <p>Lock 과 관련한 간단한 코드를 작성하고 테스트를 실했을 때 원치않은 결과가 계속 나오는 것을 보고도대체 잘못된 결과가 나온 것일까? 결론부터 말하자면</p>  <ol>    <li><strong>영속성  컨텍스트를 생각하지 않았던 것</strong></li>    <li><strong>Lock 의 범위 설정을 잘하지 못한 것</strong></li>    <li><strong>(사실 가장 중요하다) MySQL 의 InnoDB 엔진 기본 Isolation Level 을 고려하지 않을 것</strong></li>  </ol></blockquote><p><img src=\"images/persistence_context.png\" alt=\"스크린샷 2024-11-22 오후 1.31.37.png\" /></p><p>https://www.baeldung.com/jpa-hibernate-persistence-context</p><h3 id=\"원인-분석-과-해결-과정\">원인 분석 과 해결 과정</h3><p>만약 Lock 을 10초 동안 기다려서 획득했을 때의 roomStock 은 새롭게 BD 에서 값이 갱신된 roomStock 정보가 아닌 앞에서 조회했던 객체 즉, 영속성 컨텍스트에 있던 객체이다.따라서 최악의 경우에는 아래와 같이 동작한다.</p><p>즉, Lock 을 흭득하는 것은 좋았으나, 문제는 JPA 의 업데이트 하려고 하는 roomStock 데이터는 영속성 컨텍스트에서 조회하기 때문에 다른 스레드가 roomStock 의 count 를 업데이트 해서 값이 변경 되었지만, 영속성 컨텍스트에서 데이터를 가져와서 갱신하기 때문에 데이터 불일치가 발생한다.</p><h4 id=\"수정된-코드\">수정된 코드</h4><p>여전히 문제가 많습니다..</p><pre><code class=\"language-java\">@Transactional  public String reserve(long roomId) {    try {      Long lock = roomStockRepository.getLock(String.valueOf(roomId), 1);      if (lock == null || lock == 0) {        log.info(\"lock 획득 실패\");        return \"fail\";      }      log.info(\"acquire Lock !\");      RoomStock roomStock = roomStockRepository.findRoomStockByRoomId(roomId).orElseThrow();      roomStock.decrease();    } catch (RuntimeException e) {      log.warn(e.getMessage());    } finally {      roomStockRepository.releaseLock(String.valueOf(roomId));      log.info(\"release Lock !\");    }      return \"success\";  }</code></pre><p>위의 코드는 실행이 잘 될까? 결론부터 말하자면 이 역시 제대로 동작하지 않는다.</p><p>동작하지 않은 이유 추측 1 : lock 을 해제 한 후 commit 하기 전(즉, flush 가 일어나서 실제로 db에 반영되기 전)에 다른 thread 가 lock 을 획득하는 경우 commit 이전에 다른 스레드가 lock 을 획득하고 findRoomStockByRoomId 을 통해 RoomStock 을 가져온다면 이론상 가능하다.하지만 테스트한 환경에서는 그러한 상황이 연출되지 않았다.</p><p>MySQL general_log 를 활성한 후, tx 별 로그를 살펴봐도 위와 같은 상황은 연출되지 않았음에도 불구하고 원하는 결과가 나오지 않았다.박스로 표시된 부분이 문제가 되는 부분이다.<img src=\"images/img.png\" alt=\"general_log\" /></p><p>MySQL 의 InnoDB 스토리지 엔진에서 기본으로 사용되는 격리수준은 REPEATABLE READ 이다.1961 tx 가 먼저 commit 을 한 이후 1962 tx 가 조회하고 update 했을 때 바로 commit 이후에 변경된 값이 아닌 저장된 스냅샷으로 부터 데이터를 조회하게 된다.</p><h3 id=\"해결\">해결</h3><ol>  <li>이를 해결하기 위해 Lock 획득을 먼저 한 후 RoomStock 을 조회를 할 수 있도록 코드를 변경해야한다.(사실 애초에 이렇게 작성했다면 문제가 없었을 까?.)</li>  <li>MySQL 엔진을 InnoDB 로 사용하는 경우 기본 래벨은 REPEATABLE READ 이다. 이 격리 수준에서는 트랜잭션 시작 시점에 생성된 스냅샷을 기준으로 데이터를 읽기 때문에 실제 제고를 SELECT 하고 감소할 때는 @Transactional(propagation = Propagation.REQUIRES_NEW) 이용하여 새로운 트랜잭션을 시작, 스냅샷으로 부터 데이터를 조회하지 않도록 하는 방법을 사용할 수 있다.```java</li></ol><p>@Service@Slf4jpublic class ReservationService {</p><p>private final RoomStockRepository roomStockRepository;  private final RoomStockService roomStockService;</p><p>public ReservationService(RoomStockRepository roomStockRepository, RoomStockService roomStockService) {    this.paymentApi = paymentApi;    this.roomStockRepository = roomStockRepository;    this.roomStockService = roomStockService;  }</p><p>// 증명하고자 하는 것  // =&gt; thread x 가 release 하고 나서 flush 하기 전에 thread y 가 lock 획득하고 room_stock 을 조회해서 잘못된 데이터를 가져오지 않았을 까?  @Transactional  public String reserve(long roomId) {    try {      Long lock = roomStockRepository.getLock(String.valueOf(roomId), 1);      if (lock == null || lock == 0) {        log.info(“lock 획득 실패”);        return “fail”;      }      log.info(“acquire Lock !”);      roomStockService.decrease(roomId);    } catch (RuntimeException e) {      log.warn(e.getMessage());    } finally {      Long aLong = roomStockRepository.releaseLock(String.valueOf(roomId));      log.info(“release Lock ! : {}”, aLong == 1);    }    return “success”;  }}</p><p>@Slf4j@Servicepublic class RoomStockService {</p><p>private final RoomStockRepository roomStockRepository;</p><p>public RoomStockService(RoomStockRepository roomStockRepository) {    this.roomStockRepository = roomStockRepository;  }</p><p>@Transactional(propagation = Propagation.REQUIRES_NEW)  public void decrease(long roomId) {    try {      RoomStock roomStock = roomStockRepository.findRoomStockByRoomId(roomId).orElseThrow();      roomStock.decrease();      roomStockRepository.saveAndFlush(roomStock);    } catch (RuntimeException e) {      log.warn(e.getMessage());    }  }}</p><p>```</p><blockquote>  <p>Transaction 을 길게 잡는 다면 그 만큼 요청당 DB Connection 을 소유하는 시간 역시 길어진다는 소리이고 이는 Connection 풀을 더 빨리 마르게 하는 요인이 될 수 있다. 즉, 빨리 Connection 을 사용하고 DBCP 에 반납해줘야 하는 데 불필요하게 오래 잡고 있다보니 뒤이어 오는 요청들은 Connection 을 얻을 때 까지 기다릴 수 밖에 없게 되기 때문에 요청 응답시간은 더욱 더 길어질 수 밖에 없다.</p></blockquote><blockquote>  <p>참고로 영속성 컨텍스트는 두 가지 스코프 타입이 존재하는 데</p>  <ol>    <li>Transaction-Scoped : 말 그대로, 영속성 컨텍스트가 존재하는 범위가 Transaction 까지 이다. 따라서 트랜잭션이 끝나면 해당 영속성 컨텍스트를 flush 하게 됩니다.</li>    <li>Extended-Scoped : 여러 트랜잭션에 걸쳐 있을 수 영속성 컨텍스트 로서. 트랜잭션 없이도 엔터티를 지속할 수 있지만 트랜잭션 없이는 flush 할 수 없습니다.기본적으로 아무 설정을 하지 않는다면 Persistence-Context 의 기본 Scope 는 Transaction-Scoped 이다.      <pre><code class=\"language-java\">@Repeatable(PersistenceContexts.class)@Target({TYPE, METHOD, FIELD})@Retention(RUNTIME)public @interface PersistenceContext {// .../** * (Optional) Specifies whether a transaction-scoped persistence context  * or an extended persistence context is to be used. */PersistenceContextType type() default PersistenceContextType.TRANSACTION;   // ...}</code></pre>    </li>  </ol></blockquote>",
            "url": "http://localhost:4000/2024/02/21/%EB%8B%A4%EC%8B%9C-%EA%B9%A8%EB%8B%AB%EB%8A%94-%EC%98%81%EC%86%8D%EC%84%B1-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%A4%91%EC%9A%94%EC%84%B1",
            
            
            
            
            
            "date_published": "2024-02-21T00:00:00+09:00",
            "date_modified": "2024-02-21T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/02/21/lamda-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95-%EC%A0%81%EC%9A%A9%EA%B8%B0",
            "title": "Lamda 를 활용한 이미지 리사이징 적용기",
            "summary": null,
            "content_text": "2024.02.21 - AWS Lambda 를 활용한 이미지 리사이징 적용기들어가면서현재 진행하고 있는 프로젝트에는 이미지 업로드 기능이 있다. 클라이언트가 API 키를 이용하여 Cloudnary 에 이미지를 업로드 한 후 업로드 된 이미지 URI와 포스팅하려고 하는 내용과 함께 서버에 등록하는 방식이다. 하지만 이러한 방식은 다소 문제가 일어날 요지가 있어 이미지 업로드 과정을 개선해보았다.문제클라이언트 (프론트엔드) 가 미리 정의된 API 키를 이용하여 이미지서버 (Cloudnary) 에 이미지를 바로 저장하고 있다. 즉, 클라이언트가 이미지 저장에 대한 모든 권한을 가지고 있는 셈이다. 이때 API 키는 클라이언트에 노출되어있기때문에 KEY가 탈취된다면 언제든지 누군가 사용해서 이미지를 업로드 할 수 있는 문제가 생긴다.또한 현재 프로젝트에서 사용되는 이미지 사이즈는 최대 500px 임에도 불구하고 클라이언트로 부터 원본 이미지를 저장한 후 저장된 원본이미지를 그대로 사용하고 있다. 원본 사이즈 크기를 사용할 필요가 없음에도 불구하고 불필요하게 이미지 다운로드 용량을 낭비하고 있다.  보안적인 문제로 인해 클라이언트가 아닌 서버에서 이미지 저장을 처리해야 한다.  불필요한 네트워크 낭비를 방지하고자 요청할 때는 리사이징된 작은 사이즈의 이미지를 요청할 수 있도록 한다.해결      S3 이미지 저장에 대한 권한은 일시간동안만 사용가능한 업로드 용 Presigned URI 를 만들어 해당 URI를 통해 클라이언트가 이미지를 업로드 할 수 있게 하여 클라이언트가 업로드에 대한 모든 권한을 가질 수 없도록 하였다.        API 서버에서 하지 않아도 외부에서 리사이징 작업을 할 수 있기 위해서 S3 와 Lambda 를 이용하여 이미지 리사이징에 대한 처리를 하였다.  위와 같은 해결은 쉽게 나오진 않았다. 아래의 상황을 고려한 후 최종적으로 S3 와 Lambda, API Gateway 를 이용한 이미지 처리방식을 채택하였다.방안 1먼저 처음 생각한 이미지 처리 방식이다.직관적으로 생각한 방식이다.클라이언트가 이미지(최대 3개까지) multipart 방식으로 API 서버로 이미지를 업로드 하면, 서버는 S3에 권한을 가진 IAM 사용자의 AccessKey 와 SecretKey 를 이용하여 S3에 이미지를 저장한다.저장 후에는 저장된 S3 이미지 URI를 저장하려고 하는 컨텐츠 정보와 함께 데이터베이스에 저장한다.이 과정이 모두 완료되면 클라이언트에 성공 응답(200)을 한다.이렇게 한다면 이미지 저장에 대한 권한은 서버에 있기 때문에 1번에 대한 문제가 해결된다.또한 이미지 리사이징도 서버에서 하기 때문에 이 또한 문제가 될 상황은 없어 보인다.하지만 클라이언트의 이미지 요청 이후 2, 3, 4번 의 응답이 늦어지면 늦어질 수록 최종 클라이언트로 가는 응답 역시 늦어질 수 밖에 없다.그래서 이미지 리사이징 처리를 다른 곳에서 할 수 있는 방안을 생각해보았다.(2번과 3번의 과정을 비동기 요청으로 할 경우 위와 같은 문제를 해결할 수 있을 것 같다. 하지만 비동기는 아직 익숙치 않기 때문에 그보다는 다른 방법으로 해결하기로 했다. 추후에 시간이 된다면 비동기에 대한 부분도 다루어 보도록 하겠다)방안 2방안 1에 비해서는 구조가 복잡해 보인다. S3 이외에 Lambda 가 추가되었다.크게 두 가지의 FLOW가 존재한다.FLOW 1  클라이언트가 API서버로 이미지를 전송한다.  API 서버는 클라이언트로 부터 받은 이미지를 S3에 업로드 한다.  S3에 저장된 이미지 URI를 요청받는 컨텐츠와 함께 DB에 저장한다.  저장이 완료되면 클라이언트로 성공 응답(200) 을 보낸다.FLOW 2  S3에 이미지가 저장될 경우 이미지 리사이징을 담당하는 Lambda 함수로 Events를 보낸다.  Lambda 함수는 저장된 S3 이미지를 가져와 리사이징 작업을 한다.  리사이징 작업이 끝나면 크기별로 S3에 저장한다.참고로 FLOW 1 번과 FLOW 2은 별개로 진행된다.그리고 서버는 더 이상 이미지 리사이징 작업을 하지 않아도 된다. 최소한 리사이징 작업으로 인해 응답이 지연되지는 않는다. 하지만 S3에 이미지를 저장하는 건 여전히 API 서버가 담당하고 있다.방안 3방안 2보다 훨씬 복잡해졌다.방안2와 다른 점은 이미지저장을 더 이상 서버에서 하지 않는다. 대신 서버에서는 이미지를 저장할 수 있는 Presigned URI 를 생성하도록 S3에 요청한다.클라이언트는 이 Presigned URI를 이용해 서버가 아닌 바로 S3에 이미지를 업로드한다. 이후 S3에 업로드 되어 진행되는 리사이징 과정은 Lambda 를 통해 이루어진다. (방안 2와 같다)이후에는 Presigned URI 와 함께 추가 저장할 컨텐츠 정보를 서버로 전달합니다. 서버는 이미지 URI 를 저장한 후 클라이언트로 성공응답(200)을 보낸다.Presigned URI 의 경우 20분의 유효시간을 정했다.public class AWSPresignedUriService(){    private final AmazonS3 s3;        public AWSPresignedUriService(final AmazonS3 s3){        this.s3 = s3;    }    \tpublic String generatePresignedUri(String bucketName, String filePath){\t\tCalendar calendar = Calendar.getInstance();        calendar.setTime(new Date());        calendar.add(Calendar.MINUTE, 20); // 20분의 유효시간        return s3.generatePresigenedUri(bucketName, filePath, calendar.getTime(), HttpMethod.PUT).toString();\t}}20분의 유효시간이 끝나면 발급받은 Presigned URI 는 더 이상 사용할 수 없다.이제 서버가 이미지와 관련된 작업을 하는 건 S3에 Presigned URI 를 생성하기 위해 요청하는 작업만 있다.하지만 아직까지 이미지 처리와 관련해서 서버에서 프로그래밍 방식으로 Presigned URI를 생성하기 때문에 버킷 이름이나 파일 경로를 바꾸기 위해서는 서버 코드를 수정해야하는 단점이 존재한다.이미지와 관련된 작업은 사실 크게 비지니스 로직에 벗어나지 않음에도 불구하고 새로운 Presigend URI를 만들기 위해 API 서버 코드를 수정하여 배포하고 싶지는 않았다.방안 4이미지 리사이징 Lambda 와 더불어 Presigned URI 를 생성하는 Lambda 를 추가한 후 API Gateway 를 만들어 Lambda 함수를 API 형태로 노출시킨다.이로써 더 이상 API 서버에서는 이미지와 관련된 작업을 더 이상 하지 않게 되었다.또한 API Gateway 는 “수신한 API 호출 1백만 건 무료” 이기 때문에 우리 프로젝트에 사용하기에는 충분했다.만약 새로운 Bucket 에 대해서 Presigned URI 을 생성하고 싶다면 서버코드는 전혀 건들이지 않고 Lambda 함수만 수정하면 되는 장점이 생겼다. 이제 더 이상 이미지와 관련된 작업은 API 서버에서 생각하지 않아도 되었다.개발과정S3와 CloudWatch 의 권한을 가진 새로운 정책 생성하기리사이징을 담당하는 람다 함수와 이미지 업로드 가능하도록 하는 Presigned URI 를 만들기 위해서는 S3에 권한이 있어야한다.이미지 리사이징을 담당하는 람다 함수의 경우 S3 로 부터 Event 를 받아 S3 이미지를 조회한 후 이미지 사이즈 별로 S3에 업로드 해야하기 때문에 S3 GET, PUT 에 대해 허용권한이 있어야한다.IAM &gt; 정책 &gt; 정책 생성 으로 들어가 필요한 권한을 설정해준다.참고로 Cloudwatch 에서 람다 이벤트에 대한 로그가 수집될 수 있도록 필요한 권한 역시 설정한다.정책을 생성했으니 이제 Role(역할)을 생성해야한다. Lambda 와 같은 AWS 리소스에 일시적으로 권한을 부여할 수 있는 데 Role 을 부여함으로써 가능하다. 또한 Role은 Policy와 연결되어야 사용할 수 있기 때문에 필요한 Lambda 가 사용할 역할을 만든다.역할은 IAM &gt; 역할 &gt; 역할 생성 에 들어가서 만들면 된다.권한 추가 항목에서는 아까 만든 정책(위의 스샷에서는 안보이지만 정책이름을 LambdaS3Policy 로 하였다) 선택한다.역할 이름을 넣고 역할생성 버튼을 눌러 역할을 생성한다.Lambda 함수 생성하기Lambda &gt; 함수 &gt; 함수 생성에 들어가 Lambda 함수를 생성한다.이때 Lambda 생성시 실행역할을 아까 만들었던 LambdaS3Role 로 선택한다. (먼저 Lambda 를 만들고 추구 Lambda &gt; 구성 &gt; 권한 &gt; 편집 항목에서 원하는 역할로 바꿀 수 있기 때문에 무엇을 먼저 만들지는 상관없다.)이미지 리사이징 코드import {S3Client, GetObjectCommand, PutObjectCommand} from '@aws-sdk/client-s3';import {Readable} from 'stream';import sharp from 'sharp';import util from 'util';import convert from 'heic-convert';const s3 = new S3Client({region: 'ap-northeast-2'});const widths = [80, 500];function parseBucketInfoFromEvent(event) {  console.log(`Event: ${JSON.stringify(event)}`);  const record = event.Records[0].s3;  const srcBucket = record.bucket.name;  const srcKey = decodeURIComponent(record.object.key.replace(/\\+/g, \" \"));  return {    srcBucket,    srcKey,    dstBucket: `${srcBucket}-resized`,    dstKey: `${srcKey}.jpg`,  };}// Fetch object from S3async function fetchObject({bucket, key}) {  const params = {Bucket: bucket, Key: key};  try {    const response = await s3.send(new GetObjectCommand(params));    const contentType = response.ContentType;    console.log(`ContentType: ${contentType}`);    if (!(response.Body instanceof Readable)) {      throw new Error('Expected a stream in the response body');    }    return response;  } catch (error) {    console.error(`Error fetching object ${key} from bucket ${bucket}:`, error);    throw error;  }}function verifyImageType(contentType, dstKey) {  if (!isImage(contentType)) {    throw new Error(`not support contentType = ${contentType} / dstKey = ${dstKey}`);  }}async function processAndUploadImages({  dstBucket,  dstKey,  response}) {  const contentType = response.ContentType;  const contentBuffer = Buffer.concat(await response.Body.toArray());  verifyImageType(contentType, dstKey);  for (const width of widths) {    let processedImageBuffer;    // HEIC 이미지의 경우 변환 처리    if (contentType === 'image/heic') {      console.log(\"heic file\")      const convertedBuffer  = await convertHeicToJpeg(contentBuffer);      processedImageBuffer = await resizeImage(convertedBuffer, width, contentType);    }else{      processedImageBuffer = await resizeImage(contentBuffer, width, contentType);    }    await uploadResizedImage(dstBucket, `${width}/${dstKey}`, processedImageBuffer);  }}// HEIC 이미지를 JPEG로 변환async function convertHeicToJpeg(buffer) {  try {    return await convert({      buffer: buffer, // HEIC 파일의 Buffer      format: 'JPEG', // HEIC to JPEG      quality: 1 // 품질 설정 (0 ~ 1)    });  } catch (error) {    console.error('Error converting HEIC to JPEG:', error);    throw error;  }}// Resize imageasync function resizeImage(buffer, width) {  try {    return sharp(buffer)    .resize(width, null, {fit: 'contain'}) // height 는 width 에 자동적으로 맞춰짐    .jpeg({quality: 80}) // 퀄리티 ( 0 ~ 100 )    .withMetadata() // 원본 metadata 그대로 가지도록 함    .toBuffer();  } catch (error) {    console.error('Error resizing image:', error);    throw error;  }}// Upload resized image to S3async function uploadResizedImage(bucket, key, buffer) {  const params = {    Bucket: bucket,    Key: key,    Body: buffer,    ContentType: 'image/jpeg',  };  try {    await s3.send(new PutObjectCommand(params));    console.log(`Successfully uploaded ${key} to ${bucket}`);  } catch (error) {    console.error(`Error uploading ${key} to ${bucket}:`, error);    throw error;  }}function isImage( contentType) {  return contentType.startsWith(\"image/\");}// Lambda handler functionexport const handler = async (event) =&gt; {  console.log(\"이벤트 처리 중 ... :\", util.inspect(event, {depth: 5}));  const {srcBucket, srcKey, dstBucket, dstKey} = parseBucketInfoFromEvent(event);  const response = await fetchObject({bucket: srcBucket, key: srcKey});  await processAndUploadImages({dstBucket, dstKey, response});};의존이 필요한 패키지들은 npm build 를 통해 설치한 후 zip 파일로 압축하여 업로드 한다.코드를 간단하게 설명하면  parseBucketInfoFromEvent(event) : 수신괸 S3 Events 로 부터 필요한 정보를 파싱(키, 버킷이름)  fetchObject(bucket, key): 버킷이름와 키를 이용하여 S3에 방급 저장된 이미지를 조회  processAndUploadImages(dstBucket, dstKey, response) : 가져온 이미지를 크기별(80, 500)로 리사이징 한 후 S3에 업로드sharp 는 이미지 포맷 변환을 지원한다.하지만 HEIC 포멧의 이미지파일인 경우 Nokia의 HEIF 라이브러리 라이센스로 인해 Sharp를 사용하려면 libheif, libde265 및 x265를 지원하도록 컴파일된 전역 설치 libvips를 사용해야 한다고 한다. 관련해서 해결한 블로그도 존재하지만, 나는 별도로 HEIC 를 JPG 로 바꾸는 라이브러리를 추가하여 해결했다.조회한 이미지의 response.ContentType 의 경우가 “image/heic” 인 경우에는 jpg 로 변환 후 이미지 리사이징 작업을 하도록 했다.업로드 용 PresignedURI 생성 코드또 다른 람다함수를 만들고 아래의 코드를 추가한다. 만들 때 역할은 위에서 만든 역할 그대로 사용하였다.import { PutObjectCommand, S3Client } from \"@aws-sdk/client-s3\";import { getSignedUrl, S3RequestPresigner } from \"@aws-sdk/s3-request-presigner\";import { randomUUID } from 'crypto';const REGION = \"리전\";const BUCKET = \"버킷이름\";const createPresignedUrlWithClient = ({ region, bucket, key }) =&gt; {  const client = new S3Client({ region });  const command = new PutObjectCommand({ Bucket: bucket, Key: key });  return getSignedUrl(client, command, { expiresIn: 360000 });};export const handler = async (event, context, callback) =&gt; {        const clientUrl = await createPresignedUrlWithClient({      region: REGION,      bucket: BUCKET,      key: randomUUID(),  \t});        return {      result: \"SUCCESS\",      data: [ clientUrl ]  \t}  }};업로드용 PresignedURI 의 경우, 방안4 에 나온 구조에서 보듯이 API Gateway 로 요청이 온 후 연결된 Lambda 함수에서 응답해야 하기 때문에 생성된 presignedUri 를 리턴하고 있다.API Gateway이제 PresignedURI 만드는 람다함수를 API 로 노출시키기 위해 먼저 API Gateway를 만들어야 한다.API Gateway 생성HTTP API 선택이때 API Gateway가 Lambda 함수를 호출해야하기 때문에, 아까 만든 Lambda 함수를 지정한다.다음버튼을 눌러 계속 진행한다.여기서 API Gateway의 메서드와 경로를 구성할 수 있다. 물론 만들고 나서 수정해도 상관없다. 나는 “GET /image/presigned-uri” 으로 경로를 설정했다.마지막으로 스테이지까를 정의한다. 이는 말그대로 스테이지 환경을 정의할 수 있으며 API 스테이지는 API ID 및 스테이지 이름으로 식별되며, API를 호출하는 데 사용되는 URL에 포함됩니다.HTTP URI에 스테이지 변수를 사용하여 구성하는 자세한 사용법은 https://docs.aws.amazon.com/ko_kr/apigateway/latest/developerguide/http-api-stages.html 에 있으니 참고바란다.새롭게 생성한 API를 볼 수 있다. 좀 전에 dev 라는 이름의 스테이지 이름을 사용하는 스테이지의 경우에는 현재 자동배포되지 않기 때문에 만약 dev 스테이지에도 배포를 원한다면 우측 상단에 있는 배포 버튼을 클릭하여 배포를 진행하면 된다.이제 아래의 경로로 API 호출을 하면https://{app_id}.execute-api.ap-northeast-2.amazonaws.com/image/presigned-uriPresigned URI 를 받는 것을 알 수 있다.번외, API Gateway 사용자 지정 도메인 설정하기AWS 에서 제공하는 URI 주소 말고 사용자 지정 도메인 이름을 지정할 수 있다.현재 itthatcat.xyz 도메인을 가비아 네임서버에 등록해놓은 상태이고 와일드 카드 인증서를 LetsEncrypted 를 통해 무료로 발급한 상태이다.이제 img.itthatcat.xyz 의 새로운 서브도메인을 설정해보자.https://{app_id}.execute-api.ap-northeast-2.amazonaws.com/image/presigned-uri 로 호출하는 것이 아닌https://img.itthatcat.xyz/image/presigned-uri 로 호출할 수 있도록 하자도메인 이름에는 사용하고자 하는 도메인 이름을 입력한다. (당연히 사용하고자 하는 도메인에 대해서 구입이 완료되어야 한다.)그리고 해당 도메인에 대해 발급한 인증서가 필요하다.사용하려고 하는 도메인에 ACM SSL 인증서 발급받기 with AWS가 아닌 다른 네임서버 사용중인증서의 경우 이미 만든 인증서를 가져와서 사용해도 좋지만, 나는 해당 도메인에 대해서는 새롭게 SSL 인증서를 만들기로 했다. 인증서가 여러개로 분산되어 관리의 포인트가 늘어난 다는 단점이 있지만, AWS ACM에서 만든 인증서의 경우 인증서의 갱신을 자동화할 수 있고 무료이다. 물론 원한다면 외부에서 사용된 인증서를 가져와서 사용할 수 있다. 다만 외부의 인증서의 경우 만료되었을 경우 갱신에 대한 로직은 대신해주지 않는다.이제 네임 서버에 CNAME 레코드를 만들면 된다. 이를 통해 DNS 검증을 받는 것이다.이때 CNAME 레코드 등록시 호스트에는 _21jkddfu2j.img.itthatcat.xyz. 에서 호스트 이름인 _21jkddfu2j.img 까지만 입력해야한다. 그 외는 그대로 입력한다.만약 서브도메인이 아닌경우라면_21jkddfu2j.itthatcat.xyz. 요렇게 될것이다. 그리고 CNAME 레코드 호스트는 _21jkddfu2j 입력하면 된다.어느 정도 시간이 지나면 이렇게 “검증 대기중”에서 “발급” 상태로 바뀐 것을 알 수있다.(CNAME 레코드를 추가하고 10분 내로 발급되었다)사용자지정 도메인 등록하기사용하려고 하는 도메인 이름과 발급받은 ACM 인증서를 등록합니다.사용자 지정 도메인와 API Gateway 매핑하기이렇게 사용자 지정 도메인에 대해 새로운 API Gateway 도메인 이름이 생겼다.이제 다시 가비아로 돌아와서 DNS 레코드를 추가해야한다. CNAME 레코드를 추가하여 img.itthatcat.xyz 로 접속했을 때 위의 가려진 도메인으로 이동할 수 있도록 해야한다.매핑하려고 하는 API 를 선택한다.이제 https://img.itthatcat.xyz/image/presigned-uri 로 요청해보자.정상적으로 데이터가 잘 나오는 것을 알 수 있다.번외현재는 API Gateway 앞단에 Cloudfront 를 구성한 후 Cloudfront -&gt; API Gateway -&gt; Lambda 로 호출하도록 구성한 상태이다.Cloudfront 역시 API Gateway 와 마찬가지로 AWS 에서 제공하는 도메인 이름이 아닌 새롭게 커스텀 도메인을 사용할 수 있으며 SSL 인증서 적용하는 방식도 같다.참고https://obviy.us/blog/sharp-heic-on-aws-lambda/https://docs.aws.amazon.com/ko_kr/acm/latest/userguide/troubleshooting-DNS-validation.html",
            "content_html": "<h1 id=\"20240221---aws-lambda-를-활용한-이미지-리사이징-적용기\">2024.02.21 - AWS Lambda 를 활용한 이미지 리사이징 적용기</h1><h3 id=\"들어가면서\">들어가면서</h3><p>현재 진행하고 있는 프로젝트에는 이미지 업로드 기능이 있다. 클라이언트가 API 키를 이용하여 Cloudnary 에 이미지를 업로드 한 후 업로드 된 이미지 URI와 포스팅하려고 하는 내용과 함께 서버에 등록하는 방식이다. 하지만 이러한 방식은 다소 문제가 일어날 요지가 있어 이미지 업로드 과정을 개선해보았다.</p><h3 id=\"문제\">문제</h3><p>클라이언트 (프론트엔드) 가 미리 정의된 API 키를 이용하여 이미지서버 (<strong>Cloudnary</strong>) 에 이미지를 바로 저장하고 있다. 즉, 클라이언트가 이미지 저장에 대한 모든 권한을 가지고 있는 셈이다. 이때 API 키는 클라이언트에 노출되어있기때문에 KEY가 탈취된다면 언제든지 누군가 사용해서 이미지를 업로드 할 수 있는 문제가 생긴다.또한 현재 프로젝트에서 사용되는 이미지 사이즈는 최대 500px 임에도 불구하고 클라이언트로 부터 원본 이미지를 저장한 후 저장된 원본이미지를 그대로 사용하고 있다. 원본 사이즈 크기를 사용할 필요가 없음에도 불구하고 불필요하게 이미지 다운로드 용량을 낭비하고 있다.</p><ol>  <li>보안적인 문제로 인해 클라이언트가 아닌 서버에서 이미지 저장을 처리해야 한다.</li>  <li>불필요한 네트워크 낭비를 방지하고자 요청할 때는 리사이징된 작은 사이즈의 이미지를 요청할 수 있도록 한다.</li></ol><h3 id=\"해결\">해결</h3><ol>  <li>    <p>S3 이미지 저장에 대한 권한은 일시간동안만 사용가능한 업로드 용 Presigned URI 를 만들어 해당 URI를 통해 클라이언트가 이미지를 업로드 할 수 있게 하여 클라이언트가 업로드에 대한 모든 권한을 가질 수 없도록 하였다.</p>  </li>  <li>    <p>API 서버에서 하지 않아도 외부에서 리사이징 작업을 할 수 있기 위해서 S3 와 Lambda 를 이용하여 이미지 리사이징에 대한 처리를 하였다.</p>  </li></ol><p>위와 같은 해결은 쉽게 나오진 않았다. 아래의 상황을 고려한 후 최종적으로 S3 와 Lambda, API Gateway 를 이용한 이미지 처리방식을 채택하였다.</p><h3 id=\"방안-1\">방안 1</h3><p>먼저 처음 생각한 이미지 처리 방식이다.<img src=\"https://velog.velcdn.com/images/kmss6905/post/39d255a6-d037-4aa2-840b-440147e60296/image.png\" alt=\"\" /></p><p>직관적으로 생각한 방식이다.클라이언트가 이미지(최대 3개까지) multipart 방식으로 API 서버로 이미지를 업로드 하면, 서버는 S3에 권한을 가진 IAM 사용자의 AccessKey 와 SecretKey 를 이용하여 S3에 이미지를 저장한다.저장 후에는 저장된 S3 이미지 URI를 저장하려고 하는 컨텐츠 정보와 함께 데이터베이스에 저장한다.</p><p>이 과정이 모두 완료되면 클라이언트에 성공 응답(200)을 한다.</p><p>이렇게 한다면 이미지 저장에 대한 권한은 서버에 있기 때문에 1번에 대한 문제가 해결된다.또한 이미지 리사이징도 서버에서 하기 때문에 이 또한 문제가 될 상황은 없어 보인다.</p><p>하지만 클라이언트의 이미지 요청 이후 2, 3, 4번 의 응답이 늦어지면 늦어질 수록 최종 클라이언트로 가는 응답 역시 늦어질 수 밖에 없다.</p><p>그래서 이미지 리사이징 처리를 다른 곳에서 할 수 있는 방안을 생각해보았다.</p><p>(2번과 3번의 과정을 비동기 요청으로 할 경우 위와 같은 문제를 해결할 수 있을 것 같다. 하지만 비동기는 아직 익숙치 않기 때문에 그보다는 다른 방법으로 해결하기로 했다. 추후에 시간이 된다면 비동기에 대한 부분도 다루어 보도록 하겠다)</p><h3 id=\"방안-2\">방안 2</h3><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/4890d484-47ca-491d-9aba-fc86dba254e8/image.png\" alt=\"\" /></p><p>방안 1에 비해서는 구조가 복잡해 보인다. S3 이외에 Lambda 가 추가되었다.크게 두 가지의 FLOW가 존재한다.</p><h4 id=\"flow-1\">FLOW 1</h4><ol>  <li>클라이언트가 API서버로 이미지를 전송한다.</li>  <li>API 서버는 클라이언트로 부터 받은 이미지를 S3에 업로드 한다.</li>  <li>S3에 저장된 이미지 URI를 요청받는 컨텐츠와 함께 DB에 저장한다.</li>  <li>저장이 완료되면 클라이언트로 성공 응답(200) 을 보낸다.</li></ol><h4 id=\"flow-2\">FLOW 2</h4><ol>  <li>S3에 이미지가 저장될 경우 이미지 리사이징을 담당하는 Lambda 함수로 Events를 보낸다.</li>  <li>Lambda 함수는 저장된 S3 이미지를 가져와 리사이징 작업을 한다.</li>  <li>리사이징 작업이 끝나면 크기별로 S3에 저장한다.</li></ol><p>참고로 FLOW 1 번과 FLOW 2은 별개로 진행된다.</p><p>그리고 서버는 더 이상 이미지 리사이징 작업을 하지 않아도 된다. 최소한 리사이징 작업으로 인해 응답이 지연되지는 않는다. 하지만 S3에 이미지를 저장하는 건 여전히 API 서버가 담당하고 있다.</p><h3 id=\"방안-3\">방안 3</h3><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/f114ee16-fdfc-4beb-96ec-812756743cde/image.png\" alt=\"\" /></p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/72766403-160f-42e5-aa86-53d738928f1e/image.png\" alt=\"\" /></p><p>방안 2보다 훨씬 복잡해졌다.</p><p>방안2와 다른 점은 이미지저장을 더 이상 서버에서 하지 않는다. 대신 서버에서는 이미지를 저장할 수 있는 Presigned URI 를 생성하도록 S3에 요청한다.</p><p>클라이언트는 이 Presigned URI를 이용해 서버가 아닌 바로 S3에 이미지를 업로드한다. 이후 S3에 업로드 되어 진행되는 리사이징 과정은 Lambda 를 통해 이루어진다. (방안 2와 같다)</p><p>이후에는 Presigned URI 와 함께 추가 저장할 컨텐츠 정보를 서버로 전달합니다. 서버는 이미지 URI 를 저장한 후 클라이언트로 성공응답(200)을 보낸다.</p><p>Presigned URI 의 경우 20분의 유효시간을 정했다.</p><pre><code class=\"language-java\">public class AWSPresignedUriService(){    private final AmazonS3 s3;        public AWSPresignedUriService(final AmazonS3 s3){        this.s3 = s3;    }    \tpublic String generatePresignedUri(String bucketName, String filePath){\t\tCalendar calendar = Calendar.getInstance();        calendar.setTime(new Date());        calendar.add(Calendar.MINUTE, 20); // 20분의 유효시간        return s3.generatePresigenedUri(bucketName, filePath, calendar.getTime(), HttpMethod.PUT).toString();\t}}</code></pre><p>20분의 유효시간이 끝나면 발급받은 Presigned URI 는 더 이상 사용할 수 없다.이제 서버가 이미지와 관련된 작업을 하는 건 S3에 Presigned URI 를 생성하기 위해 요청하는 작업만 있다.</p><p>하지만 아직까지 이미지 처리와 관련해서 서버에서 프로그래밍 방식으로 Presigned URI를 생성하기 때문에 버킷 이름이나 파일 경로를 바꾸기 위해서는 서버 코드를 수정해야하는 단점이 존재한다.</p><p>이미지와 관련된 작업은 사실 크게 비지니스 로직에 벗어나지 않음에도 불구하고 새로운 Presigend URI를 만들기 위해 API 서버 코드를 수정하여 배포하고 싶지는 않았다.</p><h3 id=\"방안-4\">방안 4</h3><p>이미지 리사이징 Lambda 와 더불어 Presigned URI 를 생성하는 Lambda 를 추가한 후 API Gateway 를 만들어 Lambda 함수를 API 형태로 노출시킨다.</p><p>이로써 더 이상 API 서버에서는 이미지와 관련된 작업을 더 이상 하지 않게 되었다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/d07a2405-4b82-4eea-b1d5-06c661dedea4/image.png\" alt=\"\" /></p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/04bf8d8e-f9df-447c-9c82-cad7290956e8/image.png\" alt=\"\" /></p><p>또한 API Gateway 는 “수신한 API 호출 1백만 건 무료” 이기 때문에 우리 프로젝트에 사용하기에는 충분했다.</p><p>만약 새로운 Bucket 에 대해서 Presigned URI 을 생성하고 싶다면 서버코드는 전혀 건들이지 않고 Lambda 함수만 수정하면 되는 장점이 생겼다. 이제 더 이상 이미지와 관련된 작업은 API 서버에서 생각하지 않아도 되었다.</p><h2 id=\"개발과정\">개발과정</h2><h3 id=\"s3와-cloudwatch-의-권한을-가진-새로운-정책-생성하기\">S3와 CloudWatch 의 권한을 가진 새로운 정책 생성하기</h3><p>리사이징을 담당하는 람다 함수와 이미지 업로드 가능하도록 하는 Presigned URI 를 만들기 위해서는 S3에 권한이 있어야한다.</p><p>이미지 리사이징을 담당하는 람다 함수의 경우 S3 로 부터 Event 를 받아 S3 이미지를 조회한 후 이미지 사이즈 별로 S3에 업로드 해야하기 때문에 S3 GET, PUT 에 대해 허용권한이 있어야한다.</p><p>IAM &gt; 정책 &gt; 정책 생성 으로 들어가 필요한 권한을 설정해준다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/6df34801-e732-4850-80fc-993ea89c03bc/image.png\" alt=\"\" /></p><p>참고로 Cloudwatch 에서 람다 이벤트에 대한 로그가 수집될 수 있도록 필요한 권한 역시 설정한다.</p><p>정책을 생성했으니 이제 Role(역할)을 생성해야한다. Lambda 와 같은 AWS 리소스에 일시적으로 권한을 부여할 수 있는 데 Role 을 부여함으로써 가능하다. 또한 Role은 Policy와 연결되어야 사용할 수 있기 때문에 필요한 Lambda 가 사용할 역할을 만든다.</p><p>역할은 IAM &gt; 역할 &gt; 역할 생성 에 들어가서 만들면 된다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/2e27fe29-17f8-4a57-9448-3c9b6dac53bd/image.png\" alt=\"\" /></p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/91a23969-31e8-48a3-81a5-137622cb3931/image.png\" alt=\"\" /></p><p>권한 추가 항목에서는 아까 만든 정책(위의 스샷에서는 안보이지만 정책이름을 LambdaS3Policy 로 하였다) 선택한다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/df398e10-c78a-4e84-8248-cfa4197b787a/image.png\" alt=\"\" />역할 이름을 넣고 역할생성 버튼을 눌러 역할을 생성한다.</p><h3 id=\"lambda-함수-생성하기\">Lambda 함수 생성하기</h3><p>Lambda &gt; 함수 &gt; 함수 생성에 들어가 Lambda 함수를 생성한다.<img src=\"https://velog.velcdn.com/images/kmss6905/post/f6fb8db0-6930-4df5-847b-3d026d1d1ea5/image.png\" alt=\"\" /></p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/b36c9288-c795-42af-a8bf-32021ca5863d/image.png\" alt=\"\" /></p><p>이때 Lambda 생성시 실행역할을 아까 만들었던 LambdaS3Role 로 선택한다. (먼저 Lambda 를 만들고 추구 Lambda &gt; 구성 &gt; 권한 &gt; 편집 항목에서 원하는 역할로 바꿀 수 있기 때문에 무엇을 먼저 만들지는 상관없다.)</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/794873a8-723d-4e95-8c91-fa5b0e05357b/image.png\" alt=\"\" /><img src=\"https://velog.velcdn.com/images/kmss6905/post/6836952d-53e1-44fd-864e-c097c8877c9c/image.png\" alt=\"\" /></p><h4 id=\"이미지-리사이징-코드\">이미지 리사이징 코드</h4><pre><code class=\"language-javascript\">import {S3Client, GetObjectCommand, PutObjectCommand} from '@aws-sdk/client-s3';import {Readable} from 'stream';import sharp from 'sharp';import util from 'util';import convert from 'heic-convert';const s3 = new S3Client({region: 'ap-northeast-2'});const widths = [80, 500];function parseBucketInfoFromEvent(event) {  console.log(`Event: ${JSON.stringify(event)}`);  const record = event.Records[0].s3;  const srcBucket = record.bucket.name;  const srcKey = decodeURIComponent(record.object.key.replace(/\\+/g, \" \"));  return {    srcBucket,    srcKey,    dstBucket: `${srcBucket}-resized`,    dstKey: `${srcKey}.jpg`,  };}// Fetch object from S3async function fetchObject({bucket, key}) {  const params = {Bucket: bucket, Key: key};  try {    const response = await s3.send(new GetObjectCommand(params));    const contentType = response.ContentType;    console.log(`ContentType: ${contentType}`);    if (!(response.Body instanceof Readable)) {      throw new Error('Expected a stream in the response body');    }    return response;  } catch (error) {    console.error(`Error fetching object ${key} from bucket ${bucket}:`, error);    throw error;  }}function verifyImageType(contentType, dstKey) {  if (!isImage(contentType)) {    throw new Error(`not support contentType = ${contentType} / dstKey = ${dstKey}`);  }}async function processAndUploadImages({  dstBucket,  dstKey,  response}) {  const contentType = response.ContentType;  const contentBuffer = Buffer.concat(await response.Body.toArray());  verifyImageType(contentType, dstKey);  for (const width of widths) {    let processedImageBuffer;    // HEIC 이미지의 경우 변환 처리    if (contentType === 'image/heic') {      console.log(\"heic file\")      const convertedBuffer  = await convertHeicToJpeg(contentBuffer);      processedImageBuffer = await resizeImage(convertedBuffer, width, contentType);    }else{      processedImageBuffer = await resizeImage(contentBuffer, width, contentType);    }    await uploadResizedImage(dstBucket, `${width}/${dstKey}`, processedImageBuffer);  }}// HEIC 이미지를 JPEG로 변환async function convertHeicToJpeg(buffer) {  try {    return await convert({      buffer: buffer, // HEIC 파일의 Buffer      format: 'JPEG', // HEIC to JPEG      quality: 1 // 품질 설정 (0 ~ 1)    });  } catch (error) {    console.error('Error converting HEIC to JPEG:', error);    throw error;  }}// Resize imageasync function resizeImage(buffer, width) {  try {    return sharp(buffer)    .resize(width, null, {fit: 'contain'}) // height 는 width 에 자동적으로 맞춰짐    .jpeg({quality: 80}) // 퀄리티 ( 0 ~ 100 )    .withMetadata() // 원본 metadata 그대로 가지도록 함    .toBuffer();  } catch (error) {    console.error('Error resizing image:', error);    throw error;  }}// Upload resized image to S3async function uploadResizedImage(bucket, key, buffer) {  const params = {    Bucket: bucket,    Key: key,    Body: buffer,    ContentType: 'image/jpeg',  };  try {    await s3.send(new PutObjectCommand(params));    console.log(`Successfully uploaded ${key} to ${bucket}`);  } catch (error) {    console.error(`Error uploading ${key} to ${bucket}:`, error);    throw error;  }}function isImage( contentType) {  return contentType.startsWith(\"image/\");}// Lambda handler functionexport const handler = async (event) =&gt; {  console.log(\"이벤트 처리 중 ... :\", util.inspect(event, {depth: 5}));  const {srcBucket, srcKey, dstBucket, dstKey} = parseBucketInfoFromEvent(event);  const response = await fetchObject({bucket: srcBucket, key: srcKey});  await processAndUploadImages({dstBucket, dstKey, response});};</code></pre><p>의존이 필요한 패키지들은 npm build 를 통해 설치한 후 zip 파일로 압축하여 업로드 한다.</p><p>코드를 간단하게 설명하면</p><ol>  <li>parseBucketInfoFromEvent(event) : 수신괸 S3 Events 로 부터 필요한 정보를 파싱(키, 버킷이름)</li>  <li>fetchObject(bucket, key): 버킷이름와 키를 이용하여 S3에 방급 저장된 이미지를 조회</li>  <li>processAndUploadImages(dstBucket, dstKey, response) : 가져온 이미지를 크기별(80, 500)로 리사이징 한 후 S3에 업로드</li></ol><p>sharp 는 이미지 포맷 변환을 지원한다.</p><p>하지만 HEIC 포멧의 이미지파일인 경우 Nokia의 HEIF 라이브러리 라이센스로 인해 Sharp를 사용하려면 libheif, libde265 및 x265를 지원하도록 컴파일된 전역 설치 libvips를 사용해야 한다고 한다. 관련해서 해결한 <a href=\"https://obviy.us/blog/sharp-heic-on-aws-lambda/\">블로그</a>도 존재하지만, 나는 별도로 HEIC 를 JPG 로 바꾸는 라이브러리를 추가하여 해결했다.</p><p>조회한 이미지의 response.ContentType 의 경우가 “image/heic” 인 경우에는 jpg 로 변환 후 이미지 리사이징 작업을 하도록 했다.</p><h4 id=\"업로드-용-presigneduri-생성-코드\">업로드 용 PresignedURI 생성 코드</h4><p>또 다른 람다함수를 만들고 아래의 코드를 추가한다. 만들 때 역할은 위에서 만든 역할 그대로 사용하였다.</p><pre><code class=\"language-javascript\">import { PutObjectCommand, S3Client } from \"@aws-sdk/client-s3\";import { getSignedUrl, S3RequestPresigner } from \"@aws-sdk/s3-request-presigner\";import { randomUUID } from 'crypto';const REGION = \"리전\";const BUCKET = \"버킷이름\";const createPresignedUrlWithClient = ({ region, bucket, key }) =&gt; {  const client = new S3Client({ region });  const command = new PutObjectCommand({ Bucket: bucket, Key: key });  return getSignedUrl(client, command, { expiresIn: 360000 });};export const handler = async (event, context, callback) =&gt; {        const clientUrl = await createPresignedUrlWithClient({      region: REGION,      bucket: BUCKET,      key: randomUUID(),  \t});        return {      result: \"SUCCESS\",      data: [ clientUrl ]  \t}  }};</code></pre><p>업로드용 PresignedURI 의 경우, 방안4 에 나온 구조에서 보듯이 API Gateway 로 요청이 온 후 연결된 Lambda 함수에서 응답해야 하기 때문에 생성된 presignedUri 를 리턴하고 있다.</p><h3 id=\"api-gateway\">API Gateway</h3><p>이제 PresignedURI 만드는 람다함수를 API 로 노출시키기 위해 먼저 API Gateway를 만들어야 한다.</p><p>API Gateway 생성HTTP API 선택<img src=\"https://velog.velcdn.com/images/kmss6905/post/8720a760-672f-406d-96f8-142b14060b4c/image.png\" alt=\"\" /></p><p>이때 API Gateway가 Lambda 함수를 호출해야하기 때문에, 아까 만든 Lambda 함수를 지정한다.<img src=\"https://velog.velcdn.com/images/kmss6905/post/6af2f1af-ed04-485e-a132-796eea77994d/image.png\" alt=\"\" /></p><p>다음버튼을 눌러 계속 진행한다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/ba8f6638-5da9-4c65-b175-7cfe780e6974/image.png\" alt=\"\" />여기서 API Gateway의 메서드와 경로를 구성할 수 있다. 물론 만들고 나서 수정해도 상관없다. 나는 “GET /image/presigned-uri” 으로 경로를 설정했다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/6ff57e71-e3d7-4fe1-b3a9-a66de61d4e76/image.png\" alt=\"\" /></p><p>마지막으로 스테이지까를 정의한다. 이는 말그대로 스테이지 환경을 정의할 수 있으며 API 스테이지는 API ID 및 스테이지 이름으로 식별되며, API를 호출하는 데 사용되는 URL에 포함됩니다.</p><p>HTTP URI에 스테이지 변수를 사용하여 구성하는 자세한 사용법은 https://docs.aws.amazon.com/ko_kr/apigateway/latest/developerguide/http-api-stages.html 에 있으니 참고바란다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/3de90052-9fde-40b1-b480-01b40cfde42f/image.png\" alt=\"\" />새롭게 생성한 API를 볼 수 있다. 좀 전에 dev 라는 이름의 스테이지 이름을 사용하는 스테이지의 경우에는 현재 자동배포되지 않기 때문에 만약 dev 스테이지에도 배포를 원한다면 우측 상단에 있는 배포 버튼을 클릭하여 배포를 진행하면 된다.</p><p>이제 아래의 경로로 API 호출을 하면https://{app_id}.execute-api.ap-northeast-2.amazonaws.com/image/presigned-uri</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/5af90a8a-ec1f-4ad3-9daa-9247135ccd62/image.png\" alt=\"\" /></p><p>Presigned URI 를 받는 것을 알 수 있다.</p><h3 id=\"번외-api-gateway-사용자-지정-도메인-설정하기\">번외, API Gateway 사용자 지정 도메인 설정하기</h3><p>AWS 에서 제공하는 URI 주소 말고 사용자 지정 도메인 이름을 지정할 수 있다.</p><p>현재 itthatcat.xyz 도메인을 가비아 네임서버에 등록해놓은 상태이고 와일드 카드 인증서를 LetsEncrypted 를 통해 무료로 발급한 상태이다.</p><p>이제 img.itthatcat.xyz 의 새로운 서브도메인을 설정해보자.https://{app_id}.execute-api.ap-northeast-2.amazonaws.com/image/presigned-uri 로 호출하는 것이 아닌https://img.itthatcat.xyz/image/presigned-uri 로 호출할 수 있도록 하자</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/a9232828-2798-4a3b-96f3-f8a25644cf16/image.png\" alt=\"\" /></p><p>도메인 이름에는 사용하고자 하는 도메인 이름을 입력한다. (당연히 사용하고자 하는 도메인에 대해서 구입이 완료되어야 한다.)그리고 해당 도메인에 대해 발급한 인증서가 필요하다.</p><h4 id=\"사용하려고-하는-도메인에-acm-ssl-인증서-발급받기-with-aws가-아닌-다른-네임서버-사용중\">사용하려고 하는 도메인에 ACM SSL 인증서 발급받기 with AWS가 아닌 다른 네임서버 사용중</h4><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/b8530417-8bd5-45a2-ab68-f65d8b0bfac3/image.png\" alt=\"\" /></p><p>인증서의 경우 이미 만든 인증서를 가져와서 사용해도 좋지만, 나는 해당 도메인에 대해서는 새롭게 SSL 인증서를 만들기로 했다. 인증서가 여러개로 분산되어 관리의 포인트가 늘어난 다는 단점이 있지만, AWS ACM에서 만든 인증서의 경우 인증서의 갱신을 자동화할 수 있고 무료이다. 물론 원한다면 외부에서 사용된 인증서를 가져와서 사용할 수 있다. 다만 외부의 인증서의 경우 만료되었을 경우 갱신에 대한 로직은 대신해주지 않는다.<img src=\"https://velog.velcdn.com/images/kmss6905/post/3f3e7209-5812-432f-9911-68567fcabb32/image.png\" alt=\"\" /><img src=\"https://velog.velcdn.com/images/kmss6905/post/2b10859e-4163-40a9-a015-fcaf4f7daf4a/image.png\" alt=\"\" /><img src=\"https://velog.velcdn.com/images/kmss6905/post/96c9f5e4-61a9-4753-810c-85f1404c4667/image.png\" alt=\"\" /></p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/9e559799-443f-4c9f-a016-3acfb5a76bc0/image.png\" alt=\"\" /></p><p>이제 네임 서버에 CNAME 레코드를 만들면 된다. 이를 통해 DNS 검증을 받는 것이다.</p><p>이때 CNAME 레코드 등록시 호스트에는 _21jkddfu2j.img.itthatcat.xyz. 에서 호스트 이름인 _21jkddfu2j.img 까지만 입력해야한다. 그 외는 그대로 입력한다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/f453b237-a6c3-4daa-b9f3-6471e7ae87f8/image.png\" alt=\"\" /></p><p>만약 서브도메인이 아닌경우라면_21jkddfu2j.itthatcat.xyz. 요렇게 될것이다. 그리고 CNAME 레코드 호스트는 _21jkddfu2j 입력하면 된다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/737faa86-0b53-4f58-b85f-5aacd5288ad2/image.png\" alt=\"\" />어느 정도 시간이 지나면 이렇게 “검증 대기중”에서 “발급” 상태로 바뀐 것을 알 수있다.(CNAME 레코드를 추가하고 10분 내로 발급되었다)</p><h4 id=\"사용자지정-도메인-등록하기\">사용자지정 도메인 등록하기</h4><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/d8a9553f-3e64-4bc4-9c0b-b3c2fd0ac836/image.png\" alt=\"\" /></p><p>사용하려고 하는 도메인 이름과 발급받은 ACM 인증서를 등록합니다.</p><h4 id=\"사용자-지정-도메인와-api-gateway-매핑하기\">사용자 지정 도메인와 API Gateway 매핑하기</h4><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/30042006-107c-4c1f-9ec7-04a489474dd3/image.png\" alt=\"\" />이렇게 사용자 지정 도메인에 대해 새로운 API Gateway 도메인 이름이 생겼다.이제 다시 가비아로 돌아와서 DNS 레코드를 추가해야한다. CNAME 레코드를 추가하여 img.itthatcat.xyz 로 접속했을 때 위의 가려진 도메인으로 이동할 수 있도록 해야한다.<img src=\"https://velog.velcdn.com/images/kmss6905/post/335b9fab-2683-42da-80ec-30db8a26c71a/image.png\" alt=\"\" /></p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/a55aad24-b12c-4d93-a321-ae55a0e7949e/image.png\" alt=\"\" /></p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/3df73ed4-3727-46a0-bbda-03a9709f7cad/image.png\" alt=\"\" /></p><p>매핑하려고 하는 API 를 선택한다.</p><p>이제 <code>https://img.itthatcat.xyz/image/presigned-uri</code> 로 요청해보자.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/d970e2c1-7162-44db-9cc8-93065eeb9f67/image.png\" alt=\"\" /></p><p>정상적으로 데이터가 잘 나오는 것을 알 수 있다.</p><h4 id=\"번외\">번외</h4><p>현재는 API Gateway 앞단에 Cloudfront 를 구성한 후 Cloudfront -&gt; API Gateway -&gt; Lambda 로 호출하도록 구성한 상태이다.Cloudfront 역시 API Gateway 와 마찬가지로 AWS 에서 제공하는 도메인 이름이 아닌 새롭게 커스텀 도메인을 사용할 수 있으며 SSL 인증서 적용하는 방식도 같다.</p><hr /><h3 id=\"참고\">참고</h3><p>https://obviy.us/blog/sharp-heic-on-aws-lambda/https://docs.aws.amazon.com/ko_kr/acm/latest/userguide/troubleshooting-DNS-validation.html</p>",
            "url": "http://localhost:4000/2024/02/21/lamda-%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95-%EC%A0%81%EC%9A%A9%EA%B8%B0",
            
            
            
            
            
            "date_published": "2024-02-21T00:00:00+09:00",
            "date_modified": "2024-02-21T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/01/07/java-%EC%9D%98-final-%EC%9D%80-%EC%96%B4%EB%94%94%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C",
            "title": "Java 의 final 은 어디에 사용할 수 있을까?",
            "summary": null,
            "content_text": "2024.01.07 - [java] Java 의 final  예제에서 사용한 모든 코드는 Github Repository 에 있습니다.나는 변하지 않는 전역변수를 만들 때나 생성자의 파라미터를 받을 때 final 키워드를 사용했었다. 문득 final 에 대해 이것 말고 더 쓰이는 곳이 없을까? final에 대해 더 찾아보고 공부한 결과를 기록했다.class A {\t// 변하지 않는 전역변수\tprivate static final INIT_VALUE = 0.1;}email 과 password 를 생성자 파라미터로 받는 Member 클래스의 모습이다.// 생성자의 파라미터public Member(final String email, final String password) {        validateNonNull(email, password);        this.email = email;        this.password = password; }우선 final 은 클래스, 메서드, 변수에 사용할 수 있다.클래스(class)final 이 있는 클래스는 상속하여 사용할 수 없다.public final class Cat {    private int weight;    // standard getter and setter}public class BlackCat extends Cat {}확장을 원하지 않는 경우에 해당 클래스에 final 키워드를 통해 다른 클래스가 상속받아 사용하는 것을 막을 수 있다.단, 클래스에 final이 있다고 해서 final 클래스로 만든 객체가 불변하다는 것을 뜻하는 것은 아니다.즉, 내부의 맴버변수는 얼마든지 바꿀 수 있다.class ClassFinalMainTest {    @Test    @DisplayName(\"final 클래스의 맴버변수는 바꿀 수 있다.\")     void mainTest() {        Moeny moeny = new Moeny();        moeny.setValue(100);        assertEquals(100, moeny.getValue());        assertDoesNotThrow(() -&gt; moeny.setValue(200)); // 예외발생하지 않음.        assertEquals(200, moeny.getValue());    }    final class Moeny {        private int value;        public void setValue(int value) {            this.value = value;        }        public int getValue() {            return value;        }    }}  ![](https://velog.velcdn.com/images/kmss6905/post/83e18ef2-ee70-4c65-af5a-07c36acbf096/image.png)참고로, 인텔리제이에서는 final 클래스의 경우 \"압정표시\"로 상속할 수 없다는 것을 표시해준다.## 메서드(method)final 이 붙은 메서드는 오버라이딩 할 수 없다.부모 클래스에 해당하는 Cat 클래스는 `public`, `private`, `final` 메서드로 각기 다른 \"야옹~\"을 출력하도록 했다.자식 클래스에 해당하는 WhiteCat 가 오버라이딩 할 수 있는 메서드는 `public` 메서드 뿐이다.이렇게 `public` 메서드의 경우 Cat 을 상속하여 오버라이딩을 통해 해당 `meow()` 메서드를 사용할 수 있다.```java// 부모 클래스public class Cat {    private int weight;    public void meow() {        System.out.println(\"누구나 야옹~\");    }    final public void finalMeow() {        System.out.println(\"나만 야옹~\");        }    private void privateMeow() {        System.out.println(\"내부 야옹~\");       }}// 자식 클래스public class WhiteCat extends Cat{    @Override    public void meow() {        System.out.println(\"흰 고양이 야옹\");    }}```만약 자식클래스에서 부모의 final 메서드를 재정의 하려고 시도하면 어떻게 될까?`finalMeow()' cannot override 'finalMeow()' in 'Cat'; overridden method is final` ![](https://velog.velcdn.com/images/kmss6905/post/b3686362-1048-4d20-a745-d13bd812a7a7/image.png)오버라이드한 메서드가 final 이기 때문에 오버라이드를 할 수 없다고 에러 메시지를 띄우고 있다.## 변수(varibles)### 1. 원시변수(Primitive Varibles)final 로 선언한 원시변수에 값을 할당한 후에는, 다른 값을 할당할 수 없다.```java final int i = 1;int i = 2;```i 변수에 1을 할당한 후, 2를 재할당하려고 하면 아래와 같은 에러를 뿜어낸다.이미 위에서 정의되었기 때문에 다시 재할당할 수 없다.!    ---### 2. 참조변수(Reference Varibles)```javafinal User user = new User(\"jimin\");user = new User(\"junguk\");```원시변수의 경우와 마찬가지로 final 로 선언한 참조변수의 경우 역시 다른 참조변수의 할당이 불가능하다.실수로 다른 변수 값으로 바꿔치기 되는 대참사를 막을 수 있다.참고로 user 객체는 불변은 아니다. 즉, 재할당이 불가능한 거지 객체의 내부 변수 값은 바꿀 수 있다.만약 final class 를 이용하여 객체를 생성할 때 해당 변수에 final을 선언하면 어떻게 될까?위의 내용을 다시 정리하자면,1. class 의 final 은 상속이 불가하다라는 것을 의미한다.2. 참조변수의 final은 초기화 후 재할당 할 수 없는 것을 의미한다.   다시 한번 말하지만 해당 클래스 자체를 완전한 불변(immutable)으로 만드는 것은 아니다.따라서 아래의 생성된 객체 내부의 변수(`a`)를 수정하는 건 가능하다.```final class XXXclass{\tprivate int a = 5;}final XXXClass xxxClass = new XXXClass();xxxClass.a = 10; // 수정이 가능하다!!```---### 3. 필드(Field)constant 상수 필드에 사용하거나, 생성자 맴버 변수에 final 을 사용할 수 있다.이 경우 생성자가 완료되기 전에 모든 final 필드를 초기화해야 한다.(즉, 값을 할당해야한다)```javaclass Point{\tprivate static final GLOBAL_POINT = \"10.0;        public changePointToTenDotOne(){    \tthis.GLOBAL_POINT = 10.1; // 이미 위에서 할당했기 떄문에 에러 발생!!    }}```위의 `GLOBAL_POINT` constant 변수는 final 키워드로 인해 재할당이 불가능한 변수가 되었다.`Point.GLOBAL_POINT = \"10.1\"` 로 값을 바꾸려고 시도한다면 컴파일 에러가 난다.![](https://velog.velcdn.com/images/kmss6905/post/776c5300-0757-485a-81b6-0ab61176fdc8/image.png)아래의 코드는 OrderService 가 ProductRepository 를 의존하고 있으며, 생성 시점에 ProductRepository 를 생성자 파라미터로 받아 초기화한다.그리고 `void order(int id)` 의 경우 제품의 번호를 받아 productRepository 로 부터 상품을 조회하도록 한다.```javapublic class OrderService {    private ProductRepository productRepository;    public OrderService(ProductRepository productRepository) {        this.productRepository = productRepository;    }    public void order(int id) {        Product product = productRepository.findId(id);        // etc    }}```따라서 productRepository 는 null 이 되어선 안되고 반드시 초기화`this.productRepostiroy = productRepostirot` 가 되어야한다.만약 실수로 OrderService 생성 시점에 맴버변수 ProductRepository 를 초기화하는 코드를 깜빡 잊었다고 가정해보자. 아래와 같이 작성한다고 해서 컴파일 에러는 나지 않는다.```javapublic class OrderService {    private ProductRepository productRepository;    public OrderService() {    \t    }    public void order(int id) {        Product product = productRepository.findId(id);        // etc    }}```하지만 아래의 코드를 실행하면```javaOrderService orderService = new OrderService();orderService().order(1);```초기화 되지 않은 ProductRepository 를 호출하려고 했기 때문에 `NullPointException` 예외가 터진다.```Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"variablesfinal.field.ProductRepository.findId(int)\" because \"this.productRepository\" is null\tat variablesfinal.field.OrderService.order(OrderService.java:10)\tat variablesfinal.field.OrderMain.main(OrderMain.java:7)```이때 final 키워드를 맴버 변수에 사용한다면 클래스 생성 시점에 강제로 final 키워드가 붙은 맴버변수를 초기화 할 수 있도록 강제할 수 있다. 따라서 최소한 맴버 변수 초기화 하는 것을 깜빡해 `NullPointException`  에러가 나는 것은 막을 수 있다.![](https://velog.velcdn.com/images/kmss6905/post/d9b47b0f-1888-4624-869b-4b3c51f67244/image.png)변수 'productRepository'가 초기화되지 않았을 수 있다고 경고를 보낸다. 따라서 강제로 초기화하여 사용할 수 밖에 없도록 만든다.```javaprivate final ProductRepostiroy productRepository;public OrderService(ProductRepository productRepository){\tthis.productRepository = productRepository;}```---### 4. 메서드 인자(Argument Varibles)메서드의 인자에 final 키워드를 사용할 수 있다.이 경우 받은 인자를 메서드 내부에서 재할당 하여 사용할 수 없다.```javapublic int plus(final int a, final int b){\tint a += b;    return a;}```메서드 인자 중 `a` 는 이미 final로 선언되었기 때문에 `a`에 다른 값을 재할당할 수 없다.final 메서드 인자에 새로운 값을 할당할 수 없기 때문에 새로운 변수를 선언하여 사용해야한다.```javapublic int plus(final int a, final int b){\tint c = a + b;    return c;}```## 요약java 의 final 키워드는 클래스, 메서드, 메서드의 아규먼트, 필드(consant, member varibles) 에 사용가능하다. final 은 말그대로 최종이라는 뜻으로서 재할당을 막는 데 목표를 두고있다.그렇기 때문에 적절한 final 키워드를 사용해서 재할당을 하지 말도록 하는 의미를 들어내도록 사용할 수 있다.특히, 생성자 맴버변수에 final을 사용하게 될 경우, 재할당 뿐만 아니라 생성자 초기화 시 무조건 할당해야 하도록 강제하는 역할을 하기도 한다.### 참조---https://www.baeldung.com/java-final",
            "content_html": "<h1 id=\"20240107---java-java-의-final\">2024.01.07 - [java] Java 의 <code>final</code></h1><blockquote>  <p>예제에서 사용한 모든 코드는 <a href=\"https://github.com/kmss6905/blog/tree/main/_20240107\">Github Repository</a> 에 있습니다.</p></blockquote><p>나는 변하지 않는 전역변수를 만들 때나 생성자의 파라미터를 받을 때 final 키워드를 사용했었다. 문득 final 에 대해 이것 말고 더 쓰이는 곳이 없을까? final에 대해 더 찾아보고 공부한 결과를 기록했다.</p><pre><code class=\"language-java\">class A {\t// 변하지 않는 전역변수\tprivate static final INIT_VALUE = 0.1;}</code></pre><p>email 과 password 를 생성자 파라미터로 받는 Member 클래스의 모습이다.</p><pre><code class=\"language-java\">// 생성자의 파라미터public Member(final String email, final String password) {        validateNonNull(email, password);        this.email = email;        this.password = password; }</code></pre><p>우선 final 은 클래스, 메서드, 변수에 사용할 수 있다.</p><h2 id=\"클래스class\">클래스(class)</h2><p>final 이 있는 클래스는 상속하여 사용할 수 없다.</p><pre><code class=\"language-java\">public final class Cat {    private int weight;    // standard getter and setter}public class BlackCat extends Cat {}</code></pre><p>확장을 원하지 않는 경우에 해당 클래스에 final 키워드를 통해 다른 클래스가 상속받아 사용하는 것을 막을 수 있다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/f64a3029-421e-4add-b1b8-1427671ce17e/image.png\" width=\"70%\" heightv=\"70%\" /></p><p>단, 클래스에 final이 있다고 해서 final 클래스로 만든 객체가 불변하다는 것을 뜻하는 것은 아니다.즉, 내부의 맴버변수는 얼마든지 바꿀 수 있다.</p><pre><code class=\"language-java\">class ClassFinalMainTest {    @Test    @DisplayName(\"final 클래스의 맴버변수는 바꿀 수 있다.\")     void mainTest() {        Moeny moeny = new Moeny();        moeny.setValue(100);        assertEquals(100, moeny.getValue());        assertDoesNotThrow(() -&gt; moeny.setValue(200)); // 예외발생하지 않음.        assertEquals(200, moeny.getValue());    }    final class Moeny {        private int value;        public void setValue(int value) {            this.value = value;        }        public int getValue() {            return value;        }    }}</code></pre><h align=\"center\">  <img src=\"https://velog.velcdn.com/images/kmss6905/post/8e6d87d9-fa5f-4015-9a64-751f5f184dc7/image.png\" width=\"40%\" /><h />![](https://velog.velcdn.com/images/kmss6905/post/83e18ef2-ee70-4c65-af5a-07c36acbf096/image.png)참고로, 인텔리제이에서는 final 클래스의 경우 \"압정표시\"로 상속할 수 없다는 것을 표시해준다.## 메서드(method)final 이 붙은 메서드는 오버라이딩 할 수 없다.부모 클래스에 해당하는 Cat 클래스는 `public`, `private`, `final` 메서드로 각기 다른 \"야옹~\"을 출력하도록 했다.자식 클래스에 해당하는 WhiteCat 가 오버라이딩 할 수 있는 메서드는 `public` 메서드 뿐이다.이렇게 `public` 메서드의 경우 Cat 을 상속하여 오버라이딩을 통해 해당 `meow()` 메서드를 사용할 수 있다.```java// 부모 클래스public class Cat {    private int weight;    public void meow() {        System.out.println(\"누구나 야옹~\");    }    final public void finalMeow() {        System.out.println(\"나만 야옹~\");        }    private void privateMeow() {        System.out.println(\"내부 야옹~\");       }}// 자식 클래스public class WhiteCat extends Cat{    @Override    public void meow() {        System.out.println(\"흰 고양이 야옹\");    }}```만약 자식클래스에서 부모의 final 메서드를 재정의 하려고 시도하면 어떻게 될까?`finalMeow()' cannot override 'finalMeow()' in 'Cat'; overridden method is final` ![](https://velog.velcdn.com/images/kmss6905/post/b3686362-1048-4d20-a745-d13bd812a7a7/image.png)오버라이드한 메서드가 final 이기 때문에 오버라이드를 할 수 없다고 에러 메시지를 띄우고 있다.## 변수(varibles)### 1. 원시변수(Primitive Varibles)final 로 선언한 원시변수에 값을 할당한 후에는, 다른 값을 할당할 수 없다.```java final int i = 1;int i = 2;```i 변수에 1을 할당한 후, 2를 재할당하려고 하면 아래와 같은 에러를 뿜어낸다.이미 위에서 정의되었기 때문에 다시 재할당할 수 없다.!<h align=\"center\">    <img src=\"https://velog.velcdn.com/images/kmss6905/post/2317ff3d-d4a3-4ade-8361-fdd4b990c068/image.png\" width=\"50%\" heigh=\"50%\" /></h>---### 2. 참조변수(Reference Varibles)```javafinal User user = new User(\"jimin\");user = new User(\"junguk\");```<h align=\"center\"><img src=\"https://velog.velcdn.com/images/kmss6905/post/19979a37-0fa3-470d-87b9-57d5d877ebfd/image.png\" width=\"50%\" heigh=\"50%\" /></h>원시변수의 경우와 마찬가지로 final 로 선언한 참조변수의 경우 역시 다른 참조변수의 할당이 불가능하다.실수로 다른 변수 값으로 바꿔치기 되는 대참사를 막을 수 있다.참고로 user 객체는 불변은 아니다. 즉, 재할당이 불가능한 거지 객체의 내부 변수 값은 바꿀 수 있다.만약 final class 를 이용하여 객체를 생성할 때 해당 변수에 final을 선언하면 어떻게 될까?위의 내용을 다시 정리하자면,1. class 의 final 은 상속이 불가하다라는 것을 의미한다.2. 참조변수의 final은 초기화 후 재할당 할 수 없는 것을 의미한다.   다시 한번 말하지만 해당 클래스 자체를 완전한 불변(immutable)으로 만드는 것은 아니다.따라서 아래의 생성된 객체 내부의 변수(`a`)를 수정하는 건 가능하다.```final class XXXclass{\tprivate int a = 5;}final XXXClass xxxClass = new XXXClass();xxxClass.a = 10; // 수정이 가능하다!!```---### 3. 필드(Field)constant 상수 필드에 사용하거나, 생성자 맴버 변수에 final 을 사용할 수 있다.이 경우 생성자가 완료되기 전에 모든 final 필드를 초기화해야 한다.(즉, 값을 할당해야한다)```javaclass Point{\tprivate static final GLOBAL_POINT = \"10.0;        public changePointToTenDotOne(){    \tthis.GLOBAL_POINT = 10.1; // 이미 위에서 할당했기 떄문에 에러 발생!!    }}```위의 `GLOBAL_POINT` constant 변수는 final 키워드로 인해 재할당이 불가능한 변수가 되었다.`Point.GLOBAL_POINT = \"10.1\"` 로 값을 바꾸려고 시도한다면 컴파일 에러가 난다.![](https://velog.velcdn.com/images/kmss6905/post/776c5300-0757-485a-81b6-0ab61176fdc8/image.png)아래의 코드는 OrderService 가 ProductRepository 를 의존하고 있으며, 생성 시점에 ProductRepository 를 생성자 파라미터로 받아 초기화한다.그리고 `void order(int id)` 의 경우 제품의 번호를 받아 productRepository 로 부터 상품을 조회하도록 한다.```javapublic class OrderService {    private ProductRepository productRepository;    public OrderService(ProductRepository productRepository) {        this.productRepository = productRepository;    }    public void order(int id) {        Product product = productRepository.findId(id);        // etc    }}```따라서 productRepository 는 null 이 되어선 안되고 반드시 초기화`this.productRepostiroy = productRepostirot` 가 되어야한다.만약 실수로 OrderService 생성 시점에 맴버변수 ProductRepository 를 초기화하는 코드를 깜빡 잊었다고 가정해보자. 아래와 같이 작성한다고 해서 컴파일 에러는 나지 않는다.```javapublic class OrderService {    private ProductRepository productRepository;    public OrderService() {    \t    }    public void order(int id) {        Product product = productRepository.findId(id);        // etc    }}```하지만 아래의 코드를 실행하면```javaOrderService orderService = new OrderService();orderService().order(1);```초기화 되지 않은 ProductRepository 를 호출하려고 했기 때문에 `NullPointException` 예외가 터진다.```Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"variablesfinal.field.ProductRepository.findId(int)\" because \"this.productRepository\" is null\tat variablesfinal.field.OrderService.order(OrderService.java:10)\tat variablesfinal.field.OrderMain.main(OrderMain.java:7)```이때 final 키워드를 맴버 변수에 사용한다면 클래스 생성 시점에 강제로 final 키워드가 붙은 맴버변수를 초기화 할 수 있도록 강제할 수 있다. 따라서 최소한 맴버 변수 초기화 하는 것을 깜빡해 `NullPointException`  에러가 나는 것은 막을 수 있다.![](https://velog.velcdn.com/images/kmss6905/post/d9b47b0f-1888-4624-869b-4b3c51f67244/image.png)변수 'productRepository'가 초기화되지 않았을 수 있다고 경고를 보낸다. 따라서 강제로 초기화하여 사용할 수 밖에 없도록 만든다.```javaprivate final ProductRepostiroy productRepository;public OrderService(ProductRepository productRepository){\tthis.productRepository = productRepository;}```---### 4. 메서드 인자(Argument Varibles)메서드의 인자에 final 키워드를 사용할 수 있다.이 경우 받은 인자를 메서드 내부에서 재할당 하여 사용할 수 없다.```javapublic int plus(final int a, final int b){\tint a += b;    return a;}```메서드 인자 중 `a` 는 이미 final로 선언되었기 때문에 `a`에 다른 값을 재할당할 수 없다.final 메서드 인자에 새로운 값을 할당할 수 없기 때문에 새로운 변수를 선언하여 사용해야한다.```javapublic int plus(final int a, final int b){\tint c = a + b;    return c;}```## 요약java 의 final 키워드는 클래스, 메서드, 메서드의 아규먼트, 필드(consant, member varibles) 에 사용가능하다. final 은 말그대로 최종이라는 뜻으로서 재할당을 막는 데 목표를 두고있다.그렇기 때문에 적절한 final 키워드를 사용해서 재할당을 하지 말도록 하는 의미를 들어내도록 사용할 수 있다.특히, 생성자 맴버변수에 final을 사용하게 될 경우, 재할당 뿐만 아니라 생성자 초기화 시 무조건 할당해야 하도록 강제하는 역할을 하기도 한다.### 참조---https://www.baeldung.com/java-final</h>",
            "url": "http://localhost:4000/2024/01/07/java-%EC%9D%98-final-%EC%9D%80-%EC%96%B4%EB%94%94%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C",
            
            
            
            
            
            "date_published": "2024-01-07T00:00:00+09:00",
            "date_modified": "2024-01-07T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2023/12/05/java",
            "title": "기초가 탄탄한 자바 개발자가 되기 위해 알아야할 테스트 대역 (Test Double)",
            "summary": "자바 개발자를 위한 테스트 대역(Test Double)에 대한 글에서는 TDD 스타일로 코드 작성 시 의존성과 하위 시스템으로부터 격리하는 방법을 설명합니다. 테스트 대역의 네 가지 종류인 더미, 스텁, 페이크, 목 객체에 대해 각각의 정의와 사용 예제를 제공하며, 각 객체의 장점과 단점도 논의합니다. 특히, 목 객체의 경우 행동 검증을 통해 테스트의 신뢰성을 높일 수 있지만, 과도한 사용은 오히려 테스트를 깨지기 쉽게 만들 수 있음을 경고합니다. 이 글은 자바 개발자가 테스트를 효과적으로 수행하기 위한 기초 지식을 제공합니다.",
            "content_text": "2024.01.07 - [java] Java 의 final  예제에서 사용한 모든 코드는 Github Repository 에 있습니다.나는 변하지 않는 전역변수를 만들 때나 생성자의 파라미터를 받을 때 final 키워드를 사용했었다. 문득 final 에 대해 이것 말고 더 쓰이는 곳이 없을까? final에 대해 더 찾아보고 공부한 결과를 기록했다.class A {\t// 변하지 않는 전역변수\tprivate static final INIT_VALUE = 0.1;}email 과 password 를 생성자 파라미터로 받는 Member 클래스의 모습이다.// 생성자의 파라미터public Member(final String email, final String password) {        validateNonNull(email, password);        this.email = email;        this.password = password; }우선 final 은 클래스, 메서드, 변수에 사용할 수 있다.클래스(class)final 이 있는 클래스는 상속하여 사용할 수 없다.public final class Cat {    private int weight;    // standard getter and setter}public class BlackCat extends Cat {}확장을 원하지 않는 경우에 해당 클래스에 final 키워드를 통해 다른 클래스가 상속받아 사용하는 것을 막을 수 있다.단, 클래스에 final이 있다고 해서 final 클래스로 만든 객체가 불변하다는 것을 뜻하는 것은 아니다.즉, 내부의 맴버변수는 얼마든지 바꿀 수 있다.class ClassFinalMainTest {    @Test    @DisplayName(\"final 클래스의 맴버변수는 바꿀 수 있다.\")     void mainTest() {        Moeny moeny = new Moeny();        moeny.setValue(100);        assertEquals(100, moeny.getValue());        assertDoesNotThrow(() -&gt; moeny.setValue(200)); // 예외발생하지 않음.        assertEquals(200, moeny.getValue());    }    final class Moeny {        private int value;        public void setValue(int value) {            this.value = value;        }        public int getValue() {            return value;        }    }}  ![](https://velog.velcdn.com/images/kmss6905/post/83e18ef2-ee70-4c65-af5a-07c36acbf096/image.png)참고로, 인텔리제이에서는 final 클래스의 경우 \"압정표시\"로 상속할 수 없다는 것을 표시해준다.## 메서드(method)final 이 붙은 메서드는 오버라이딩 할 수 없다.부모 클래스에 해당하는 Cat 클래스는 `public`, `private`, `final` 메서드로 각기 다른 \"야옹~\"을 출력하도록 했다.자식 클래스에 해당하는 WhiteCat 가 오버라이딩 할 수 있는 메서드는 `public` 메서드 뿐이다.이렇게 `public` 메서드의 경우 Cat 을 상속하여 오버라이딩을 통해 해당 `meow()` 메서드를 사용할 수 있다.```java// 부모 클래스public class Cat {    private int weight;    public void meow() {        System.out.println(\"누구나 야옹~\");    }    final public void finalMeow() {        System.out.println(\"나만 야옹~\");        }    private void privateMeow() {        System.out.println(\"내부 야옹~\");       }}// 자식 클래스public class WhiteCat extends Cat{    @Override    public void meow() {        System.out.println(\"흰 고양이 야옹\");    }}```만약 자식클래스에서 부모의 final 메서드를 재정의 하려고 시도하면 어떻게 될까?`finalMeow()' cannot override 'finalMeow()' in 'Cat'; overridden method is final` ![](https://velog.velcdn.com/images/kmss6905/post/b3686362-1048-4d20-a745-d13bd812a7a7/image.png)오버라이드한 메서드가 final 이기 때문에 오버라이드를 할 수 없다고 에러 메시지를 띄우고 있다.## 변수(varibles)### 1. 원시변수(Primitive Varibles)final 로 선언한 원시변수에 값을 할당한 후에는, 다른 값을 할당할 수 없다.```java final int i = 1;int i = 2;```i 변수에 1을 할당한 후, 2를 재할당하려고 하면 아래와 같은 에러를 뿜어낸다.이미 위에서 정의되었기 때문에 다시 재할당할 수 없다.!    ---### 2. 참조변수(Reference Varibles)```javafinal User user = new User(\"jimin\");user = new User(\"junguk\");```원시변수의 경우와 마찬가지로 final 로 선언한 참조변수의 경우 역시 다른 참조변수의 할당이 불가능하다.실수로 다른 변수 값으로 바꿔치기 되는 대참사를 막을 수 있다.참고로 user 객체는 불변은 아니다. 즉, 재할당이 불가능한 거지 객체의 내부 변수 값은 바꿀 수 있다.만약 final class 를 이용하여 객체를 생성할 때 해당 변수에 final을 선언하면 어떻게 될까?위의 내용을 다시 정리하자면,1. class 의 final 은 상속이 불가하다라는 것을 의미한다.2. 참조변수의 final은 초기화 후 재할당 할 수 없는 것을 의미한다.   다시 한번 말하지만 해당 클래스 자체를 완전한 불변(immutable)으로 만드는 것은 아니다.따라서 아래의 생성된 객체 내부의 변수(`a`)를 수정하는 건 가능하다.```final class XXXclass{\tprivate int a = 5;}final XXXClass xxxClass = new XXXClass();xxxClass.a = 10; // 수정이 가능하다!!```---### 3. 필드(Field)constant 상수 필드에 사용하거나, 생성자 맴버 변수에 final 을 사용할 수 있다.이 경우 생성자가 완료되기 전에 모든 final 필드를 초기화해야 한다.(즉, 값을 할당해야한다)```javaclass Point{\tprivate static final GLOBAL_POINT = \"10.0;        public changePointToTenDotOne(){    \tthis.GLOBAL_POINT = 10.1; // 이미 위에서 할당했기 떄문에 에러 발생!!    }}```위의 `GLOBAL_POINT` constant 변수는 final 키워드로 인해 재할당이 불가능한 변수가 되었다.`Point.GLOBAL_POINT = \"10.1\"` 로 값을 바꾸려고 시도한다면 컴파일 에러가 난다.![](https://velog.velcdn.com/images/kmss6905/post/776c5300-0757-485a-81b6-0ab61176fdc8/image.png)아래의 코드는 OrderService 가 ProductRepository 를 의존하고 있으며, 생성 시점에 ProductRepository 를 생성자 파라미터로 받아 초기화한다.그리고 `void order(int id)` 의 경우 제품의 번호를 받아 productRepository 로 부터 상품을 조회하도록 한다.```javapublic class OrderService {    private ProductRepository productRepository;    public OrderService(ProductRepository productRepository) {        this.productRepository = productRepository;    }    public void order(int id) {        Product product = productRepository.findId(id);        // etc    }}```따라서 productRepository 는 null 이 되어선 안되고 반드시 초기화`this.productRepostiroy = productRepostirot` 가 되어야한다.만약 실수로 OrderService 생성 시점에 맴버변수 ProductRepository 를 초기화하는 코드를 깜빡 잊었다고 가정해보자. 아래와 같이 작성한다고 해서 컴파일 에러는 나지 않는다.```javapublic class OrderService {    private ProductRepository productRepository;    public OrderService() {    \t    }    public void order(int id) {        Product product = productRepository.findId(id);        // etc    }}```하지만 아래의 코드를 실행하면```javaOrderService orderService = new OrderService();orderService().order(1);```초기화 되지 않은 ProductRepository 를 호출하려고 했기 때문에 `NullPointException` 예외가 터진다.```Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"variablesfinal.field.ProductRepository.findId(int)\" because \"this.productRepository\" is null\tat variablesfinal.field.OrderService.order(OrderService.java:10)\tat variablesfinal.field.OrderMain.main(OrderMain.java:7)```이때 final 키워드를 맴버 변수에 사용한다면 클래스 생성 시점에 강제로 final 키워드가 붙은 맴버변수를 초기화 할 수 있도록 강제할 수 있다. 따라서 최소한 맴버 변수 초기화 하는 것을 깜빡해 `NullPointException`  에러가 나는 것은 막을 수 있다.![](https://velog.velcdn.com/images/kmss6905/post/d9b47b0f-1888-4624-869b-4b3c51f67244/image.png)변수 'productRepository'가 초기화되지 않았을 수 있다고 경고를 보낸다. 따라서 강제로 초기화하여 사용할 수 밖에 없도록 만든다.```javaprivate final ProductRepostiroy productRepository;public OrderService(ProductRepository productRepository){\tthis.productRepository = productRepository;}```---### 4. 메서드 인자(Argument Varibles)메서드의 인자에 final 키워드를 사용할 수 있다.이 경우 받은 인자를 메서드 내부에서 재할당 하여 사용할 수 없다.```javapublic int plus(final int a, final int b){\tint a += b;    return a;}```메서드 인자 중 `a` 는 이미 final로 선언되었기 때문에 `a`에 다른 값을 재할당할 수 없다.final 메서드 인자에 새로운 값을 할당할 수 없기 때문에 새로운 변수를 선언하여 사용해야한다.```javapublic int plus(final int a, final int b){\tint c = a + b;    return c;}```## 요약java 의 final 키워드는 클래스, 메서드, 메서드의 아규먼트, 필드(consant, member varibles) 에 사용가능하다. final 은 말그대로 최종이라는 뜻으로서 재할당을 막는 데 목표를 두고있다.그렇기 때문에 적절한 final 키워드를 사용해서 재할당을 하지 말도록 하는 의미를 들어내도록 사용할 수 있다.특히, 생성자 맴버변수에 final을 사용하게 될 경우, 재할당 뿐만 아니라 생성자 초기화 시 무조건 할당해야 하도록 강제하는 역할을 하기도 한다.### 참조---https://www.baeldung.com/java-final",
            "content_html": "<h1 id=\"20240107---java-java-의-final\">2024.01.07 - [java] Java 의 <code>final</code></h1><blockquote>  <p>예제에서 사용한 모든 코드는 <a href=\"https://github.com/kmss6905/blog/tree/main/_20240107\">Github Repository</a> 에 있습니다.</p></blockquote><p>나는 변하지 않는 전역변수를 만들 때나 생성자의 파라미터를 받을 때 final 키워드를 사용했었다. 문득 final 에 대해 이것 말고 더 쓰이는 곳이 없을까? final에 대해 더 찾아보고 공부한 결과를 기록했다.</p><pre><code class=\"language-java\">class A {\t// 변하지 않는 전역변수\tprivate static final INIT_VALUE = 0.1;}</code></pre><p>email 과 password 를 생성자 파라미터로 받는 Member 클래스의 모습이다.</p><pre><code class=\"language-java\">// 생성자의 파라미터public Member(final String email, final String password) {        validateNonNull(email, password);        this.email = email;        this.password = password; }</code></pre><p>우선 final 은 클래스, 메서드, 변수에 사용할 수 있다.</p><h2 id=\"클래스class\">클래스(class)</h2><p>final 이 있는 클래스는 상속하여 사용할 수 없다.</p><pre><code class=\"language-java\">public final class Cat {    private int weight;    // standard getter and setter}public class BlackCat extends Cat {}</code></pre><p>확장을 원하지 않는 경우에 해당 클래스에 final 키워드를 통해 다른 클래스가 상속받아 사용하는 것을 막을 수 있다.</p><p><img src=\"https://velog.velcdn.com/images/kmss6905/post/f64a3029-421e-4add-b1b8-1427671ce17e/image.png\" width=\"70%\" heightv=\"70%\" /></p><p>단, 클래스에 final이 있다고 해서 final 클래스로 만든 객체가 불변하다는 것을 뜻하는 것은 아니다.즉, 내부의 맴버변수는 얼마든지 바꿀 수 있다.</p><pre><code class=\"language-java\">class ClassFinalMainTest {    @Test    @DisplayName(\"final 클래스의 맴버변수는 바꿀 수 있다.\")     void mainTest() {        Moeny moeny = new Moeny();        moeny.setValue(100);        assertEquals(100, moeny.getValue());        assertDoesNotThrow(() -&gt; moeny.setValue(200)); // 예외발생하지 않음.        assertEquals(200, moeny.getValue());    }    final class Moeny {        private int value;        public void setValue(int value) {            this.value = value;        }        public int getValue() {            return value;        }    }}</code></pre><h align=\"center\">  <img src=\"https://velog.velcdn.com/images/kmss6905/post/8e6d87d9-fa5f-4015-9a64-751f5f184dc7/image.png\" width=\"40%\" /><h />![](https://velog.velcdn.com/images/kmss6905/post/83e18ef2-ee70-4c65-af5a-07c36acbf096/image.png)참고로, 인텔리제이에서는 final 클래스의 경우 \"압정표시\"로 상속할 수 없다는 것을 표시해준다.## 메서드(method)final 이 붙은 메서드는 오버라이딩 할 수 없다.부모 클래스에 해당하는 Cat 클래스는 `public`, `private`, `final` 메서드로 각기 다른 \"야옹~\"을 출력하도록 했다.자식 클래스에 해당하는 WhiteCat 가 오버라이딩 할 수 있는 메서드는 `public` 메서드 뿐이다.이렇게 `public` 메서드의 경우 Cat 을 상속하여 오버라이딩을 통해 해당 `meow()` 메서드를 사용할 수 있다.```java// 부모 클래스public class Cat {    private int weight;    public void meow() {        System.out.println(\"누구나 야옹~\");    }    final public void finalMeow() {        System.out.println(\"나만 야옹~\");        }    private void privateMeow() {        System.out.println(\"내부 야옹~\");       }}// 자식 클래스public class WhiteCat extends Cat{    @Override    public void meow() {        System.out.println(\"흰 고양이 야옹\");    }}```만약 자식클래스에서 부모의 final 메서드를 재정의 하려고 시도하면 어떻게 될까?`finalMeow()' cannot override 'finalMeow()' in 'Cat'; overridden method is final` ![](https://velog.velcdn.com/images/kmss6905/post/b3686362-1048-4d20-a745-d13bd812a7a7/image.png)오버라이드한 메서드가 final 이기 때문에 오버라이드를 할 수 없다고 에러 메시지를 띄우고 있다.## 변수(varibles)### 1. 원시변수(Primitive Varibles)final 로 선언한 원시변수에 값을 할당한 후에는, 다른 값을 할당할 수 없다.```java final int i = 1;int i = 2;```i 변수에 1을 할당한 후, 2를 재할당하려고 하면 아래와 같은 에러를 뿜어낸다.이미 위에서 정의되었기 때문에 다시 재할당할 수 없다.!<h align=\"center\">    <img src=\"https://velog.velcdn.com/images/kmss6905/post/2317ff3d-d4a3-4ade-8361-fdd4b990c068/image.png\" width=\"50%\" heigh=\"50%\" /></h>---### 2. 참조변수(Reference Varibles)```javafinal User user = new User(\"jimin\");user = new User(\"junguk\");```<h align=\"center\"><img src=\"https://velog.velcdn.com/images/kmss6905/post/19979a37-0fa3-470d-87b9-57d5d877ebfd/image.png\" width=\"50%\" heigh=\"50%\" /></h>원시변수의 경우와 마찬가지로 final 로 선언한 참조변수의 경우 역시 다른 참조변수의 할당이 불가능하다.실수로 다른 변수 값으로 바꿔치기 되는 대참사를 막을 수 있다.참고로 user 객체는 불변은 아니다. 즉, 재할당이 불가능한 거지 객체의 내부 변수 값은 바꿀 수 있다.만약 final class 를 이용하여 객체를 생성할 때 해당 변수에 final을 선언하면 어떻게 될까?위의 내용을 다시 정리하자면,1. class 의 final 은 상속이 불가하다라는 것을 의미한다.2. 참조변수의 final은 초기화 후 재할당 할 수 없는 것을 의미한다.   다시 한번 말하지만 해당 클래스 자체를 완전한 불변(immutable)으로 만드는 것은 아니다.따라서 아래의 생성된 객체 내부의 변수(`a`)를 수정하는 건 가능하다.```final class XXXclass{\tprivate int a = 5;}final XXXClass xxxClass = new XXXClass();xxxClass.a = 10; // 수정이 가능하다!!```---### 3. 필드(Field)constant 상수 필드에 사용하거나, 생성자 맴버 변수에 final 을 사용할 수 있다.이 경우 생성자가 완료되기 전에 모든 final 필드를 초기화해야 한다.(즉, 값을 할당해야한다)```javaclass Point{\tprivate static final GLOBAL_POINT = \"10.0;        public changePointToTenDotOne(){    \tthis.GLOBAL_POINT = 10.1; // 이미 위에서 할당했기 떄문에 에러 발생!!    }}```위의 `GLOBAL_POINT` constant 변수는 final 키워드로 인해 재할당이 불가능한 변수가 되었다.`Point.GLOBAL_POINT = \"10.1\"` 로 값을 바꾸려고 시도한다면 컴파일 에러가 난다.![](https://velog.velcdn.com/images/kmss6905/post/776c5300-0757-485a-81b6-0ab61176fdc8/image.png)아래의 코드는 OrderService 가 ProductRepository 를 의존하고 있으며, 생성 시점에 ProductRepository 를 생성자 파라미터로 받아 초기화한다.그리고 `void order(int id)` 의 경우 제품의 번호를 받아 productRepository 로 부터 상품을 조회하도록 한다.```javapublic class OrderService {    private ProductRepository productRepository;    public OrderService(ProductRepository productRepository) {        this.productRepository = productRepository;    }    public void order(int id) {        Product product = productRepository.findId(id);        // etc    }}```따라서 productRepository 는 null 이 되어선 안되고 반드시 초기화`this.productRepostiroy = productRepostirot` 가 되어야한다.만약 실수로 OrderService 생성 시점에 맴버변수 ProductRepository 를 초기화하는 코드를 깜빡 잊었다고 가정해보자. 아래와 같이 작성한다고 해서 컴파일 에러는 나지 않는다.```javapublic class OrderService {    private ProductRepository productRepository;    public OrderService() {    \t    }    public void order(int id) {        Product product = productRepository.findId(id);        // etc    }}```하지만 아래의 코드를 실행하면```javaOrderService orderService = new OrderService();orderService().order(1);```초기화 되지 않은 ProductRepository 를 호출하려고 했기 때문에 `NullPointException` 예외가 터진다.```Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"variablesfinal.field.ProductRepository.findId(int)\" because \"this.productRepository\" is null\tat variablesfinal.field.OrderService.order(OrderService.java:10)\tat variablesfinal.field.OrderMain.main(OrderMain.java:7)```이때 final 키워드를 맴버 변수에 사용한다면 클래스 생성 시점에 강제로 final 키워드가 붙은 맴버변수를 초기화 할 수 있도록 강제할 수 있다. 따라서 최소한 맴버 변수 초기화 하는 것을 깜빡해 `NullPointException`  에러가 나는 것은 막을 수 있다.![](https://velog.velcdn.com/images/kmss6905/post/d9b47b0f-1888-4624-869b-4b3c51f67244/image.png)변수 'productRepository'가 초기화되지 않았을 수 있다고 경고를 보낸다. 따라서 강제로 초기화하여 사용할 수 밖에 없도록 만든다.```javaprivate final ProductRepostiroy productRepository;public OrderService(ProductRepository productRepository){\tthis.productRepository = productRepository;}```---### 4. 메서드 인자(Argument Varibles)메서드의 인자에 final 키워드를 사용할 수 있다.이 경우 받은 인자를 메서드 내부에서 재할당 하여 사용할 수 없다.```javapublic int plus(final int a, final int b){\tint a += b;    return a;}```메서드 인자 중 `a` 는 이미 final로 선언되었기 때문에 `a`에 다른 값을 재할당할 수 없다.final 메서드 인자에 새로운 값을 할당할 수 없기 때문에 새로운 변수를 선언하여 사용해야한다.```javapublic int plus(final int a, final int b){\tint c = a + b;    return c;}```## 요약java 의 final 키워드는 클래스, 메서드, 메서드의 아규먼트, 필드(consant, member varibles) 에 사용가능하다. final 은 말그대로 최종이라는 뜻으로서 재할당을 막는 데 목표를 두고있다.그렇기 때문에 적절한 final 키워드를 사용해서 재할당을 하지 말도록 하는 의미를 들어내도록 사용할 수 있다.특히, 생성자 맴버변수에 final을 사용하게 될 경우, 재할당 뿐만 아니라 생성자 초기화 시 무조건 할당해야 하도록 강제하는 역할을 하기도 한다.### 참조---https://www.baeldung.com/java-final</h>",
            "url": "http://localhost:4000/2023/12/05/java",
            
            
            
            "tags": ["테스트","테스팅","테스트 대역","Test Double","dummy","stub","fake","mock","더미","스텁","페이크","목","mocking"],
            
            "date_published": "2023-12-05T13:00:00+09:00",
            "date_modified": "2023-12-05T13:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/08/22/unit-testing-embedded-c",
            "title": "Unit Testing Embedded C",
            "summary": null,
            "content_text": "I have been trying to be more thorough in my testing efforts lately. What has always seemed like a big challenge is how to automate testing for source code that is targeting a microcontroller like AVR? I will talk about two sides of this challenge: decoupling and running unit tests.DecouplingI write a lot of code for AVR microcontrollers so the code here will be in that context, but these ideas work equally well for any target. Decoupling means to separate your software into small pieces that are coupled only with a small number of dependencies. A dependency could be a target header file like avr/io.h or it could be another software module that you have written. In either case, keeping the number of dependencies small will improve your chances of successful unit testing.Assume you have a module called relay_control which is intended to turn a relay on if an input value exceeds a threshold and off otherwise. Your relay_control.c file might look like this:#include &lt;avr/io.h&gt;#define THRESHOLD (100)void relay_control(int value) {    if (value &gt; THRESHOLD) {        PORTA |= 1;    } else {        PORTA &amp;= ~1;    }}The relay_control function takes value, compares it to THRESHOLD, and sets bit zero of PORTA high or low accordingly (assuming PA0 is somehow controlling the relay). Of course this is a trivially simple function but imagine some other complicated logic in it’s place. One way to test this function is to compile this using GCC on your development machine while somehow including a mock avr/io.h that defines PORTA in such a way that the test code can determine if the relay is on or off for a range of the value argument passed to relay_control. That requires you to mock the header file which is not always possible. A better way is to use features of the C language to decouple the direct io port access from relay_control so that the relay_control module doesn’t depend on avr/io.h. That way you can test it on your development machine or wherever you want. The new relay_control.c could look something like this:#define THRESHOLD (100)void (*relay_writer)(char relay_on);void relay_control(int value) {    if (relay_writer)         relay_writer(value &gt; THRESHOLD);}The new relay_control.c doesn’t depend on avr/io.h. Instead it depends on a function pointer, relay_writer, that acts as an interface to the hardware. Now the application can implement relay_writer to access the hardware, and your test code can implement it to set a bit in memory to allow you to check the output of the relay_control module. Your application could implement relay_writer like this (perhaps in relay_control_hal.c [relay control hardware abstraction layer]):#include &lt;avr/io.h&gt;extern void (*relay_writer)(char relay_on);void relay_writer_impl(char relay_on) {    if (relay_on) {        PORTA |= 1;    } else {        PORTA &amp;= ~1;    }}void relay_control_init(void) {    relay_writer = relay_writer_impl;}The hardware abstraction layer code is purposfully kept as trivial as possible, it’s only accessing the io port, because the only way to test it is to run it on the target platform (because it depends on avr/io.h). Since it’s so simple you’re not as concerned with testing relay_control_hal.c (trivial hardware access only) as you are with relay_control.c (non-trivial application logic).Now you can write a test, test_relay_control.c, that might look like this:#include &lt;assert.h&gt;#include \"relay_control.h\"char relay_state = 0;void relay_writer_test_impl(char relay_on) {    relay_state = relay_on;}extern void (*relay_writer)(char relay_on);int main(void) {    relay_writer = relay_writer_test_impl;    relay_control(0);    assert(relay_state == 0);    relay_control(1000);    assert(relay_state == 1);    return 0;}Decoupling relay_control.c from the hardware (avr/io.h) has the added benefit that your tests are not constrained by the target environment’s memory or processor limitations. The tests can use the full power of the C language.Now whenever you make a change to relay_control.c you can quickly run the test to make sure that the functionality remains. But how do you run the test?Running unit testsOne way is to use a simple makefile that compiles test_relay_control.c and relay_control.c and then runs the resulting executable. Or you could use a more advanced build system generator like CMake. I recommend using CMake because it gets very tricky very quickly to link up a bunch of .c and .h files in different directories to create an executable with only a makefile. I have only recently learned how to use CMake so please bear with me on this. The solution that I have come up with for running unit tests on windows goes like this:      create a directory somewhere in your project called test        in the test directory create a file called cmakelists.txt    cmakelists.txt:     cmake_minimum_required (VERSION 3.18) project(Test) enable_testing() add_executable(Test      test_relay_control.c      &lt;path to relay_control.c&gt; ) include_directories(&lt;path to relay_control.h&gt;) add_test(NAME Test COMMAND Test)    In this case there is only one test called Test which is generated by the add_executable and add_test commands.    To add another test you would first create your test file another_test.c and add the following lines to cmakelists.txt     add_executable(AnotherTest      another_test.c      &lt;path to another_file_under_test.c&gt; ) include_directories(&lt;path to headers needed by another_test.c&gt;) add_test(NAME AnotherTest COMMAND AnotherTest)        in the test directory create a file called test.sh    test.sh:     if ! [[ -d \"build\" ]]; then     mkdir build fi cd build cmake .. -G\"MinGW Makefiles\" cmake --build . &amp;&amp; ctest -C Debug    In this case I am using the MinGW Makefiles generator for CMake because I run my tests on Windows but I would like to use GCC rather than the default MSVC.  With those steps having been done you can now run test.sh and whatever tests you have defined will be run and the output will show you clearly which have passed and which have failed.Happy testing!",
            "content_html": "<p>I have been trying to be more thorough in my testing efforts lately. What has always seemed like a big challenge is how to automate testing for source code that is targeting a microcontroller like AVR? I will talk about two sides of this challenge: decoupling and running unit tests.</p><h2 id=\"decoupling\">Decoupling</h2><p>I write a lot of code for AVR microcontrollers so the code here will be in that context, but these ideas work equally well for any target. Decoupling means to separate your software into small pieces that are coupled only with a small number of dependencies. A dependency could be a target header file like <code>avr/io.h</code> or it could be another software module that you have written. In either case, keeping the number of dependencies small will improve your chances of successful unit testing.</p><p>Assume you have a module called <code>relay_control</code> which is intended to turn a relay on if an input value exceeds a threshold and off otherwise. Your <code>relay_control.c</code> file might look like this:</p><pre><code>#include &lt;avr/io.h&gt;#define THRESHOLD (100)void relay_control(int value) {    if (value &gt; THRESHOLD) {        PORTA |= 1;    } else {        PORTA &amp;= ~1;    }}</code></pre><p>The <code>relay_control</code> function takes <code>value</code>, compares it to <code>THRESHOLD</code>, and sets bit zero of <code>PORTA</code> high or low accordingly (assuming <code>PA0</code> is somehow controlling the relay). Of course this is a trivially simple function but imagine some other complicated logic in it’s place. One way to test this function is to compile this using GCC on your development machine while somehow including a mock <code>avr/io.h</code> that defines <code>PORTA</code> in such a way that the test code can determine if the relay is on or off for a range of the <code>value</code> argument passed to <code>relay_control</code>. That requires you to mock the header file which is not always possible. A better way is to use features of the C language to decouple the direct io port access from <code>relay_control</code> so that the <code>relay_control</code> module doesn’t depend on <code>avr/io.h</code>. That way you can test it on your development machine or wherever you want. The new <code>relay_control.c</code> could look something like this:</p><pre><code>#define THRESHOLD (100)void (*relay_writer)(char relay_on);void relay_control(int value) {    if (relay_writer)         relay_writer(value &gt; THRESHOLD);}</code></pre><p>The new <code>relay_control.c</code> doesn’t depend on <code>avr/io.h</code>. Instead it depends on a function pointer, <code>relay_writer</code>, that acts as an interface to the hardware. Now the application can implement <code>relay_writer</code> to access the hardware, and your test code can implement it to set a bit in memory to allow you to check the output of the <code>relay_control</code> module. Your application could implement <code>relay_writer</code> like this (perhaps in <code>relay_control_hal.c</code> [relay control hardware abstraction layer]):</p><pre><code>#include &lt;avr/io.h&gt;extern void (*relay_writer)(char relay_on);void relay_writer_impl(char relay_on) {    if (relay_on) {        PORTA |= 1;    } else {        PORTA &amp;= ~1;    }}void relay_control_init(void) {    relay_writer = relay_writer_impl;}</code></pre><p>The hardware abstraction layer code is purposfully kept as trivial as possible, it’s only accessing the io port, because the only way to test it is to run it on the target platform (because it depends on <code>avr/io.h</code>). Since it’s so simple you’re not as concerned with testing <code>relay_control_hal.c</code> (trivial hardware access only) as you are with <code>relay_control.c</code> (non-trivial application logic).</p><p>Now you can write a test, <code>test_relay_control.c</code>, that might look like this:</p><pre><code>#include &lt;assert.h&gt;#include \"relay_control.h\"char relay_state = 0;void relay_writer_test_impl(char relay_on) {    relay_state = relay_on;}extern void (*relay_writer)(char relay_on);int main(void) {    relay_writer = relay_writer_test_impl;    relay_control(0);    assert(relay_state == 0);    relay_control(1000);    assert(relay_state == 1);    return 0;}</code></pre><p>Decoupling <code>relay_control.c</code> from the hardware (<code>avr/io.h</code>) has the added benefit that your tests are not constrained by the target environment’s memory or processor limitations. The tests can use the full power of the C language.</p><p>Now whenever you make a change to <code>relay_control.c</code> you can quickly run the test to make sure that the functionality remains. But how do you run the test?</p><h2 id=\"running-unit-tests\">Running unit tests</h2><p>One way is to use a simple makefile that compiles <code>test_relay_control.c</code> and <code>relay_control.c</code> and then runs the resulting executable. Or you could use a more advanced build system generator like CMake. I recommend using CMake because it gets very tricky very quickly to link up a bunch of <code>.c</code> and <code>.h</code> files in different directories to create an executable with only a makefile. I have only recently learned how to use CMake so please bear with me on this. The solution that I have come up with for running unit tests on windows goes like this:</p><ol>  <li>    <p>create a directory somewhere in your project called <code>test</code></p>  </li>  <li>    <p>in the <code>test</code> directory create a file called <code>cmakelists.txt</code></p>    <p><code>cmakelists.txt</code>:</p>    <pre><code> cmake_minimum_required (VERSION 3.18) project(Test) enable_testing() add_executable(Test      test_relay_control.c      &lt;path to relay_control.c&gt; ) include_directories(&lt;path to relay_control.h&gt;) add_test(NAME Test COMMAND Test)</code></pre>    <p>In this case there is only one test called <code>Test</code> which is generated by the <code>add_executable</code> and <code>add_test</code> commands.</p>    <p>To add another test you would first create your test file <code>another_test.c</code> and add the following lines to <code>cmakelists.txt</code></p>    <pre><code> add_executable(AnotherTest      another_test.c      &lt;path to another_file_under_test.c&gt; ) include_directories(&lt;path to headers needed by another_test.c&gt;) add_test(NAME AnotherTest COMMAND AnotherTest)</code></pre>  </li>  <li>    <p>in the <code>test</code> directory create a file called <code>test.sh</code></p>    <p><code>test.sh</code>:</p>    <pre><code> if ! [[ -d \"build\" ]]; then     mkdir build fi cd build cmake .. -G\"MinGW Makefiles\" cmake --build . &amp;&amp; ctest -C Debug</code></pre>    <p>In this case I am using the <code>MinGW Makefiles</code> generator for CMake because I run my tests on Windows but I would like to use GCC rather than the default MSVC.</p>  </li></ol><p>With those steps having been done you can now run <code>test.sh</code> and whatever tests you have defined will be run and the output will show you clearly which have passed and which have failed.</p><p>Happy testing!</p>",
            "url": "http://localhost:4000/2020/08/22/unit-testing-embedded-c",
            
            
            
            "tags": ["programming","C","coding","software","engineering"],
            
            "date_published": "2020-08-22T00:00:00+09:00",
            "date_modified": "2020-08-22T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/06/29/whole-wheat-sourdough",
            "title": "Whole Wheat Sourdough",
            "summary": null,
            "content_text": "I made bread this past weekend using mostly whole wheat flour and, unlike my prior attempts with whole wheat, I was able to produce something I was proud of. The other attempts were edible, but very heavy. This latest boule is light and fluffy and also has a better crust than even when I bake with while flour. I used the recipe from my last post with just a little more water.Whole Wheat Sourdough recipeingredients  320 g starter  800 g strong flour  560 ml water  10 g saltdirections  mix flour, water, salt, and starter roughly in a bowl  dump it on the counter  knead (should be sticky) until dough can be stretched to translucent  place in a bowl and put it in the fridge for 12 hours  divide dough ball into two halves  shape halves into round balls (fold to form round shape, then drag on counter to tighten skin)  place halves in a flour dusted proving basket or bowl lined with a linen cloth for about 8 hours at room temperature  bake at 450 F on a stone for 40 minutes (cover the boule with a Pyrex bowl for the first 15 minutes)What I did differently this time and what I will change next timeThe failed attempts with whole wheat didn’t work well, in part I believe, because the dough was too dry. The whole wheat flour absorbs a lot of water and is hard to keep wet. This time I used a stone in the oven and covered the boule for the first 15 minutes. The stone and covering improve the crust.Next time I will try 600 g water and also will cover better for the first rise in the fridge. When I took the dough out this time it was a little dry on top. I think covering with a tight fitting lid or plastic will be better than the towel that I used. Another thing I will do differently will be to do the second rise with a real proving basket or just a cloth lined glass bowl. A flour dusted cloth lined bowl has work well for me in the past and for some reason I tried this time without the cloth and the dough was stuck to the bowl so my nicely formed boules were damaged.Happy baking!",
            "content_html": "<p>I made bread this past weekend using mostly whole wheat flour and, unlike my prior attempts with whole wheat, I was able to produce something I was proud of. The other attempts were edible, but very heavy. This latest boule is light and fluffy and also has a better crust than even when I bake with while flour. I used the recipe from my last post with just a little more water.</p><h3 id=\"whole-wheat-sourdough-recipe\">Whole Wheat Sourdough recipe</h3><h4 id=\"ingredients\">ingredients</h4><ul>  <li>320 g starter</li>  <li>800 g strong flour</li>  <li>560 ml water</li>  <li>10 g salt</li></ul><h4 id=\"directions\">directions</h4><ol>  <li>mix flour, water, salt, and starter roughly in a bowl</li>  <li>dump it on the counter</li>  <li>knead (should be sticky) until dough can be stretched to translucent</li>  <li>place in a bowl and put it in the fridge for 12 hours</li>  <li>divide dough ball into two halves</li>  <li>shape halves into round balls (fold to form round shape, then drag on counter to tighten skin)</li>  <li>place halves in a flour dusted proving basket or bowl lined with a linen cloth for about 8 hours at room temperature</li>  <li>bake at 450 F on a stone for 40 minutes (cover the boule with a Pyrex bowl for the first 15 minutes)</li></ol><h3 id=\"what-i-did-differently-this-time-and-what-i-will-change-next-time\">What I did differently this time and what I will change next time</h3><p>The failed attempts with whole wheat didn’t work well, in part I believe, because the dough was too dry. The whole wheat flour absorbs a lot of water and is hard to keep wet. This time I used a stone in the oven and covered the boule for the first 15 minutes. The stone and covering improve the crust.</p><p>Next time I will try 600 g water and also will cover better for the first rise in the fridge. When I took the dough out this time it was a little dry on top. I think covering with a tight fitting lid or plastic will be better than the towel that I used. Another thing I will do differently will be to do the second rise with a real proving basket or just a cloth lined glass bowl. A flour dusted cloth lined bowl has work well for me in the past and for some reason I tried this time without the cloth and the dough was stuck to the bowl so my nicely formed boules were damaged.</p><p>Happy baking!</p>",
            "url": "http://localhost:4000/2020/06/29/whole-wheat-sourdough",
            
            
            
            "tags": ["self","baking","cooking","recipe"],
            
            "date_published": "2020-06-29T00:00:00+09:00",
            "date_modified": "2020-06-29T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2020/05/30/sourdough",
            "title": "Sourdough",
            "summary": null,
            "content_text": "Making bread is a great hobby. It’s can be as simple as you want. It’s delicious. There is infinite room for experimenting and improving your recipes and technique. Until a few weeks ago I had never tried to make bread beyond things like bananna or zuchinni bread. Then someone at work started talking to me about sourdough starter and I decided to try it. Turns out it’s not that hard.I started by making a starter. Since I got my starter working I have made a few loaves from different recipes and they have all turned out great.Making the starterI followed a recipe from King Arthur Flour to make my starter. I used this one because it was one of the simpler ones that I had found.Side note: Something I notice with a lot of sourdough related content on the internet is that a lot of it is very intimidating. It can be hard to find recipes that don’t make it overly complicated. I think the one for starter from KA Flour above is good in that respect. I have found that the process is more forgiving than it might at first appear.Basically to create a starter you mix equal parts flour and water together, adding more daily, until the wild yeast and other critters that live naturally in the flour start to thrive. I started my starter with bleached all purpose flour and filtered water from my reverse osmosis filter. I didn’t have as much activity as the KA recipe said I should after the first few days and I’m not sure if that was because of the bleached flour or not, but regardless after a while I switched to unbleached AP and now my starter (a few weeks old) is very active.I followed the KA starter recipe for about two weeks. For about the first week I was only adding flour and water and then once I had built up a good amount of starter I began discarding about half before feeding. At first I was feeding it every 24 hours. I noticed at the end of 24 hours that a brown liquid began to form on the surface of the starter. That is an alcohol waste product that is created by the critters in the starter. I have read that when you see hooch it means your starter is hungry. At that point I started feeding my starter every 12 hours and I don’t get the hooch anymore.Now I keep my starter in the fridge. Doing that slows its metabolism and allows me feed it only once a week. I have been baking every week so it has worked out well. My process goes something like this: A day or two before I would like to start baking I take the starter out of the fridge. At this point it has been in there about 5 or 6 days and is hungry. I usually have about 200 g of starter at this point. I’ll take half (100 g) and add equal parts water (filtered) and flour (unbleached AP). I do that two or three times (every 12 hours). So if I want to bake on Saturday I’ll take the starter out of the fridge Friday morning and feed it. Then I’ll feed it Friday night and Saturday morning. Then by mid-day Saturday the starter has been fed three times and is ready to use. Ideally I will use about half of the starter for my bake and feed the other half and put it back in the fridge ready for next week.Baking sourdoughOnce I have my active fed starter (mid-day Saturday) it’s time to bake. If you have looked at some sourdough bread recipes you might be a little overwhelmed. In my opinion a lot of them are overly complicated like the starter recipes. What I can gather is the essence of sourdough bread is flour, water, salt, and active starter. There are a lot of people out there measuring out ingredients to the tenth of a gram and other … In my, admittedly limited, experience, it’s not that critical.A simple recipe that has worked well for me came from a video by Patrick Ryan on Youtube called How To Make Sourdough Bread Masterclass. I have reproduced the recipe in text form below for people like me who hate following video instructions. You should check out the video anyway because there is a lot of good info.Even that video, though, talks about doing things like baking the bread in a dutch oven or using pans of water to get just the right amount of steam. Now I’m sure that there are reasons for doing those things that the artisan baker would notice, but in my experience just plopping the dough on a baking sheet and putting it in the oven for 30 minutes makes a damn good loaf of bread. No dutch oven or fancy steaming required.When I learn something new I like to break it down to it’s simplest form so that I can really learn how it works. Something that has troubled me about a lot of the sourdough recipes I have found online is that they make it hard to understand the essence of sourdough (flour, water, salt, starter). I like Patrick Ryan’s video and recipe because he keeps it simple and unpretentious. It’s just bread and it’s really not that hard.Sourdough recipe from Patrick Ryan’s videoingredients  320 g starter  800 g strong flour  460 ml water  10 g saltdirections  mix flour, water, salt, and starter roughly in a bowl  dump it on the counter  knead (should be sticky) until dough can be streched to translucent  place in a bowl to rise for 3 hours  re-form dough into a round ball (knock all the air from it)  divide dough ball into two halves  shape halves into round balls (fold to form round shape, then drag on counter to tighten skin)  place halves in a flour dusted proving basket or bowl for 3 hours or overnight in the fridge (dough should not collapse when touched, should be “on the rise”)  score the loaves  bake covered at 450 F for 25 minutes or until looking yummy",
            "content_html": "<p>Making bread is a great hobby. It’s can be as simple as you want. It’s delicious. There is infinite room for experimenting and improving your recipes and technique. Until a few weeks ago I had never tried to make bread beyond things like bananna or zuchinni bread. Then someone at work started talking to me about sourdough starter and I decided to try it. Turns out it’s not that hard.</p><p>I started by making a starter. Since I got my starter working I have made a few loaves from different recipes and they have all turned out great.</p><h3 id=\"making-the-starter\">Making the starter</h3><p>I followed a <a href=\"https://www.kingarthurflour.com/recipes/sourdough-starter-recipe\">recipe from King Arthur Flour</a> to make my starter. I used this one because it was one of the simpler ones that I had found.</p><p>Side note: Something I notice with a lot of sourdough related content on the internet is that a lot of it is very intimidating. It can be hard to find recipes that don’t make it overly complicated. I think the one for starter from KA Flour above is good in that respect. I have found that the process is more forgiving than it might at first appear.</p><p>Basically to create a starter you mix equal parts flour and water together, adding more daily, until the wild yeast and other critters that live naturally in the flour start to thrive. I started my starter with bleached all purpose flour and filtered water from my reverse osmosis filter. I didn’t have as much activity as the KA recipe said I should after the first few days and I’m not sure if that was because of the bleached flour or not, but regardless after a while I switched to unbleached AP and now my starter (a few weeks old) is very active.</p><p>I followed the KA starter recipe for about two weeks. For about the first week I was only adding flour and water and then once I had built up a good amount of starter I began discarding about half before feeding. At first I was feeding it every 24 hours. I noticed at the end of 24 hours that a brown liquid began to form on the surface of the starter. That is an alcohol waste product that is created by the critters in the starter. I have read that when you see hooch it means your starter is hungry. At that point I started feeding my starter every 12 hours and I don’t get the hooch anymore.</p><p>Now I keep my starter in the fridge. Doing that slows its metabolism and allows me feed it only once a week. I have been baking every week so it has worked out well. My process goes something like this: A day or two before I would like to start baking I take the starter out of the fridge. At this point it has been in there about 5 or 6 days and is hungry. I usually have about 200 g of starter at this point. I’ll take half (100 g) and add equal parts water (filtered) and flour (unbleached AP). I do that two or three times (every 12 hours). So if I want to bake on Saturday I’ll take the starter out of the fridge Friday morning and feed it. Then I’ll feed it Friday night and Saturday morning. Then by mid-day Saturday the starter has been fed three times and is ready to use. Ideally I will use about half of the starter for my bake and feed the other half and put it back in the fridge ready for next week.</p><h3 id=\"baking-sourdough\">Baking sourdough</h3><p>Once I have my active fed starter (mid-day Saturday) it’s time to bake. If you have looked at some sourdough bread recipes you might be a little overwhelmed. In my opinion a lot of them are overly complicated like the starter recipes. What I can gather is the essence of sourdough bread is flour, water, salt, and active starter. There are a lot of people out there measuring out ingredients to the tenth of a gram and other … In my, admittedly limited, experience, it’s not that critical.</p><p>A simple recipe that has worked well for me came from a video by Patrick Ryan on Youtube called <a href=\"https://youtu.be/2FVfJTGpXnU\">How To Make Sourdough Bread Masterclass</a>. I have reproduced the recipe in text form below for people like me who hate following video instructions. You should check out the video anyway because there is a lot of good info.</p><p>Even that video, though, talks about doing things like baking the bread in a dutch oven or using pans of water to get just the right amount of steam. Now I’m sure that there are reasons for doing those things that the artisan baker would notice, but in my experience just plopping the dough on a baking sheet and putting it in the oven for 30 minutes makes a damn good loaf of bread. No dutch oven or fancy steaming required.</p><p>When I learn something new I like to break it down to it’s simplest form so that I can really learn how it works. Something that has troubled me about a lot of the sourdough recipes I have found online is that they make it hard to understand the essence of sourdough (flour, water, salt, starter). I like Patrick Ryan’s video and recipe because he keeps it simple and unpretentious. It’s just bread and it’s really not that hard.</p><h3 id=\"sourdough-recipe-from-patrick-ryans-video\">Sourdough recipe from Patrick Ryan’s video</h3><h4 id=\"ingredients\">ingredients</h4><ul>  <li>320 g starter</li>  <li>800 g strong flour</li>  <li>460 ml water</li>  <li>10 g salt</li></ul><h4 id=\"directions\">directions</h4><ol>  <li>mix flour, water, salt, and starter roughly in a bowl</li>  <li>dump it on the counter</li>  <li>knead (should be sticky) until dough can be streched to translucent</li>  <li>place in a bowl to rise for 3 hours</li>  <li>re-form dough into a round ball (knock all the air from it)</li>  <li>divide dough ball into two halves</li>  <li>shape halves into round balls (fold to form round shape, then drag on counter to tighten skin)</li>  <li>place halves in a flour dusted proving basket or bowl for 3 hours or overnight in the fridge (dough should not collapse when touched, should be “on the rise”)</li>  <li>score the loaves</li>  <li>bake covered at 450 F for 25 minutes or until looking yummy</li></ol>",
            "url": "http://localhost:4000/2020/05/30/sourdough",
            
            
            
            "tags": ["self","baking","cooking","recipe"],
            
            "date_published": "2020-05-30T00:00:00+09:00",
            "date_modified": "2020-05-30T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2019/07/31/honeymoon",
            "title": "Honeymoon",
            "summary": null,
            "content_text": "Kaitlin and I decided to go to Marseille for our honeymoon. We probably could have started planning earlier, and planned more, but in the end it was an amazing time.Day 1        Kaitlin and I arriving at our AirbnbWe stayed at a wonderful loft apartment hosted by Agnès. It was in a cool old building (like most buildings there) with three or four apartments that Agnès rented out. We arrived at the apartment around 11:00 am. It wasn’t ready yet, but Agnès gave us refreshments (it was hot) and pointed out interesting areas of the city on some maps. As we waited for her to get the apartment ready we walked to a nearby restaurant, Monsieur Madame, for lunch. After lunch we walked to le Vieux-Port de Marseille (the Old Port of Marseille). It’s the main port in the center of the city.        Kaitlin and I under the mirror cieling at le Vieux-PortWe checked out the shops and scenery at la Vieux-Port and then walked back to the apartment to get some rest after a long day travelling.        Kaitlin at the front door of Maison PépouzeWhen we got back to the apartment Agnès had set up our budget air conditioner. It was a frozen water bottle, sitting in a tray to catch the condensation, in front of a fan. This was when it set in that the apartment didn’t have air conditioning and it was in the 90s (30 C). We were tired enough that it didn’t matter.Day 2We woke up with croissants and pain au chocolat (literally chocolate bread but more like chocolate croissants). It’s a French stereotype, but this was a common breakfast over there. We made some espresso, ate, and started getting ready for the day. We started with a short walk to a bus station near the appartment. The bus arrived and I awkwardly bought tickets from the driver (deux billet š’il vous plaît). We rode that bus for a few minutes and got off where we were supposed to transfer to another bus, but we decided to take rental scooters instead. A 15 minute scooter ride and another short bus ride later and we arrived at Callelongue, a small town at the Southern tip of Marseille on the edge of Parc national des Calanques. The calanques are basically narrow, steep walled inlets along the Mediterranean coast. We stopped for some sparkling water and then started hiking.        Kaitlin looking amazing at Parc national des CalanquesWe hiked for a while, relaxed at a secluded beach (Calanque de Marseilleveyre), and then hiked back to Callelongue where we caught the same busses back to the aparment. Later that night we got dinner at a super cute Egyptian restaurant. I had a whole fish.        Kaitlin at La Cantine de Nour d'EgyptDay 3After we woke we walked to a nearby bakery to get the French breakfast. Unfortunately, we were late and they were out of croissants! Oh well. We got a baguette instead. Another French stereotype that is based in at least a little truth is the popularity of the baguette. I guess about one in every four people we saw on the street was carrying or actively eating a baguette. After breakfast we took scooters to MuCEM (Museum of Civilizations of Europe and the Mediterranean). It is a beautiful building in a beautiful location and the exhibits were interesting too.The oldest district in the city, Le Panier, is adjacent to the museum. After we left the museum we walked around Le Panier for a while. Most of Marseille feels old, but Le Panier especially so. The streets are too narrow for cars and mostly paved with blocks. There are a lot of interesting shops and restaurants packed in. We made dinner reservations at a highly rated restaurant Au Coeur du Panier (in the heart of the basket), and then got lunch at an African place, Marafiki Coin Tropical, where the best they had for Kait was some kind of a salad, but I got another whole fish with fried plantains (yum).        Kaitlin at Marafiki Coin TropicalAfter lunch we checked out the nearby mall (Les Terrasses Du Port) which aside from being gigantic was a pretty standard and boring mall. We got ice cream and took the tram back to the apartment for a nap. Later that day we went back down to Le Panier for our dinner. I had Coquilles St Jacques snackées (scallops) and Kait had some kind of cheesy potatoes. A little wandering and a tram ride later and we were back at the apartment for bed.Day 4Croissants for breakfast again, followed by a bus ride to the rental car place to pick up our rental. We had planned a trip for the next day, but were picking up the car a day early. The car we got was a little 5 speed Peugeot that was a blast to drive. Driving in Marseille was nerve wracking, but once we were on the highway it was not very different from driving in the United States. We headed from the car rental to Cassis, a smaller town just east of Marseille. Cassis is known for its wine making and the road overlooking the wineries when driving in was great. We weren’t there for the wine though. We stopped at a store for supplies, found a parking spot as close as possible, and started hiking toward a calanque on the East end of Parc national des Calanques called Calanque d’En-Vau. This calanque is particularly beautiful, but also quite secluded. The hike was long and hot so it felt great to relax on the beach and swim a little.        On the beach at Calanque d'En-VauThe hike back to the car finished us off and we went back to the apartment for sleep. We still hadn’t fully recovered from the flight at this point.Day 5Friday morning we had our typical breakfast of croissants and espresso earlier than usual and then started driving toward Lourmarin, a small town about an hour north of Marseille. In preparation for this trip one of the things we did was watch Anthony Bourdain’s Parts Unknown episode in Marseille. Of course he checks out a lot of restaurants in the city, some of which we also put on our list, but he also rented a car (his car was much cooler than ours) and drove to Lourmarin for the Friday morning market. Driving through the French countryside was a beautiful and fun. The market at Lourmarin was amazing. We bought some gifts for people back home like olive oil, honey, and ginger, and we bought ourselves some treats.        Kaitlin shopping in LourmarinWe said bye to Lourmarin and headed back to Marseille. One of the places Anthony Bourdain recommended was a food truck called Pizza JD. We grabbed some pizza and started driving into the national park to check out Calanque De Morgiou. It took an interesting drive down a narrow, winding mountain road to get there. There was a cute town at the end of the road on the water. We parked there and walked to a private spot on the rocks where we ate our pizza, swam a little, and watched the sunset.        Sunset at Calanque De MorgiouDay 6On day 6 we dropped the car off and walked around the Basilique Notre-Dame-de-la-Garde. It’s a giant, old curch on a hight point. There are small model boats hanging from the ceiling inside. I guess sailors used to leave them as tribute to the mother of Christ who saved them from shipwreck. Notre-Dame-de-la-Garde still has bullet holes from WW2.        View from Notre-Dame-de-la-GardeDay 7Day 7 was spent mostly walking around the area around Vieux Port. We got lunch at another Anthony Bourdain recommended restaurant Le Fémina.Day 8This was the most interesting day for me. We had our usual breakfast at the apartment, took the tram to Vieux-Port, had second breakfast at a cute little cafe overlooking the port, and then boarded the Goelette Alliance.        On the Goelette AllianceThe Alliance is an old fishing boat turned sail boat that goes out for tours of the Mediterranean coast near Marseille. We set out, motoring and not sailing, around 10:30 am and headed east. At about 1 pm we arrived at Calanque de Sugiton. The Alliance provided a tasty cold lunch and we took some time to swim. At this point in the trip the temperature had dropped a lot and the water was now too cool for me, but I did get in for at least a few seconds.        On the Goelette AllianceAfter the break we started heading back to Marseille. On the way we passed close to Château d’If, where part of the novel The Count of Monte Cristo was set. Later that night we failed a second time to eat at Bourdain’s recommended Cafe de L’Abbaye (didn’t serve dinner) so we got Italian instead.Day 10Day 10 was mostly spent finding gifts for people back home. We got some cool prints from Le Typo du Panier and a few bottles of wine from Cassis. Finally we were able to get lunch at Cafe de L’Abbaye. That night we packed up for the trip back home.Marseille is a great place to visit. I would highly recommend checking it out. Thanks for reading.See more photos here.",
            "content_html": "<p>Kaitlin and I decided to go to Marseille for our honeymoon. We probably could have started planning earlier, and planned more, but in the end it was an amazing time.</p><h1 id=\"day-1\">Day 1</h1><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-22-Just-Arrived-in-Marseille.jpg\" alt=\"Kaitlin and I arriving at our Airbnb\" />    <figcaption>Kaitlin and I arriving at our Airbnb</figcaption></figure><p>We stayed at a wonderful <a href=\"https://www.airbnb.com/rooms/18008888?s=67&amp;shared_item_type=1&amp;virality_entry_point=1&amp;sharer_id=240584451&amp;unique_share_id=5d008c1b-dc50-45c3-afd4-12a609dc6f14\">loft apartment</a> hosted by Agnès. It was in a cool old building (like most buildings there) with three or four apartments that Agnès rented out. We arrived at the apartment around 11:00 am. It wasn’t ready yet, but Agnès gave us refreshments (it was <strong>hot</strong>) and pointed out interesting areas of the city on some maps. As we waited for her to get the apartment ready we walked to a nearby restaurant, <a href=\"https://www.facebook.com/Monsieur-Madame-853998998003356/\">Monsieur Madame</a>, for lunch. After lunch we walked to le Vieux-Port de Marseille (the Old Port of Marseille). It’s the main port in the center of the city.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-22-Vieux-Port-Mirror-Ceiling.jpg\" alt=\"Kaitlin and I under the mirror cieling at le Vieux-Port\" />    <figcaption>Kaitlin and I under the mirror cieling at le Vieux-Port</figcaption></figure><p>We checked out the shops and scenery at la Vieux-Port and then walked back to the apartment to get some rest after a long day travelling.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-22-Marseille-Airbnb-Front-Door.jpg\" alt=\"Kaitlin at the front door of Maison Pépouze\" />    <figcaption>Kaitlin at the front door of Maison Pépouze</figcaption></figure><p>When we got back to the apartment Agnès had set up our budget air conditioner. It was a frozen water bottle, sitting in a tray to catch the condensation, in front of a fan. This was when it set in that the apartment didn’t have air conditioning and it was in the 90s (30 C). We were tired enough that it didn’t matter.</p><h1 id=\"day-2\">Day 2</h1><p>We woke up with croissants and pain au chocolat (literally chocolate bread but more like chocolate croissants). It’s a French stereotype, but this was a common breakfast over there. We made some espresso, ate, and started getting ready for the day. We started with a short walk to a bus station near the appartment. The bus arrived and I awkwardly bought tickets from the driver (deux billet š’il vous plaît). We rode that bus for a few minutes and got off where we were supposed to transfer to another bus, but we decided to take rental scooters instead. A 15 minute scooter ride and another short bus ride later and we arrived at Callelongue, a small town at the Southern tip of Marseille on the edge of Parc national des Calanques. The calanques are basically narrow, steep walled inlets along the Mediterranean coast. We stopped for some sparkling water and then started hiking.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-23-Hiking-in-the-Calanques.jpg\" alt=\"Kaitlin looking amazing at Parc national des Calanques\" />    <figcaption>Kaitlin looking amazing at Parc national des Calanques</figcaption></figure><p>We hiked for a while, relaxed at a secluded beach (Calanque de Marseilleveyre), and then hiked back to Callelongue where we caught the same busses back to the aparment. Later that night we got dinner at a super cute Egyptian restaurant. I had a whole fish.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-23-La-Cantine-de-Nour-d'Egypte.jpg\" alt=\"Kaitlin at La Cantine de Nour d'Egypt\" />    <figcaption>Kaitlin at La Cantine de Nour d'Egypt</figcaption></figure><h1 id=\"day-3\">Day 3</h1><p>After we woke we walked to a nearby bakery to get the French breakfast. Unfortunately, we were late and they were out of croissants! Oh well. We got a baguette instead. Another French stereotype that is based in at least a little truth is the popularity of the baguette. I guess about one in every four people we saw on the street was carrying or actively eating a baguette. After breakfast we took scooters to MuCEM (Museum of Civilizations of Europe and the Mediterranean). It is a beautiful building in a beautiful location and the exhibits were interesting too.</p><p>The oldest district in the city, Le Panier, is adjacent to the museum. After we left the museum we walked around Le Panier for a while. Most of Marseille feels old, but Le Panier especially so. The streets are too narrow for cars and mostly paved with blocks. There are a lot of interesting shops and restaurants packed in. We made dinner reservations at a highly rated restaurant Au Coeur du Panier (in the heart of the basket), and then got lunch at an African place, Marafiki Coin Tropical, where the best they had for Kait was some kind of a salad, but I got another whole fish with fried plantains (yum).</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-24-Kaitlin-at-Marafiki-Coin-Tropical.jpg\" alt=\"Kaitlin at Marafiki Coin Tropical\" />    <figcaption>Kaitlin at Marafiki Coin Tropical</figcaption></figure><p>After lunch we checked out the nearby mall (Les Terrasses Du Port) which aside from being gigantic was a pretty standard and boring mall. We got ice cream and took the tram back to the apartment for a nap. Later that day we went back down to Le Panier for our dinner. I had Coquilles St Jacques snackées (scallops) and Kait had some kind of cheesy potatoes. A little wandering and a tram ride later and we were back at the apartment for bed.</p><h1 id=\"day-4\">Day 4</h1><p>Croissants for breakfast again, followed by a bus ride to the rental car place to pick up our rental. We had planned a trip for the next day, but were picking up the car a day early. The car we got was a little 5 speed Peugeot that was a blast to drive. Driving in Marseille was nerve wracking, but once we were on the highway it was not very different from driving in the United States. We headed from the car rental to Cassis, a smaller town just east of Marseille. Cassis is known for its wine making and the road overlooking the wineries when driving in was great. We weren’t there for the wine though. We stopped at a store for supplies, found a parking spot as close as possible, and started hiking toward a calanque on the East end of Parc national des Calanques called Calanque d’En-Vau. This calanque is particularly beautiful, but also quite secluded. The hike was long and hot so it felt great to relax on the beach and swim a little.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-25-Relaxing-in-the-Calanques.jpg\" alt=\"On the beach at Calanque d'En-Vau\" />    <figcaption>On the beach at Calanque d'En-Vau</figcaption></figure><p>The hike back to the car finished us off and we went back to the apartment for sleep. We still hadn’t fully recovered from the flight at this point.</p><h1 id=\"day-5\">Day 5</h1><p>Friday morning we had our typical breakfast of croissants and espresso earlier than usual and then started driving toward Lourmarin, a small town about an hour north of Marseille. In preparation for this trip one of the things we did was watch Anthony Bourdain’s Parts Unknown episode in Marseille. Of course he checks out a lot of restaurants in the city, some of which we also put on our list, but he also rented a car (his car was much cooler than ours) and drove to Lourmarin for the Friday morning market. Driving through the French countryside was a beautiful and fun. The market at Lourmarin was amazing. We bought some gifts for people back home like olive oil, honey, and ginger, and we bought ourselves some treats.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-26-Lourmarin-Market.jpg\" alt=\"Kaitlin shopping in Lourmarin\" />    <figcaption>Kaitlin shopping in Lourmarin</figcaption></figure><p>We said bye to Lourmarin and headed back to Marseille. One of the places Anthony Bourdain recommended was a food truck called Pizza JD. We grabbed some pizza and started driving into the national park to check out Calanque De Morgiou. It took an interesting drive down a narrow, winding mountain road to get there. There was a cute town at the end of the road on the water. We parked there and walked to a private spot on the rocks where we ate our pizza, swam a little, and watched the sunset.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-26-Calanque-Sunset.jpg\" alt=\"Sunset at Calanque De Morgiou\" />    <figcaption>Sunset at Calanque De Morgiou</figcaption></figure><h1 id=\"day-6\">Day 6</h1><p>On day 6 we dropped the car off and walked around the Basilique Notre-Dame-de-la-Garde. It’s a giant, old curch on a hight point. There are small model boats hanging from the ceiling inside. I guess sailors used to leave them as tribute to the mother of Christ who saved them from shipwreck. Notre-Dame-de-la-Garde still has bullet holes from WW2.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-27-Notre-Dame-de-la-Garde.jpg\" alt=\"View from Notre-Dame-de-la-Garde\" />    <figcaption>View from Notre-Dame-de-la-Garde</figcaption></figure><h1 id=\"day-7\">Day 7</h1><p>Day 7 was spent mostly walking around the area around Vieux Port. We got lunch at another Anthony Bourdain recommended restaurant Le Fémina.</p><h1 id=\"day-8\">Day 8</h1><p>This was the most interesting day for me. We had our usual breakfast at the apartment, took the tram to Vieux-Port, had second breakfast at a cute little cafe overlooking the port, and then boarded the Goelette Alliance.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-29-Kaitlin-Sailing.jpg\" alt=\"On the Goelette Alliance\" />    <figcaption>On the Goelette Alliance</figcaption></figure><p>The Alliance is an old fishing boat turned sail boat that goes out for tours of the Mediterranean coast near Marseille. We set out, motoring and not sailing, around 10:30 am and headed east. At about 1 pm we arrived at Calanque de Sugiton. The Alliance provided a tasty cold lunch and we took some time to swim. At this point in the trip the temperature had dropped a lot and the water was now too cool for me, but I did get in for at least a few seconds.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-29-Colin-and-Kaitlin-Sailing.jpg\" alt=\"On the Goelette Alliance\" />    <figcaption>On the Goelette Alliance</figcaption></figure><p>After the break we started heading back to Marseille. On the way we passed close to Château d’If, where part of the novel The Count of Monte Cristo was set. Later that night we failed a second time to eat at Bourdain’s recommended Cafe de L’Abbaye (didn’t serve dinner) so we got Italian instead.</p><h1 id=\"day-10\">Day 10</h1><p>Day 10 was mostly spent finding gifts for people back home. We got some cool prints from Le Typo du Panier and a few bottles of wine from Cassis. Finally we were able to get lunch at Cafe de L’Abbaye. That night we packed up for the trip back home.</p><p>Marseille is a great place to visit. I would highly recommend checking it out. Thanks for reading.</p><p>See more photos <a href=\"/gallery\">here</a>.</p>",
            "url": "http://localhost:4000/2019/07/31/honeymoon",
            
            
            
            "tags": ["self","wedding","wife","family","honeymoon","vacation","france"],
            
            "date_published": "2019-07-31T00:00:00+09:00",
            "date_modified": "2019-07-31T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2019/07/20/wedding",
            "title": "Wedding",
            "summary": null,
            "content_text": "I proposed to Kaitlin around the middle of August 2018. I was nervous. Thankfully she said yes. I wasn’t surprised; we had discussed marriage. I had asked her dad for permission the previous day so I think she saw it coming. We decided to have the wedding in the Summer of 2019 and started looking for locations immediately.        Kaitlin and I at Cliff Bells not long after getting engagedWe looked at a few locations and decided to have the wedding and reception at the Scarab Club in Detroit. It’s an awesome art gallery right behind the DIA.        Scarab Club front doorWe have all heard nightmare stories about wedding planning, but I am lucky and Kaitlin is amazing. She handled mostly everything with relatively little stress. It all came together just right as the day approached.        Invite and ringsFinally the day had arrived. When we first visited the gallery the exhibit was photos of gross conditions in restaurants taken by a former health inspector. It was interesting but not wedding material. Fortunately the exhibit for our day was more appropriate:        Wedding day exhibitKaitlin’s day started earlier than mine. She had a lot more preparation to do. She had her hair, makeup, and nails done and arrived at the Scarab Club looking beautiful and started the finishing touches.        Kaitlin getting ready        Still getting ready...        Ready!I arrived shortly after she did and after I nervously helped set up tables and chairs I too went upstairs to get ready.        My dad helping with my cuff linksWhen we were both ready I waited in the lounge for Kaitlin so we could get some first look photos. I couldn’t believe my eyes! She was even more stunning than usual. These are some of our favorite photos from the day.        First lookThen it was time for the ceremony. All our guests were seated in the garden, and our amazing officiant Josh was waiting at the altar. We hadn’t rehearsed anything, but even so the ceremony went smoothly. We started the music (La Vie En Rose by Louis Armstrong), I walked out and down to Josh, then Kaitlin’s dad guided her to me.        Beginning of the ceremonyJosh had a few well chosen words, Kaitlin and I exchanged vows and rings, and then we kissed as husband and wife!        Husband and wifeAfter the ceremony Kaitlin and I signed our marriage certificate and took some time for family photos. When we were done with that we made our entrance to the gallery as husband and wife and we each had a glass of sparkling juice. Then our friend Ang announced our first dance and started the music (Never In My Wildest Dreams by Dan Aurbach) and we started our dance. This was one of the best parts of the day for me. A friend had taught us a few rumba moves to do and we had a blast showing off to everyone. It was very special.        First danceThen Kaitlin danced with her dad and I danced with my mom.        Father daughter dance        Mother son danceAfter the special dances we all went upstairs to the lounge for cake. Our cake was a two tier plain cheesecake accompanied by raspberry and fudge swirl cheesecakes. It was amazing. I was tempted to smash a piece in Kait’s face, but I was chicken.        Cake cuttingI was very nervous for everything up to this point. It felt like a performance that Kait and I were putting on. We planned and practiced which helped me feel more confident but that feeling never left. After cutting the cake I felt relief that the scripted part of the day was over. The rest of the night was the best party I have ever been to. We danced, talked, laughed, and cried. It was the best day of my life by far.        Dancing        Dancing        DancingThere are more pictures here. Thanks for reading.",
            "content_html": "<p>I proposed to Kaitlin around the middle of August 2018. I was nervous. Thankfully she said yes. I wasn’t surprised; we had discussed marriage. I had asked her dad for permission the previous day so I think she saw it coming. We decided to have the wedding in the Summer of 2019 and started looking for locations immediately.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2018-10-31-Colin-and-Kaitlin.jpg\" alt=\"Kaitlin and I at Cliff Bells not long after getting engaged\" />    <figcaption>Kaitlin and I at Cliff Bells not long after getting engaged</figcaption></figure><p>We looked at a few locations and decided to have the wedding and reception at the Scarab Club in Detroit. It’s an awesome art gallery right behind the DIA.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Scarab-Club.jpg\" alt=\"Scarab Club front door\" />    <figcaption>Scarab Club front door</figcaption></figure><p>We have all heard nightmare stories about wedding planning, but I am lucky and Kaitlin is amazing. She handled mostly everything with relatively little stress. It all came together just right as the day approached.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Invite.jpg\" alt=\"Invite and rings\" />    <figcaption>Invite and rings</figcaption></figure><p>Finally the day had arrived. When we first visited the gallery the exhibit was photos of gross conditions in restaurants taken by a former health inspector. It was interesting but not wedding material. Fortunately the exhibit for our day was more appropriate:</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Scarab-Club-Gallery.jpg\" alt=\"Wedding day exhibit\" />    <figcaption>Wedding day exhibit</figcaption></figure><p>Kaitlin’s day started earlier than mine. She had a lot more preparation to do. She had her hair, makeup, and nails done and arrived at the Scarab Club looking beautiful and started the finishing touches.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Kaitlin-getting-ready.jpg\" alt=\"Kaitlin getting ready\" />    <figcaption>Kaitlin getting ready</figcaption></figure><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Kaitlin-getting-ready-2.jpg\" alt=\"Still getting ready...\" />    <figcaption>Still getting ready...</figcaption></figure><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Kaitlin.jpg\" alt=\"Ready!\" />    <figcaption>Ready!</figcaption></figure><p>I arrived shortly after she did and after I nervously helped set up tables and chairs I too went upstairs to get ready.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Colin-and-father-getting-ready.jpg\" alt=\"My dad helping with my cuff links\" />    <figcaption>My dad helping with my cuff links</figcaption></figure><p>When we were both ready I waited in the lounge for Kaitlin so we could get some first look photos. I couldn’t believe my eyes! She was even more stunning than usual. These are some of our favorite photos from the day.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-First-look-2.jpg\" alt=\"First look\" />    <figcaption>First look</figcaption></figure><p>Then it was time for the ceremony. All our guests were seated in the garden, and our amazing officiant Josh was waiting at the altar. We hadn’t rehearsed anything, but even so the ceremony went smoothly. We started the music (La Vie En Rose by Louis Armstrong), I walked out and down to Josh, then Kaitlin’s dad guided her to me.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Altar-2.jpg\" alt=\"Beginning of the ceremony\" />    <figcaption>Beginning of the ceremony</figcaption></figure><p>Josh had a few well chosen words, Kaitlin and I exchanged vows and rings, and then we kissed as husband and wife!</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Altar-3.jpg\" alt=\"Husband and wife\" />    <figcaption>Husband and wife</figcaption></figure><p>After the ceremony Kaitlin and I signed our marriage certificate and took some time for family photos. When we were done with that we made our entrance to the gallery as husband and wife and we each had a glass of sparkling juice. Then our friend Ang announced our first dance and started the music (Never In My Wildest Dreams by Dan Aurbach) and we started our dance. This was one of the best parts of the day for me. A friend had taught us a few rumba moves to do and we had a blast showing off to everyone. It was very special.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-First-dance.jpg\" alt=\"First dance\" />    <figcaption>First dance</figcaption></figure><p>Then Kaitlin danced with her dad and I danced with my mom.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Father-daughter-dance.jpg\" alt=\"Father daughter dance\" />    <figcaption>Father daughter dance</figcaption></figure><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Mother-son-dance.jpg\" alt=\"Mother son dance\" />    <figcaption>Mother son dance</figcaption></figure><p>After the special dances we all went upstairs to the lounge for cake. Our cake was a two tier plain cheesecake accompanied by raspberry and fudge swirl cheesecakes. It was amazing. I was tempted to smash a piece in Kait’s face, but I was chicken.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Cake.jpg\" alt=\"Cake cutting\" />    <figcaption>Cake cutting</figcaption></figure><p>I was very nervous for everything up to this point. It felt like a performance that Kait and I were putting on. We planned and practiced which helped me feel more confident but that feeling never left. After cutting the cake I felt relief that the scripted part of the day was over. The rest of the night was the best party I have ever been to. We danced, talked, laughed, and cried. It was the best day of my life by far.</p><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Angela-Kaitlin-Colin-Erich.jpg\" alt=\"Dancing\" />    <figcaption>Dancing</figcaption></figure><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Ang-Drew-Kaitlin-Angela-Julia.jpg\" alt=\"Dancing\" />    <figcaption>Dancing</figcaption></figure><figure class=\"image\">    <img src=\"/assets/img/gallery/1024/2019-07-20-Tina-Dustin-Drew-Erich-Colin-Kaitlin.jpg\" alt=\"Dancing\" />    <figcaption>Dancing</figcaption></figure><p>There are more pictures <a href=\"/gallery\">here</a>. Thanks for reading.</p>",
            "url": "http://localhost:4000/2019/07/20/wedding",
            
            
            
            "tags": ["self","wedding","wife","family"],
            
            "date_published": "2019-07-20T00:00:00+09:00",
            "date_modified": "2019-07-20T00:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2019/04/22/jekyll-and-pig",
            "title": "Jekyll and pig.js",
            "summary": null,
            "content_text": "Photo GalleryI tried using Jekyll Lens for a photo gallery on colinholzman.xyz. It worked and was easy to use but was not exactly what I wanted. While looking for a better method I came across this post by Sergio Basurco. In it he describes how he modified the Jekyll Photo Gallery plugin to use pig.js for loading images. Pig.js is a simple and lightweight JavaScript library to enable progressive loading of images as the user scrolls to them. The example is exactly the effect that I was looking for.Generating AssetsPig.js expects to be able to load various sizes for each image. To do this the we must store the images in a manner that allows the pig.js function urlForSize to return the path to the image of a given size. I have chosen to store my images like so:├── assets│   ├── img│   │   ├── 20│   │   |   ├── blue.jpg│   │   |   ...│   │   ├── 100│   │   |   ├── red.jpg│   │   |   ...│   │   ├── 250│   │   |   ├── green.jpg│   │   |   ...│   │   ├── 500│   │   │   ├── blue.jpg...Since my goal is to display potentially hundreds of images like this I need a tool to resize them all and generate the directory structure above.gallerybuildergallerybuilder is a simple python script I wrote to take a directory full of photos, resize them all to the sizes required by pig.js, and generate the html for my gallery page. It’s a rough draft for now but it does the trick.Adding linksOne last thing I did to enhance the gallery experience is make each image a link to a full size version. To get the link to the full size image I call urlForSize with size equal to 1024. Therefore when creating thumbnail images for the assets folder we have to create sizes 20, 100, 250, 500, (for original pig.js) and 1024 (for full size link). You can see the simple change to pig.js here.ResultYou can see what this looks like on my site here. TODO: add a lot more photos.",
            "content_html": "<h2 id=\"photo-gallery\">Photo Gallery</h2><p>I tried using <a href=\"https://github.com/ElasticDesigns/jekyll-lens\">Jekyll Lens</a> for a photo gallery on <a href=\"https://colinholzman.xyz\">colinholzman.xyz</a>. It worked and was easy to use but was not exactly what I wanted. While looking for a better method I came across <a href=\"https://chuckleplant.github.io/2018/08/06/pig-img-gallery.html\">this</a> post by Sergio Basurco. In it he describes how he modified the <a href=\"https://github.com/aerobless/jekyll-photo-gallery\">Jekyll Photo Gallery</a> plugin to use <a href=\"https://github.com/schlosser/pig.js\">pig.js</a> for loading images. Pig.js is a simple and lightweight JavaScript library to enable progressive loading of images as the user scrolls to them. The <a href=\"https://feeding.schlosser.io/\">example</a> is exactly the effect that I was looking for.</p><h2 id=\"generating-assets\">Generating Assets</h2><p>Pig.js expects to be able to load various sizes for each image. To do this the we must store the images in a manner that allows the pig.js function <code>urlForSize</code> to return the path to the image of a given size. I have chosen to store my images like so:</p><pre><code>├── assets│   ├── img│   │   ├── 20│   │   |   ├── blue.jpg│   │   |   ...│   │   ├── 100│   │   |   ├── red.jpg│   │   |   ...│   │   ├── 250│   │   |   ├── green.jpg│   │   |   ...│   │   ├── 500│   │   │   ├── blue.jpg...</code></pre><p>Since my goal is to display potentially hundreds of images like this I need a tool to resize them all and generate the directory structure above.</p><h2 id=\"gallerybuilder\">gallerybuilder</h2><p><a href=\"https://github.com/clnhlzmn/gallerybuilder/blob/master/main.py\">gallerybuilder</a> is a simple python script I wrote to take a directory full of photos, resize them all to the sizes required by pig.js, and generate the html for my gallery page. It’s a rough draft for now but it does the trick.</p><h2 id=\"adding-links\">Adding links</h2><p>One last thing I did to enhance the gallery experience is make each image a link to a full size version. To get the link to the full size image I call <code>urlForSize</code> with size equal to 1024. Therefore when creating thumbnail images for the assets folder we have to create sizes 20, 100, 250, 500, (for original pig.js) and 1024 (for full size link). You can see the simple change to pig.js <a href=\"https://github.com/schlosser/pig.js/compare/master...clnhlzmn:master#diff-ded216d1d585dc143459a4bdbbed4626R785\">here</a>.</p><h2 id=\"result\">Result</h2><p>You can see what this looks like on my site <a href=\"https://colinholzman.xyz/gallery\">here</a>. TODO: add a lot more photos.</p>",
            "url": "http://localhost:4000/2019/04/22/jekyll-and-pig",
            
            
            
            "tags": ["website","blog","jekyll"],
            
            "date_published": "2019-04-22T22:00:00+09:00",
            "date_modified": "2019-04-22T22:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2019/04/18/copper-kitten",
            "title": "CopperKitten",
            "summary": null,
            "content_text": "CopperKitten is an exercise in programming language and runtime design and implementation. Check out the code here and read on for more explanation.This project is far from complete. It will probably never be fully complete. I have a few features that I would like to implement before I put it aside. I am writing this post to introduce what I have done so far and invite comments and discussion.CK is a simple functional language with Hindley Milner type inference. Its compiler and assembler are currently implemented in Kotlin. The compiler (ckc), for now, compiles a single ‘script’ file to its corresponding portable assembly listing, and then the assembler (cka) assembles that listing to a portable C99 program. An example of this can be seen in the makefile here. Using the makefile requires java and gcc. The script simple_io.ck is intended to illustrate features of the language that have been implemented so far.The LanguageBuilt-in TypesThere are three built in types in CK: Unit, Int, and Fun(A, ..., R). The first is the usual unit type with exactly one value. The second is a signed integer implemented by the C type intptr_t. The third type Fun(A, ..., R) is the function type where A, ... represents argument types and R is the return type. The function type can also be written as (A, ...) R.User Defined TypesUsers can define their own types using a type ... declaration at the beginning of a CK file. For example the declaration type List = (A) nil() | cons(A, List(A)) creates the type List(A) where A can be any type. User defined types are implemented as a number of compiler generated functions. Pattern matching, when implemented, will use these functions behind the scenes. Until then, the programmer can use them to construct and deconstruct values of user defined types.CK ProgramsFor now a CK program consists of a single .ck file. A .ck file is zero or more declarations followed by an expression. In the grammar there are two types of declaration, but for now only typeDecl is implemented. The type declarations cause a number of functions to be implemented by the compiler for use in the following expression. Evaluation of the expression in the .ck file is evaluation of the CK program. In the future I would like to add support for multiple files.ExpressionsThe grammar of expressions includes      unit    ()        integers    0, 1, 1000000000000000        all the usual unary and binary operations on integers    a + b, -42, a || (b &lt;&gt; c)    All unary and binary operators take arguments of type Int and return values of type Int        functions    (a) a, (a, b) a + b, (n) n * n    CK supports limited tail call optimization. For a function call in tail position, if the callee has the same number of arguments as the caller, then the stack frame is reused, otherwise the call will create a new stack frame.        function applications    id(42), add(1, 2), map(aList, (e) e * e)    CK uses eager evaluation.        two forms of conditional expression    cond() ? true() : false()    if (cond()) true() else false()    if (cond()) true()    Consequent and alternate expressions of a conditional expression must have the same type. An if without an else has type Unit (that means the consequent must have type Unit). Condition expressions must have type Int where 0 is false and 1 is true, for now. I intend to add a true boolean type at some point.        sequence expressions    { a; b }    a is evaluated and its result discarded, then b is evaluated and its value is the value of { a; b }.        and let expressions    let id = (a) a, let rec forever = (f) { f(); forever(f) }, { let id = (a) a; id(42) }    The scope of a let expression is the rest of the expressions in its enclosing sequence. That is {let id = (a) a; id(42)} can be thought of as let id = (a) a in id(42).        tuples and strings are included in the grammar, but they’re not yet implemented  Note that type annotations are not required. For clarity the programmer can annotate the types of let bound variables, functions parameters, and function return types using the : T syntax. For example let id: (A) A = (a: A):A a. Type annotations are not yet fully implemented, but it should be an easy feature to finish. At the moment there are not any situations that require annotations. I would like to add record types and corresponding accessor syntax such as a.b which will, as far as I know, require limited type annotations.C Language BindingsAnother type of function expression is cfun. These can be used any place an ordinary function expression can be used. cfun is used to create a binding to a function defined in C for doing IO and whatever else you would rather do in C. In the example there are two cfuns that are used to read and write characters on stdout/stdin. A cfun looks like cfun id Type where id is the identifier that matches the identifier of the function in C and Type is the type of that function. The native_read and native_write functions are implemented here. The file that defines the native functions must be compiled and linked with the output from ckc/cka (this is illustrated here).ImplementationThe implementation of CK includes a compiler, assembler, and runtime.CompilerThe CK compiler (ckc) takes a single file (program.ck) and compiles it to a CK assembly file (program.cka). Compilation proceeds in a few steps:      Parse program.ck using ANTLR4.    ANTLR4 generates the classes required to parse a CK file based on the grammar ck.g4.        Convert the ast that is produced by ANTLR to a simpler ast that is easier to work with.    The class CkBaseVisitor (generated by ANTLR) is extended here to convert the ANTLR generated ast into a simpler representation. The CkBaseVisitor extensions are used to parse program.ck here and return the simpler ast.        Type check the program.    Type checking is implemented here. The type checker is based on the example implementation at the end of “Basic Polymorphic Typechecking” by Luca Cardelli.        Compile the program.    Compilation is done by the CompilationVisitor class. For now this amounts to visiting the ast and returning a list of assembler instructions.  The command line option parser is used when ckc is invoked on the command line. It parses command line options, reads the input file, performs the compilation steps above, and writes the output to the specified output file.AssemblerThe CK assembler (cka) takes a single program.cka file and converts it to a C99 file. The main task of the assembler is to convert the abstract assembler syntax into a list of concrete bytecodes and literal values to be consumed by the runtime vm. Part of cka’s task is to generate layout functions to be used by the memory management scheme to identify pointers on the stack and in heap allocated objects. Another thing that the assembler does is combine the program bytecode array, generated functions, and other supporting pieces together into a .c file with a main function that initializes the CK runtime and starts execution.I won’t go into too much detail on cka here unless there is interest. It’s pretty boring and mostly self explanatory.The output of cka must be compiled and linked with any files containing definitions of cfuns and with the chosen garbage collection implementation file (one of copying_gc.c, incremental_gc.c, or mark_compact_gc.c). Again, the example makefile demonstrates this.RuntimeThe CK runtime is a simple bytecode interpreter combined with one of three tracing garbage collection implementations. I could have implemented CK by compiling directly to C, rather than using a vm, but I wanted to be able to support tail call optimization and I couldn’t see how to do that in plain C.VMThe CK vm is implemented by vm.h. Opcodes are enumerated in the type enum vm_op_code and are reasonably well documented there. In addition to the usual arithmetic operations there are some for control flow, stack frame management, memory allocation, storing/loading values to/from indices into heap objects/stack frames/function arguments/function captures, and some other miscellaneous operations. Program execution is done by the function vm_execute which simply iterates over the given program array dispatching on each op code.Memory ManagementThere are two copying collectors (one incremental) and one mark compact. I hope they can be used as examples for people who are curious about how garbage collection works. The garbage collectors all depend on gc_interface.h which declares a common set of functions with which the vm can interface with the heap memory. There are probably subtle bugs in the implementations of the garbage collectors. I am most confident in the correctness of the simple copying collector, least confident in the incremental copying collector, and the mark compact collector is somewhere in between.Future WorkThis is work that I would like to do on this project in the future.      clean up, organize, and simplify: compiler, assembler, and runtime source files        integrate programmer type annotations with type checker        strings and tuples        pattern matching on instances of user defined types        modules        implement parser and CLI in Kotlin (removing ANTLR and Apache CLI dependencies)        implement compiler and assembler in functional language like ML (or at least in a functional style in Kotlin)        implement compiler and assembler in CK        generate machine code rather than C99        optimize polymorphic functions to not always use boxed types for integers        lots of other optimizations  Thanks for making it this far! Let me know what you think with a comment below.",
            "content_html": "<p>CopperKitten is an exercise in programming language and runtime design and implementation. Check out the code <a href=\"https://github.com/clnhlzmn/CopperKitten\">here</a> and read on for more explanation.</p><p>This project is far from complete. It will probably never be fully complete. I have a few features that I would like to implement before I put it aside. I am writing this post to introduce what I have done so far and invite comments and discussion.</p><p>CK is a simple functional language with Hindley Milner type inference. Its compiler and assembler are currently implemented in Kotlin. The compiler (<a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/\">ckc</a>), for now, compiles a single ‘script’ file to its corresponding portable assembly listing, and then the assembler (<a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/cka/\">cka</a>) assembles that listing to a portable C99 program. An example of this can be seen in the makefile <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/example/simple/makefile\">here</a>. Using the makefile requires java and gcc. The script <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/example/simple/simple_io.ck\">simple_io.ck</a> is intended to illustrate features of the language that have been implemented so far.</p><h2 id=\"the-language\">The Language</h2><h3 id=\"built-in-types\">Built-in Types</h3><p>There are three built in types in CK: <code>Unit</code>, <code>Int</code>, and <code>Fun(A, ..., R)</code>. The first is the usual unit type with exactly one value. The second is a signed integer implemented by the C type <code>intptr_t</code>. The third type <code>Fun(A, ..., R)</code> is the function type where <code>A, ...</code> represents argument types and <code>R</code> is the return type. The function type can also be written as <code>(A, ...) R</code>.</p><h3 id=\"user-defined-types\">User Defined Types</h3><p>Users can define their own types using a <code>type ...</code> declaration at the beginning of a CK file. For example the declaration <code>type List = (A) nil() | cons(A, List(A))</code> creates the type <code>List(A)</code> where <code>A</code> can be any type. User defined types are implemented as a number of compiler generated functions. Pattern matching, when implemented, will use these functions behind the scenes. Until then, the programmer can use them to construct and deconstruct values of user defined types.</p><h3 id=\"ck-programs\">CK Programs</h3><p>For now a CK program consists of a single .ck file. A .ck file is zero or more declarations followed by an expression. In the <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/grammar/ck.g4\">grammar</a> there are two types of declaration, but for now only <code>typeDecl</code> is implemented. The type declarations cause a number of functions to be implemented by the compiler for use in the following expression. Evaluation of the expression in the .ck file is evaluation of the CK program. In the future I would like to add support for multiple files.</p><h3 id=\"expressions\">Expressions</h3><p>The grammar of expressions includes</p><ul>  <li>    <p>unit</p>    <p><code>()</code></p>  </li>  <li>    <p>integers</p>    <p><code>0</code>, <code>1</code>, <code>1000000000000000</code></p>  </li>  <li>    <p>all the usual unary and binary operations on integers</p>    <p><code>a + b</code>, <code>-42</code>, <code>a || (b &lt;&gt; c)</code></p>    <p>All unary and binary operators take arguments of type <code>Int</code> and return values of type <code>Int</code></p>  </li>  <li>    <p>functions</p>    <p><code>(a) a</code>, <code>(a, b) a + b</code>, <code>(n) n * n</code></p>    <p>CK supports limited tail call optimization. For a function call in tail position, if the callee has the same number of arguments as the caller, then the stack frame is reused, otherwise the call will create a new stack frame.</p>  </li>  <li>    <p>function applications</p>    <p><code>id(42)</code>, <code>add(1, 2)</code>, <code>map(aList, (e) e * e)</code></p>    <p>CK uses eager evaluation.</p>  </li>  <li>    <p>two forms of conditional expression</p>    <p><code>cond() ? true() : false()</code></p>    <p><code>if (cond()) true() else false()</code></p>    <p><code>if (cond()) true()</code></p>    <p>Consequent and alternate expressions of a conditional expression must have the same type. An <code>if</code> without an <code>else</code> has type <code>Unit</code> (that means the consequent must have type <code>Unit</code>). Condition expressions must have type <code>Int</code> where 0 is false and 1 is true, for now. I intend to add a true boolean type at some point.</p>  </li>  <li>    <p>sequence expressions</p>    <p><code>{ a; b }</code></p>    <p><code>a</code> is evaluated and its result discarded, then <code>b</code> is evaluated and its value is the value of <code>{ a; b }</code>.</p>  </li>  <li>    <p>and let expressions</p>    <p><code>let id = (a) a</code>, <code>let rec forever = (f) { f(); forever(f) }</code>, <code>{ let id = (a) a; id(42) }</code></p>    <p>The scope of a let expression is the rest of the expressions in its enclosing sequence. That is <code>{let id = (a) a; id(42)}</code> can be thought of as <code>let id = (a) a in id(42)</code>.</p>  </li>  <li>    <p>tuples and strings are included in the grammar, but they’re not yet implemented</p>  </li></ul><p>Note that type annotations are not required. For clarity the programmer can annotate the types of let bound variables, functions parameters, and function return types using the <code>: T</code> syntax. For example <code>let id: (A) A = (a: A):A a</code>. Type annotations are not yet fully implemented, but it should be an easy feature to finish. At the moment there are not any situations that <em>require</em> annotations. I would like to add record types and corresponding accessor syntax such as <code>a.b</code> which will, as far as I know, require limited type annotations.</p><h3 id=\"c-language-bindings\">C Language Bindings</h3><p>Another type of function expression is <code>cfun</code>. These can be used any place an ordinary function expression can be used. <code>cfun</code> is used to create a binding to a function defined in C for doing IO and whatever else you would rather do in C. In the <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/example/simple/simple_io.ck\">example</a> there are two <code>cfun</code>s that are used to read and write characters on <code>stdout</code>/<code>stdin</code>. A <code>cfun</code> looks like <code>cfun id Type</code> where <code>id</code> is the identifier that matches the identifier of the function in C and <code>Type</code> is the type of that function. The <code>native_read</code> and <code>native_write</code> functions are implemented <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/runtime/builtin_cfuns.c\">here</a>. The file that defines the native functions must be compiled and linked with the output from ckc/cka (this is illustrated <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/example/simple/makefile\">here</a>).</p><h2 id=\"implementation\">Implementation</h2><p>The implementation of CK includes a compiler, assembler, and runtime.</p><h3 id=\"compiler\">Compiler</h3><p>The CK compiler (<a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/\">ckc</a>) takes a single file (program.ck) and compiles it to a CK assembly file (program.cka). Compilation proceeds in a few steps:</p><ol>  <li>    <p>Parse program.ck using ANTLR4.</p>    <p>ANTLR4 generates the <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/gen/\">classes</a> required to parse a CK file based on the grammar <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/grammar/ck.g4\">ck.g4</a>.</p>  </li>  <li>    <p>Convert the ast that is produced by ANTLR to a simpler ast that is easier to work with.</p>    <p>The class CkBaseVisitor (generated by ANTLR) is extended <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/grammar/visitors\">here</a> to convert the ANTLR generated ast into a <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/ast/node/\">simpler representation</a>. The CkBaseVisitor extensions are used to parse program.ck <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/grammar/Parse.kt\">here</a> and return the simpler ast.</p>  </li>  <li>    <p>Type check the program.</p>    <p>Type checking is implemented <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/analyze/Analyze.kt\">here</a>. The type checker is based on the example implementation at the end of <a href=\"http://lucacardelli.name/Papers/BasicTypechecking.pdf\">“Basic Polymorphic Typechecking” by Luca Cardelli</a>.</p>  </li>  <li>    <p>Compile the program.</p>    <p>Compilation is done by the <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/ast/visitors/CompilationVisitor.kt\">CompilationVisitor</a> class. For now this amounts to visiting the ast and returning a list of assembler instructions.</p>  </li></ol><p>The <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/ckc/src/ck/Cli.kt\">command line option parser</a> is used when ckc is invoked on the command line. It parses command line options, reads the input file, performs the compilation steps above, and writes the output to the specified output file.</p><h3 id=\"assembler\">Assembler</h3><p>The CK assembler (<a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/cka/\">cka</a>) takes a single program.cka file and converts it to a C99 file. The main task of the assembler is to convert the <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/compiler/cka/grammar/cka.g4\">abstract assembler syntax</a> into a list of concrete bytecodes and literal values to be consumed by the runtime vm. Part of cka’s task is to generate layout functions to be used by the memory management scheme to identify pointers on the stack and in heap allocated objects. Another thing that the assembler does is combine the program bytecode array, generated functions, and other supporting pieces together into a .c file with a <code>main</code> function that initializes the CK runtime and starts execution.</p><p>I won’t go into too much detail on cka here unless there is interest. It’s pretty boring and mostly self explanatory.</p><p>The output of cka must be compiled and linked with any files containing definitions of <code>cfun</code>s and with the chosen garbage collection implementation file (one of copying_gc.c, incremental_gc.c, or mark_compact_gc.c). Again, the example <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/example/simple/makefile\">makefile</a> demonstrates this.</p><h3 id=\"runtime\">Runtime</h3><p>The CK runtime is a simple bytecode interpreter combined with one of three tracing garbage collection implementations. I could have implemented CK by compiling directly to C, rather than using a vm, but I wanted to be able to support tail call optimization and I couldn’t see how to do that in plain C.</p><h4 id=\"vm\">VM</h4><p>The CK vm is implemented by <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/runtime/vm.h\">vm.h</a>. Opcodes are enumerated in the type <code>enum vm_op_code</code> and are reasonably well documented there. In addition to the usual arithmetic operations there are some for control flow, stack frame management, memory allocation, storing/loading values to/from indices into heap objects/stack frames/function arguments/function captures, and some other miscellaneous operations. Program execution is done by the function <code>vm_execute</code> which simply iterates over the given program array dispatching on each op code.</p><h4 id=\"memory-management\">Memory Management</h4><p>There are two copying collectors (one incremental) and one mark compact. I hope they can be used as examples for people who are curious about how garbage collection works. The garbage collectors all depend on <a href=\"https://github.com/clnhlzmn/CopperKitten/blob/master/runtime/gc_interface.h\">gc_interface.h</a> which declares a common set of functions with which the vm can interface with the heap memory. There are probably subtle bugs in the implementations of the garbage collectors. I am most confident in the correctness of the simple copying collector, least confident in the incremental copying collector, and the mark compact collector is somewhere in between.</p><h2 id=\"future-work\">Future Work</h2><p>This is work that I would like to do on this project in the future.</p><ul>  <li>    <p>clean up, organize, and simplify: compiler, assembler, and runtime source files</p>  </li>  <li>    <p>integrate programmer type annotations with type checker</p>  </li>  <li>    <p>strings and tuples</p>  </li>  <li>    <p>pattern matching on instances of user defined types</p>  </li>  <li>    <p>modules</p>  </li>  <li>    <p>implement parser and CLI in Kotlin (removing ANTLR and Apache CLI dependencies)</p>  </li>  <li>    <p>implement compiler and assembler in functional language like ML (or at least in a functional style in Kotlin)</p>  </li>  <li>    <p>implement compiler and assembler in CK</p>  </li>  <li>    <p>generate machine code rather than C99</p>  </li>  <li>    <p>optimize polymorphic functions to not always use boxed types for integers</p>  </li>  <li>    <p>lots of other optimizations</p>  </li></ul><p>Thanks for making it this far! Let me know what you think with a comment below.</p>",
            "url": "http://localhost:4000/2019/04/18/copper-kitten",
            
            
            
            "tags": ["languages","cs","design"],
            
            "date_published": "2019-04-18T06:00:00+09:00",
            "date_modified": "2019-04-18T06:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2018/12/08/website-updates",
            "title": "website updates",
            "summary": null,
            "content_text": "PhotosThere are some really neat themes for Jekyll for all sorts of things. I found one for a photo gallery and set it up at colinholzman.xyz/photos. Not a lot of photos up there at the moment, but that’ll change.The theme I used is called Lens. It works similarly to default Jekyll. Put your photos in one place, run jekyll build and you’ll have the static site ready to serve, in my case, with app.use('/photos', express.static('/home/admin/photos'));.Resumecolinholzman.xyz/resume.pdf has a pdf of my resume. This is simplyconst resume = fs.readFileSync(path.join(__dirname, 'resume.pdf'));app.get('/resume.pdf', (req, res) =&gt; {    res.send(resume);});on the server.I should probably update my resume.WebcamI used an old USB webcam, a rasberry pi 3 B, and motionEyeOs to set up a stream of my backyard at colinholzman.xyz/cam. Download the latest image of motionEyeOs for your device from here. For a RPi burn the image on a sd card (I used etcher on my mac). Plug in the camera, insert the sd card, and connect the Pi to the network and power. Then go to the Pi’s address in your browser to set up all the options. There are a lot of options to configure but the camera and stream worked out of the box.I forwarded the video streaming port through my router and that enabled me to access the stream from the internet. On the colinholzman.xyz server I addedapp.get('/cam', (req, res) =&gt; {    res.sendFile(path.join(__dirname, 'cam.html'));});where cam.html just has an iframe pointing to my home router on the motionEyeOs streaming port. It seems to work OK. It doesn’t work over https though. I wonder why?",
            "content_html": "<h3 id=\"photos\">Photos</h3><p>There are some really neat themes for Jekyll for all sorts of things. I found one for a photo gallery and set it up at <a href=\"https://colinholzman.xyz/photos\">colinholzman.xyz/photos</a>. Not a lot of photos up there at the moment, but that’ll change.</p><p>The theme I used is called <a href=\"https://github.com/ElasticDesigns/jekyll-lens\">Lens</a>. It works similarly to default Jekyll. Put your photos in one place, run <code>jekyll build</code> and you’ll have the static site ready to serve, in my case, with <code>app.use('/photos', express.static('/home/admin/photos'));</code>.</p><h3 id=\"resume\">Resume</h3><p><a href=\"https://colinholzman.xyz/resume.pdf\">colinholzman.xyz/resume.pdf</a> has a pdf of my resume. This is simply</p><pre><code>const resume = fs.readFileSync(path.join(__dirname, 'resume.pdf'));app.get('/resume.pdf', (req, res) =&gt; {    res.send(resume);});</code></pre><p>on the server.</p><p>I should probably update my resume.</p><h3 id=\"webcam\">Webcam</h3><p>I used an old USB webcam, a rasberry pi 3 B, and <a href=\"https://github.com/ccrisan/motioneyeos\">motionEyeOs</a> to set up a stream of my backyard at <a href=\"http://colinholzman.xyz/cam\">colinholzman.xyz/cam</a>. Download the latest image of motionEyeOs for your device from <a href=\"https://github.com/ccrisan/motioneyeos/wiki/Supported-Devices\">here</a>. For a RPi burn the image on a sd card (I used etcher on my mac). Plug in the camera, insert the sd card, and connect the Pi to the network and power. Then go to the Pi’s address in your browser to set up all the options. There are a lot of options to configure but the camera and stream worked out of the box.</p><p>I forwarded the video streaming port through my router and that enabled me to access the stream from the internet. On the colinholzman.xyz server I added</p><pre><code>app.get('/cam', (req, res) =&gt; {    res.sendFile(path.join(__dirname, 'cam.html'));});</code></pre><p>where cam.html just has an iframe pointing to my home router on the motionEyeOs streaming port. It seems to work OK. It doesn’t work over https though. I wonder why?</p>",
            "url": "http://localhost:4000/2018/12/08/website-updates",
            
            
            
            
            
            "date_published": "2018-12-08T06:24:00+09:00",
            "date_modified": "2018-12-08T06:24:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://localhost:4000/2018/11/27/colinholzman-xyz",
            "title": "colinholzman.xyz",
            "summary": null,
            "content_text": "I’ve wanted to learn what it takes to run a website. Finally I’ve put together colinholzman.xyz. This is based on knowledge found all over the internet and through trial and error. It’s fitting to write down some instructions on how to reproduce it as the first post.get a host to serve your siteI used Amazon Lightsail for this. This site is currently running on the cheapest instance I could get (512 MB RAM, 1 vCPU, 20 GB SSD). It’s running Debian 8.domain nameBuy a domain name from someone like porkbun.com. Once you have an account you can create a record that will return the static ip that you assign to your server when someone asks for the address of colinholzman.xyz or whatever.install node.jsDo this in whatever way is typical for your os. I think Amazon has images with node already installed.install express, forever, and probably some other thingsnpm install expressnpm install forever...create a file server.jsHere is a simple static http server (a pretty trivial use of express I’m sure):// Dependenciesconst fs = require('fs');const http = require('http');const express = require('express');const app = express();app.use(express.static('/home/admin/site'))// Starting http serverconst httpServer = http.createServer(app);httpServer.listen(80, () =&gt; {    //console.log('HTTP Server running on port 80');});Run it like sudo forever start server.js. We want to use https though!Let’s EncryptIn order to get the nice secure looking green lock when you visit your site you’ll have to obtain some on-the-level ssl certificates. To do this we go to certbot.eff.org and download the certbot-auto tool. There are pretty solid instructions there. It comes down to running something like sudo ./path/to/certbot-auto certonly --webroot -d colinholzman.xyz. With the certificate generated make server.js look like this:// Dependenciesconst fs = require('fs');const https = require('https');const express = require('express');const app = express();// Certificateconst privateKey = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/privkey.pem', 'utf8');const certificate = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/cert.pem', 'utf8');const ca = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/chain.pem', 'utf8');const credentials = {    key: privateKey,    cert: certificate,    ca: ca};app.use(express.static('/home/admin/site'))// Starting https serverconst httpsServer = https.createServer(credentials, app);httpsServer.listen(443, () =&gt; {    //console.log('HTTPS Server running on port 443');});JekyllJekyll is a static website generator. It takes a bunch of markdown content and puts it into place using templates and creates the html and other stuff that gets served from /home/admin/site.",
            "content_html": "<p>I’ve wanted to learn what it takes to run a website. Finally I’ve put together <a href=\"https://colinholzman.xyz\">colinholzman.xyz</a>. This is based on knowledge found all over the internet and through trial and error. It’s fitting to write down some instructions on how to reproduce it as the first post.</p><h3 id=\"get-a-host-to-serve-your-site\">get a host to serve your site</h3><p>I used Amazon Lightsail for this. This site is currently running on the cheapest instance I could get (512 MB RAM, 1 vCPU, 20 GB SSD). It’s running Debian 8.</p><h3 id=\"domain-name\">domain name</h3><p>Buy a domain name from someone like <a href=\"https://porkbun.com\">porkbun.com</a>. Once you have an account you can create a record that will return the static ip that you assign to your server when someone asks for the address of colinholzman.xyz or whatever.</p><h3 id=\"install-nodejs\">install node.js</h3><p>Do this in whatever way is typical for your os. I think Amazon has images with node already installed.</p><h3 id=\"install-express-forever-and-probably-some-other-things\">install express, forever, and probably some other things</h3><p><code>npm install express</code><code>npm install forever</code><code>...</code></p><h3 id=\"create-a-file-serverjs\">create a file server.js</h3><p>Here is a simple static http server (a pretty trivial use of express I’m sure):</p><pre><code>// Dependenciesconst fs = require('fs');const http = require('http');const express = require('express');const app = express();app.use(express.static('/home/admin/site'))// Starting http serverconst httpServer = http.createServer(app);httpServer.listen(80, () =&gt; {    //console.log('HTTP Server running on port 80');});</code></pre><p>Run it like <code>sudo forever start server.js</code>. We want to use https though!</p><h3 id=\"lets-encrypt\">Let’s Encrypt</h3><p>In order to get the nice secure looking green lock when you visit your site you’ll have to obtain some on-the-level ssl certificates. To do this we go to <a href=\"https://certbot.eff.org/\">certbot.eff.org</a> and download the certbot-auto tool. There are pretty solid instructions there. It comes down to running something like <code>sudo ./path/to/certbot-auto certonly --webroot -d colinholzman.xyz</code>. With the certificate generated make <code>server.js</code> look like this:</p><pre><code>// Dependenciesconst fs = require('fs');const https = require('https');const express = require('express');const app = express();// Certificateconst privateKey = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/privkey.pem', 'utf8');const certificate = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/cert.pem', 'utf8');const ca = fs.readFileSync('/etc/letsencrypt/live/colinholzman.xyz/chain.pem', 'utf8');const credentials = {    key: privateKey,    cert: certificate,    ca: ca};app.use(express.static('/home/admin/site'))// Starting https serverconst httpsServer = https.createServer(credentials, app);httpsServer.listen(443, () =&gt; {    //console.log('HTTPS Server running on port 443');});</code></pre><h3 id=\"jekyll\">Jekyll</h3><p><a href=\"https://jekyllrb.com/\">Jekyll</a> is a static website generator. It takes a bunch of markdown content and puts it into place using templates and creates the html and other stuff that gets served from <code>/home/admin/site</code>.</p>",
            "url": "http://localhost:4000/2018/11/27/colinholzman-xyz",
            
            
            
            
            
            "date_published": "2018-11-27T21:00:00+09:00",
            "date_modified": "2018-11-27T21:00:00+09:00",
            
                "author":  {
                "name": "Colin Holzman",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}